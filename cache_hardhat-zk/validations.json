{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "5b11ba89fa3d285856e8b011e72efc2445507303095ab96f4bf621cdb34d9532",
          "withoutMetadata": "5b11ba89fa3d285856e8b011e72efc2445507303095ab96f4bf621cdb34d9532",
          "linkedWithoutMetadata": "5b11ba89fa3d285856e8b011e72efc2445507303095ab96f4bf621cdb34d9532"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "cf1e0567a30645fa0a054df31ba04fae27b67c2eed2bbb9d447f31268195427d",
          "withoutMetadata": "cf1e0567a30645fa0a054df31ba04fae27b67c2eed2bbb9d447f31268195427d",
          "linkedWithoutMetadata": "cf1e0567a30645fa0a054df31ba04fae27b67c2eed2bbb9d447f31268195427d"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "2b35620b11bb35d3328fedbda6c4a390e3ea6ebcc632c5c26d187d3bedb47210",
          "withoutMetadata": "2b35620b11bb35d3328fedbda6c4a390e3ea6ebcc632c5c26d187d3bedb47210",
          "linkedWithoutMetadata": "2b35620b11bb35d3328fedbda6c4a390e3ea6ebcc632c5c26d187d3bedb47210"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "0c98576c5b2ec2c0dd584fae83a4742d0325af81c6bef68eb39fe0d00baf56b5",
          "withoutMetadata": "0c98576c5b2ec2c0dd584fae83a4742d0325af81c6bef68eb39fe0d00baf56b5",
          "linkedWithoutMetadata": "0c98576c5b2ec2c0dd584fae83a4742d0325af81c6bef68eb39fe0d00baf56b5"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "25fb28549065ed2a62e943eeaae143eb47d1281f7e3ee9a805856d36e4bac4a0",
          "withoutMetadata": "25fb28549065ed2a62e943eeaae143eb47d1281f7e3ee9a805856d36e4bac4a0",
          "linkedWithoutMetadata": "25fb28549065ed2a62e943eeaae143eb47d1281f7e3ee9a805856d36e4bac4a0"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "c2a27377b4bb276862988c6610ec671404792930fee912d51e8afd2cea2beb45",
          "withoutMetadata": "c2a27377b4bb276862988c6610ec671404792930fee912d51e8afd2cea2beb45",
          "linkedWithoutMetadata": "c2a27377b4bb276862988c6610ec671404792930fee912d51e8afd2cea2beb45"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "4041358c6c1ba521462e5dee24759d3b28a3922cf3f0fee600789d286b030aff",
          "withoutMetadata": "4041358c6c1ba521462e5dee24759d3b28a3922cf3f0fee600789d286b030aff",
          "linkedWithoutMetadata": "4041358c6c1ba521462e5dee24759d3b28a3922cf3f0fee600789d286b030aff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Allo.sol:Allo": {
        "src": "contracts/core/Allo.sol:89",
        "version": {
          "withMetadata": "2f79f426768c97cb1acf64a32003887b7ff398a1a628f7edd32e275b5ade8694",
          "withoutMetadata": "2f79f426768c97cb1acf64a32003887b7ff398a1a628f7edd32e275b5ade8694",
          "linkedWithoutMetadata": "2f79f426768c97cb1acf64a32003887b7ff398a1a628f7edd32e275b5ade8694"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "solady/src/auth/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IAllo.sol:IAllo"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "getFeeDenominator()",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "isCloneableStrategy(address)",
          "getPool(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)21169_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "percentFee",
              "offset": 0,
              "slot": "52",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:114"
            },
            {
              "label": "baseFee",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:129"
            },
            {
              "label": "_poolIndex",
              "offset": 0,
              "slot": "54",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "55",
              "type": "t_address_payable",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "56",
              "type": "t_contract(IRegistry)4234",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:133"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "57",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:134"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "58",
              "type": "t_mapping(t_uint256,t_struct(Pool)3753_storage)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:135"
            },
            {
              "label": "cloneableStrategies",
              "offset": 0,
              "slot": "59",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)4401": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)21169_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)3753_storage)": {
              "label": "mapping(uint256 => struct IAllo.Pool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Pool)3753_storage": {
              "label": "struct IAllo.Pool",
              "members": [
                {
                  "label": "profileId",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "strategy",
                  "type": "t_contract(IStrategy)4401",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "managerRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)21169_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Anchor.sol:Anchor": {
        "src": "contracts/core/Anchor.sol:89",
        "version": {
          "withMetadata": "3f7ec37485b5ed9bf478acdb55a0e4b8bae2dcd485f42fed1710cfc6dd174c0c",
          "withoutMetadata": "3f7ec37485b5ed9bf478acdb55a0e4b8bae2dcd485f42fed1710cfc6dd174c0c",
          "linkedWithoutMetadata": "3f7ec37485b5ed9bf478acdb55a0e4b8bae2dcd485f42fed1710cfc6dd174c0c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "execute(address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Anchor",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "profileId",
            "src": "contracts/core/Anchor.sol:89"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Registry.sol:Registry": {
        "src": "contracts/core/Registry.sol:103",
        "version": {
          "withMetadata": "82743f24ee5ef5f351f77cb6415a3a555444cb31984ce0f6baffaa585f33e4a3",
          "withoutMetadata": "82743f24ee5ef5f351f77cb6415a3a555444cb31984ce0f6baffaa585f33e4a3",
          "linkedWithoutMetadata": "82743f24ee5ef5f351f77cb6415a3a555444cb31984ce0f6baffaa585f33e4a3"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "contracts/core/libraries/Native.sol:Native",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "contracts/core/interfaces/IRegistry.sol:IRegistry"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)21169_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "anchorToProfileId",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:109"
            },
            {
              "label": "profilesById",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_struct(Profile)4061_storage)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:111"
            },
            {
              "label": "profileIdToPendingOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:113"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Profile)4061_storage)": {
              "label": "mapping(bytes32 => struct IRegistry.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)21169_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Profile)4061_storage": {
              "label": "struct IRegistry.Profile",
              "members": [
                {
                  "label": "id",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "anchor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)21169_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IAllo.sol:IAllo": {
        "src": "contracts/core/interfaces/IAllo.sol:97",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "isCloneableStrategy(address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "getPool(uint256)",
          "getFeeDenominator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IRegistry.sol:IRegistry": {
        "src": "contracts/core/interfaces/IRegistry.sol:92",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/core/interfaces/IStrategy.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "isValidAllocator(address)",
          "isPoolActive()",
          "getPoolAmount()",
          "increasePoolAmount(uint256)",
          "getRecipientStatus(address)",
          "getPayouts(address[],bytes[])",
          "initialize(uint256,bytes)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Clone.sol:Clone": {
        "src": "contracts/core/libraries/Clone.sol:37",
        "version": {
          "withMetadata": "96efe7e1d8fd800599233eb27460ad6d361caf82ce7aba2c80c786d824dd4f00",
          "withoutMetadata": "96efe7e1d8fd800599233eb27460ad6d361caf82ce7aba2c80c786d824dd4f00",
          "linkedWithoutMetadata": "96efe7e1d8fd800599233eb27460ad6d361caf82ce7aba2c80c786d824dd4f00"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Errors.sol:Errors": {
        "src": "contracts/core/libraries/Errors.sol:109",
        "version": {
          "withMetadata": "3a1a8cdc324b15e82d3ae6039f31e4ee41d85f6f79c23ed04f1abd61d97cf7d6",
          "withoutMetadata": "3a1a8cdc324b15e82d3ae6039f31e4ee41d85f6f79c23ed04f1abd61d97cf7d6",
          "linkedWithoutMetadata": "3a1a8cdc324b15e82d3ae6039f31e4ee41d85f6f79c23ed04f1abd61d97cf7d6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Native.sol:Native": {
        "src": "contracts/core/libraries/Native.sol:26",
        "version": {
          "withMetadata": "1493dea830954513180dcc0d2c447459001ab8597de273a9c7563b792cb2eb18",
          "withoutMetadata": "1493dea830954513180dcc0d2c447459001ab8597de273a9c7563b792cb2eb18",
          "linkedWithoutMetadata": "1493dea830954513180dcc0d2c447459001ab8597de273a9c7563b792cb2eb18"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Transfer.sol:Transfer": {
        "src": "contracts/core/libraries/Transfer.sol:95",
        "version": {
          "withMetadata": "9e62f77731b497aa85dddb449f0433a74f0602a0bff5bf802b201f3fc34ad78e",
          "withoutMetadata": "9e62f77731b497aa85dddb449f0433a74f0602a0bff5bf802b201f3fc34ad78e",
          "linkedWithoutMetadata": "9e62f77731b497aa85dddb449f0433a74f0602a0bff5bf802b201f3fc34ad78e"
        },
        "inherit": [
          "contracts/core/libraries/Native.sol:Native"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/factory/ContractFactory.sol:ContractFactory": {
        "src": "contracts/factory/ContractFactory.sol:107",
        "version": {
          "withMetadata": "3e8db5fb1ef6e7444c0e2fdabb1e4ee83c9d296b45b9516037d9ff57bf45c746",
          "withoutMetadata": "3e8db5fb1ef6e7444c0e2fdabb1e4ee83c9d296b45b9516037d9ff57bf45c746",
          "linkedWithoutMetadata": "3e8db5fb1ef6e7444c0e2fdabb1e4ee83c9d296b45b9516037d9ff57bf45c746"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "deploy(string,string,bytes)",
          "setDeployer(address,bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ContractFactory",
            "src": "contracts/factory/ContractFactory.sol:119"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "usedSalts",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            },
            {
              "label": "isDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/BaseStrategy.sol:BaseStrategy": {
        "src": "contracts/strategies/BaseStrategy.sol:111",
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "getPoolAmount()",
          "isPoolActive()",
          "getRecipientStatus(address)",
          "increasePoolAmount(uint256)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)",
          "getPayouts(address[],bytes[])",
          "isValidAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseStrategy",
            "src": "contracts/strategies/BaseStrategy.sol:129"
          },
          {
            "kind": "state-variable-immutable",
            "name": "allo",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          },
          {
            "kind": "state-variable-immutable",
            "name": "strategyId",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:DirectGrantsSimpleStrategy": {
        "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:110",
        "version": {
          "withMetadata": "e21493e3c72bc4ee2bed6ed3892669015a7d39469a902d334e4214299cba2642",
          "withoutMetadata": "e21493e3c72bc4ee2bed6ed3892669015a7d39469a902d334e4214299cba2642",
          "linkedWithoutMetadata": "e21493e3c72bc4ee2bed6ed3892669015a7d39469a902d334e4214299cba2642"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getMilestoneStatus(address,uint256)",
          "getMilestones(address)",
          "setMilestones(address,struct DirectGrantsSimpleStrategy.Milestone[])",
          "reviewSetMilestones(address,uint8)",
          "submitMilestone(address,uint256,(uint256,string))",
          "rejectMilestone(address,uint256)",
          "setRecipientStatusToInReview(address[])",
          "setPoolActive(bool)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DirectGrantsSimpleStrategy",
            "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:192"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:161"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:163"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:164"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:167"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:168"
            },
            {
              "label": "_acceptedRecipientIds",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:172"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)5489_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:177"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Milestone)5498_storage)dyn_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:179"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:184"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)5498_storage)dyn_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(Milestone)5498_storage)dyn_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Milestone[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5489_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)5498_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)5489_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "milestonesReviewStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:DonationVotingCustomRegistryStrategy": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52",
        "version": {
          "withMetadata": "3e35b23c490b9999b4205539ece1839b1d4c49bcf006efb911f56c36ef21e453",
          "withoutMetadata": "3e35b23c490b9999b4205539ece1839b1d4c49bcf006efb911f56c36ef21e453",
          "linkedWithoutMetadata": "3e35b23c490b9999b4205539ece1839b1d4c49bcf006efb911f56c36ef21e453"
        },
        "inherit": [
          "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingCustomRegistryStrategy",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:162"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7103_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:165"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:167"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:172"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(SimpleProjectRegistry)7074",
              "contract": "DonationVotingCustomRegistryStrategy",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(SimpleProjectRegistry)7074": {
              "label": "contract SimpleProjectRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7103_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4252_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7103_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:SimpleProjectRegistry": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:26",
        "version": {
          "withMetadata": "d27980722ad0e89226c4381e399fcfc57ae8744f071077f96bfcd2290886f29c",
          "withoutMetadata": "d27980722ad0e89226c4381e399fcfc57ae8744f071077f96bfcd2290886f29c",
          "linkedWithoutMetadata": "d27980722ad0e89226c4381e399fcfc57ae8744f071077f96bfcd2290886f29c"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addProject(address)",
          "addProjects(address[])",
          "removeProject(address)",
          "removeProjects(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleProjectRegistry",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "projects",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleProjectRegistry",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy": {
        "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:100",
        "version": {
          "withMetadata": "4deb90469bf3b010332d4c1b973a432085ea00af1deeecde4d1b9b8fd074f497",
          "withoutMetadata": "4deb90469bf3b010332d4c1b973a432085ea00af1deeecde4d1b9b8fd074f497",
          "linkedWithoutMetadata": "4deb90469bf3b010332d4c1b973a432085ea00af1deeecde4d1b9b8fd074f497"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "setPayout(address[],uint256[])",
          "claim(struct DonationVotingStrategy.Claim[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingStrategy",
            "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:198"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:162"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7103_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:165"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:167"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:172"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7103_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4252_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7103_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:ProportionalPayoutStrategy": {
        "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:113",
        "version": {
          "withMetadata": "d6107e7ce7df751ec78cb35b27a6cc18c11d883532d20d7302e2cf3a6707e1d7",
          "withoutMetadata": "d6107e7ce7df751ec78cb35b27a6cc18c11d883532d20d7302e2cf3a6707e1d7",
          "linkedWithoutMetadata": "d6107e7ce7df751ec78cb35b27a6cc18c11d883532d20d7302e2cf3a6707e1d7"
        },
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "setAllocationTime(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProportionalPayoutStrategy",
            "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:163"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Recipient)8515_storage)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:151"
            },
            {
              "label": "hasAllocated",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:153"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ERC721)33656",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "maxRecipientsAllowed",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:155"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:157"
            },
            {
              "label": "totalAllocations",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:159"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:161"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)33656": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)8515_storage)": {
              "label": "mapping(address => struct ProportionalPayoutStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)8515_storage": {
              "label": "struct ProportionalPayoutStrategy.Recipient",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:QVGovernanceERC20Votes": {
        "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:89",
        "version": {
          "withMetadata": "f36451b069e4bd059c487d6ff6397b5a772d5d89b65d57230db112df9f294b51",
          "withoutMetadata": "f36451b069e4bd059c487d6ff6397b5a772d5d89b65d57230db112df9f294b51",
          "linkedWithoutMetadata": "f36451b069e4bd059c487d6ff6397b5a772d5d89b65d57230db112df9f294b51"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVGovernanceERC20Votes",
            "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:102"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17409_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17420_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "govToken",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IVotes)21616",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:96"
            },
            {
              "label": "timestamp",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:98"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IVotes)21616": {
              "label": "contract IVotes",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17420_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17409_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17420_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17409_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:HackathonQVStrategy": {
        "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:110",
        "version": {
          "withMetadata": "252f146081e4e2dad2b8b4c6269311eb947817c9dd02a47b5dbf4c6f749f6d3d",
          "withoutMetadata": "252f146081e4e2dad2b8b4c6269311eb947817c9dd02a47b5dbf4c6f749f6d3d",
          "linkedWithoutMetadata": "252f146081e4e2dad2b8b4c6269311eb947817c9dd02a47b5dbf4c6f749f6d3d"
        },
        "inherit": [
          "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver",
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllowedRecipientIds(address[],uint64,bytes)",
          "setPayoutPercentages(uint256[])",
          "getPayouts(address[],bytes[])",
          "getAttestation(bytes32)",
          "getSchema(bytes32)",
          "isPayable()",
          "isAttestationExpired(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HackathonQVStrategy",
            "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:148"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17409_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17420_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "_eas",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IEAS)20307",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            },
            {
              "label": "payoutPercentages",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:130"
            },
            {
              "label": "votesByRank",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:131"
            },
            {
              "label": "easInfo",
              "offset": 0,
              "slot": "14",
              "type": "t_struct(EASInfo)9414_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "19",
              "type": "t_contract(ERC721)33656",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:133"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:133"
            },
            {
              "label": "recipientIdToUID",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:135"
            },
            {
              "label": "recipientIdToIndex",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:136"
            },
            {
              "label": "indexToRecipientId",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:143"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ERC721)33656": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IEAS)20307": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(ISchemaRegistry)20352": {
              "label": "contract ISchemaRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17420_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17409_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17420_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(EASInfo)9414_storage": {
              "label": "struct HackathonQVStrategy.EASInfo",
              "members": [
                {
                  "label": "eas",
                  "type": "t_contract(IEAS)20307",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "schemaRegistry",
                  "type": "t_contract(ISchemaRegistry)20352",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "schemaUID",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "schema",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "revocable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17409_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver": {
        "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:19",
        "inherit": [
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver"
        ],
        "libraries": [],
        "methods": [
          "isPayable()",
          "()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_eas",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IEAS)20307",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            }
          ],
          "types": {
            "t_contract(IEAS)20307": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:QVImpactStreamStrategy": {
        "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:89",
        "version": {
          "withMetadata": "79d14616d0a80a0439e43aed9c875186e739144578181eb93dc758d6e140deb1",
          "withoutMetadata": "79d14616d0a80a0439e43aed9c875186e739144578181eb93dc758d6e140deb1",
          "linkedWithoutMetadata": "79d14616d0a80a0439e43aed9c875186e739144578181eb93dc758d6e140deb1"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "updatePoolTimestamps(uint64,uint64)",
          "batchAddAllocator(address[])",
          "addAllocator(address)",
          "batchRemoveAllocator(address[])",
          "removeAllocator(address)",
          "setPayouts(struct QVImpactStreamStrategy.Payout[])",
          "getRecipient(address)",
          "getVoiceCreditsCastByAllocator(address)",
          "getVoiceCreditsCastByAllocatorToRecipient(address,address)",
          "getVotesCastByAllocatorToRecipient(address,address)",
          "recoverFunds(address,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVImpactStreamStrategy",
            "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:218"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "3",
              "type": "t_uint64",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:157"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "3",
              "type": "t_uint64",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:158"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:161"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:163"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:165"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)10859_storage)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:168"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)10870_storage)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:173"
            },
            {
              "label": "payouts",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:178"
            },
            {
              "label": "payoutSet",
              "offset": 0,
              "slot": "10",
              "type": "t_bool",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:179"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)10870_storage)": {
              "label": "mapping(address => struct QVImpactStreamStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)10859_storage)": {
              "label": "mapping(address => struct QVImpactStreamStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)10870_storage": {
              "label": "struct QVImpactStreamStrategy.Allocator",
              "members": [
                {
                  "label": "usedVoiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)10859_storage": {
              "label": "struct QVImpactStreamStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "requestedAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:QVNftTieredStrategy": {
        "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:94",
        "version": {
          "withMetadata": "60a108b080a94a06c8cacde6e3cfc9c16146cf5b784797eeb02f5c45ab339ca5",
          "withoutMetadata": "60a108b080a94a06c8cacde6e3cfc9c16146cf5b784797eeb02f5c45ab339ca5",
          "linkedWithoutMetadata": "60a108b080a94a06c8cacde6e3cfc9c16146cf5b784797eeb02f5c45ab339ca5"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVNftTieredStrategy",
            "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17409_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17420_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "nfts",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_contract(ERC721)33656)dyn_storage",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:111"
            },
            {
              "label": "maxVoiceCreditsPerNft",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_contract(ERC721)33656,t_uint256)",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:113"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_contract(ERC721)33656,t_mapping(t_uint256,t_uint256))",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:115"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(ERC721)33656)dyn_storage": {
              "label": "contract ERC721[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)33656": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17420_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17409_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)33656,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(contract ERC721 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)33656,t_uint256)": {
              "label": "mapping(contract ERC721 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17420_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17409_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:LockupDynamicStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:16",
        "version": {
          "withMetadata": "7de219320b8433a2eec495a79fd6e7b5ada08387c74cf2a0683986d53a127515",
          "withoutMetadata": "7de219320b8433a2eec495a79fd6e7b5ada08387c74cf2a0683986d53a127515",
          "linkedWithoutMetadata": "7de219320b8433a2eec495a79fd6e7b5ada08387c74cf2a0683986d53a127515"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientSegments(address,struct LockupDynamic.SegmentWithDelta[])",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupDynamicStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:42"
            },
            {
              "label": "lockupDynamic",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupDynamic)32067",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)32187_storage",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)12375_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(SegmentWithDelta)32271_storage)dyn_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupDynamic)32067": {
              "label": "contract ISablierV2LockupDynamic",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12375_storage)": {
              "label": "mapping(address => struct LockupDynamicStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)32187_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)31428",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12375_storage": {
              "label": "struct LockupDynamicStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "segments",
                  "type": "t_array(t_struct(SegmentWithDelta)32271_storage)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(SegmentWithDelta)32271_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exponent",
                  "type": "t_userDefinedValueType(UD2x18)29624",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "delta",
                  "type": "t_uint40",
                  "offset": 24,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD2x18)29624": {
              "label": "UD2x18",
              "numberOfBytes": "8",
              "underlying": "t_uint64"
            },
            "t_userDefinedValueType(UD60x18)31428": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:LockupLinearStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:16",
        "version": {
          "withMetadata": "3a6050d4ac947b561d6661bc8bd7bb3e7c21093dc2a4e9b385e3c452f5022831",
          "withoutMetadata": "3a6050d4ac947b561d6661bc8bd7bb3e7c21093dc2a4e9b385e3c452f5022831",
          "linkedWithoutMetadata": "3a6050d4ac947b561d6661bc8bd7bb3e7c21093dc2a4e9b385e3c452f5022831"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientDurations(address,(uint40,uint40))",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupLinearStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:42"
            },
            {
              "label": "lockupLinear",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupLinear)32156",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)32187_storage",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)13557_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupLinear)32156": {
              "label": "contract ISablierV2LockupLinear",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)13557_storage)": {
              "label": "mapping(address => struct LockupLinearStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)32187_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)31428",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Durations)32339_storage": {
              "label": "struct LockupLinear.Durations",
              "members": [
                {
                  "label": "cliff",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "total",
                  "type": "t_uint40",
                  "offset": 5,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)13557_storage": {
              "label": "struct LockupLinearStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durations",
                  "type": "t_struct(Durations)32339_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD60x18)31428": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:NFT": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:8",
        "version": {
          "withMetadata": "6fbf28f85fbb1d5a7eae80d89a44e8e1ce4cee11f863e98aa433ef850c226ad0",
          "withoutMetadata": "6fbf28f85fbb1d5a7eae80d89a44e8e1ce4cee11f863e98aa433ef850c226ad0",
          "linkedWithoutMetadata": "6fbf28f85fbb1d5a7eae80d89a44e8e1ce4cee11f863e98aa433ef850c226ad0"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable",
          "solady/src/tokens/ERC721.sol:ERC721"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)",
          "name()",
          "symbol()",
          "mintTo(address)",
          "tokenURI(uint256)",
          "withdrawPayments(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFT",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTokenId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:16"
            },
            {
              "label": "MINT_PRICE",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:17"
            },
            {
              "label": "__name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:20"
            },
            {
              "label": "__symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:NFTFactory": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:6",
        "version": {
          "withMetadata": "a7c23efa47d9c3f26855dc4e3e684fc1d1ded82f98f087c6531b14cefff5f4ac",
          "withoutMetadata": "a7c23efa47d9c3f26855dc4e3e684fc1d1ded82f98f087c6531b14cefff5f4ac",
          "linkedWithoutMetadata": "a7c23efa47d9c3f26855dc4e3e684fc1d1ded82f98f087c6531b14cefff5f4ac"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createNFTContract(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isNFTContract",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NFTFactory",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:WrappedVotingNftMintStrategy": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:101",
        "version": {
          "withMetadata": "bb3d415f8b62299063cbcedde2dfbe80202a2735b66237397f865911950e20e6",
          "withoutMetadata": "bb3d415f8b62299063cbcedde2dfbe80202a2735b66237397f865911950e20e6",
          "linkedWithoutMetadata": "bb3d415f8b62299063cbcedde2dfbe80202a2735b66237397f865911950e20e6"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllocationTimes(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrappedVotingNftMintStrategy",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:147"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "nftFactory",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(NFTFactory)14776",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationStartTime",
              "offset": 20,
              "slot": "4",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "currentWinner",
              "offset": 8,
              "slot": "5",
              "type": "t_address",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:137"
            },
            {
              "label": "allocations",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:138"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(NFTFactory)14776": {
              "label": "contract NFTFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:99",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(struct DonationVotingMerkleDistributionBaseStrategy.ApplicationStatus[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "updateDistribution(bytes32,(uint256,string))",
          "isDistributionSet()",
          "hasBeenDistributed(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionBaseStrategy",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:286"
          },
          {
            "kind": "state-variable-immutable",
            "name": "PERMIT2",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:230"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4527_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)15352_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)15352_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)15352_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:DonationVotingMerkleDistributionDirectTransferStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76",
        "version": {
          "withMetadata": "81830397323d8016c38be14953dda0614eed1209275bf869bd1cbec2bf398a13",
          "withoutMetadata": "81830397323d8016c38be14953dda0614eed1209275bf869bd1cbec2bf398a13",
          "linkedWithoutMetadata": "81830397323d8016c38be14953dda0614eed1209275bf869bd1cbec2bf398a13"
        },
        "inherit": [
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionDirectTransferStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4527_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)15352_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)15352_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)15352_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:DonationVotingMerkleDistributionVaultStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:92",
        "version": {
          "withMetadata": "c99b318fe1d9f12d4c29165365444dc80584021a9f83cfabfe41808828a9b84c",
          "withoutMetadata": "c99b318fe1d9f12d4c29165365444dc80584021a9f83cfabfe41808828a9b84c",
          "linkedWithoutMetadata": "c99b318fe1d9f12d4c29165365444dc80584021a9f83cfabfe41808828a9b84c"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)",
          "claim(struct DonationVotingMerkleDistributionVaultStrategy.Claim[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionVaultStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4527_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)15352_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "16",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "16",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "18",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "67",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)15352_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)15352_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy": {
        "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:89",
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVBaseStrategy",
            "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:258"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17409_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17420_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17420_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17409_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17420_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17409_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-simple/QVSimpleStrategy.sol:QVSimpleStrategy": {
        "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:90",
        "version": {
          "withMetadata": "f031b266ac0ae6fd63f3501522934f0ca0e723fb1255605a6ab0e99b224f2a83",
          "withoutMetadata": "f031b266ac0ae6fd63f3501522934f0ca0e723fb1255605a6ab0e99b224f2a83",
          "linkedWithoutMetadata": "f031b266ac0ae6fd63f3501522934f0ca0e723fb1255605a6ab0e99b224f2a83"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "addAllocator(address)",
          "removeAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVSimpleStrategy",
            "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17409_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17420_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:108"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:111"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17420_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17409_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17420_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17409_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:RFPCommitteeStrategy": {
        "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:84",
        "version": {
          "withMetadata": "e7ebbcaa197ea149526c27a330e6a575b793fc9e264a87312525851f8bfdc6ae",
          "withoutMetadata": "e7ebbcaa197ea149526c27a330e6a575b793fc9e264a87312525851f8bfdc6ae",
          "linkedWithoutMetadata": "e7ebbcaa197ea149526c27a330e6a575b793fc9e264a87312525851f8bfdc6ae"
        },
        "inherit": [
          "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPCommitteeStrategy",
            "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:124"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:173"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:174"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4234",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:184"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:189"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)18929_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)18920_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:192"
            },
            {
              "label": "voteThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:104"
            },
            {
              "label": "votedFor",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:109"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:112"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)18929_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)18920_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)18929_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)18920_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy": {
        "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:105",
        "version": {
          "withMetadata": "f754a9b30a7a79f81f6579db2fe9b1aa3763e456121b03988191e716ec85fbeb",
          "withoutMetadata": "f754a9b30a7a79f81f6579db2fe9b1aa3763e456121b03988191e716ec85fbeb",
          "linkedWithoutMetadata": "f754a9b30a7a79f81f6579db2fe9b1aa3763e456121b03988191e716ec85fbeb"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getPayouts(address[],bytes[])",
          "getMilestone(uint256)",
          "getMilestoneStatus(uint256)",
          "setPoolActive(bool)",
          "setMilestones(struct RFPSimpleStrategy.Milestone[])",
          "submitUpcomingMilestone((uint256,string))",
          "increaseMaxBid(uint256)",
          "rejectMilestone(uint256)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPSimpleStrategy",
            "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:200"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:173"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:174"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4234",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:184"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:189"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)18929_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)18920_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:192"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)18929_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Recipient)18920_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)18929_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)18920_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/IEAS.sol:IEAS": {
        "src": "lib/eas-contracts/contracts/IEAS.sol:82",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSchemaRegistry()",
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))",
          "multiAttest(struct MultiAttestationRequest[])",
          "multiAttestByDelegation(struct MultiDelegatedAttestationRequest[])",
          "revoke((bytes32,(bytes32,uint256)))",
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))",
          "multiRevoke(struct MultiRevocationRequest[])",
          "multiRevokeByDelegation(struct MultiDelegatedRevocationRequest[])",
          "timestamp(bytes32)",
          "multiTimestamp(bytes32[])",
          "revokeOffchain(bytes32)",
          "multiRevokeOffchain(bytes32[])",
          "getAttestation(bytes32)",
          "isAttestationValid(bytes32)",
          "getTimestamp(bytes32)",
          "getRevokeOffchain(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol:ISchemaRegistry": {
        "src": "lib/eas-contracts/contracts/ISchemaRegistry.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "register(string,address,bool)",
          "getSchema(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver": {
        "src": "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:19",
        "version": {
          "withMetadata": "6a586b0a6f065b098bd9fb48347db04294d846de28d92b15bec6fdba85cb97d7",
          "withoutMetadata": "6a586b0a6f065b098bd9fb48347db04294d846de28d92b15bec6fdba85cb97d7",
          "linkedWithoutMetadata": "6a586b0a6f065b098bd9fb48347db04294d846de28d92b15bec6fdba85cb97d7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "9d545ec05cecabb76a13fb594c23817b431ddd4d1494519744ddf6143bd14079",
          "withoutMetadata": "9d545ec05cecabb76a13fb594c23817b431ddd4d1494519744ddf6143bd14079",
          "linkedWithoutMetadata": "9d545ec05cecabb76a13fb594c23817b431ddd4d1494519744ddf6143bd14079"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:50",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)21169_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)21169_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)21169_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "a4994026bd33768babfddff3966b4bab1f544f5c6ed43669312002a7e8650b4a",
          "withoutMetadata": "a4994026bd33768babfddff3966b4bab1f544f5c6ed43669312002a7e8650b4a",
          "linkedWithoutMetadata": "a4994026bd33768babfddff3966b4bab1f544f5c6ed43669312002a7e8650b4a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "77716061f875ca96b88270075c4d73fe023706c35326a24d709116e888a9a5b8",
          "withoutMetadata": "77716061f875ca96b88270075c4d73fe023706c35326a24d709116e888a9a5b8",
          "linkedWithoutMetadata": "77716061f875ca96b88270075c4d73fe023706c35326a24d709116e888a9a5b8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "9e96d5502a11854e13722701d129190aedc026afbdd0b6f014d5543934b8c3a5",
          "withoutMetadata": "9e96d5502a11854e13722701d129190aedc026afbdd0b6f014d5543934b8c3a5",
          "linkedWithoutMetadata": "9e96d5502a11854e13722701d129190aedc026afbdd0b6f014d5543934b8c3a5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "5f6fe87bd6f2b355b237a26316714d483a0370f6e014684dd78d9c5704bd9d2a",
          "withoutMetadata": "5f6fe87bd6f2b355b237a26316714d483a0370f6e014684dd78d9c5704bd9d2a",
          "linkedWithoutMetadata": "5f6fe87bd6f2b355b237a26316714d483a0370f6e014684dd78d9c5704bd9d2a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "313ea810fe0280479fdf6741976506843cbe8669d62e40ee366178cf0ffd2cd4",
          "withoutMetadata": "313ea810fe0280479fdf6741976506843cbe8669d62e40ee366178cf0ffd2cd4",
          "linkedWithoutMetadata": "313ea810fe0280479fdf6741976506843cbe8669d62e40ee366178cf0ffd2cd4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "2ae446e15855d10e822f83c269e59368228b56af82db47665279b5b7f4f6c690",
          "withoutMetadata": "2ae446e15855d10e822f83c269e59368228b56af82db47665279b5b7f4f6c690",
          "linkedWithoutMetadata": "2ae446e15855d10e822f83c269e59368228b56af82db47665279b5b7f4f6c690"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/IEIP712.sol:IEIP712": {
        "src": "lib/permit2/src/interfaces/IEIP712.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/ISignatureTransfer.sol:ISignatureTransfer": {
        "src": "lib/permit2/src/interfaces/ISignatureTransfer.sol:9",
        "inherit": [
          "lib/permit2/src/interfaces/IEIP712.sol:IEIP712"
        ],
        "libraries": [],
        "methods": [
          "nonceBitmap(address,uint256)",
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)",
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)",
          "permitTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes)",
          "permitWitnessTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes32,string,bytes)",
          "invalidateUnorderedNonces(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable": {
        "src": "lib/v2-core/src/interfaces/IAdminable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "transferAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Base.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "comptroller()",
          "protocolRevenues(address)",
          "claimProtocolRevenues(address)",
          "setComptroller(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:ISablierV2Comptroller": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "flashFee()",
          "isFlashAsset(address)",
          "protocolFees(address)",
          "setFlashFee(uint256)",
          "setProtocolFee(address,uint256)",
          "toggleFlashAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:13",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getAsset(uint256)",
          "getDepositedAmount(uint256)",
          "getEndTime(uint256)",
          "getRecipient(uint256)",
          "getRefundedAmount(uint256)",
          "getSender(uint256)",
          "getStartTime(uint256)",
          "getWithdrawnAmount(uint256)",
          "isCancelable(uint256)",
          "isCold(uint256)",
          "isDepleted(uint256)",
          "isStream(uint256)",
          "isWarm(uint256)",
          "nextStreamId()",
          "refundableAmountOf(uint256)",
          "statusOf(uint256)",
          "streamedAmountOf(uint256)",
          "wasCanceled(uint256)",
          "withdrawableAmountOf(uint256)",
          "burn(uint256)",
          "cancel(uint256)",
          "cancelMultiple(uint256[])",
          "renounce(uint256)",
          "setNFTDescriptor(address)",
          "withdraw(uint256,address,uint128)",
          "withdrawMax(uint256,address)",
          "withdrawMaxAndTransfer(uint256,address)",
          "withdrawMultiple(uint256[],address,uint128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:ISablierV2LockupDynamic": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_SEGMENT_COUNT()",
          "getRange(uint256)",
          "getSegments(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDeltas((address,bool,address,uint128,address,(address,uint256),struct LockupDynamic.SegmentWithDelta[]))",
          "createWithMilestones((address,uint40,bool,address,uint128,address,(address,uint256),struct LockupDynamic.Segment[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:ISablierV2LockupLinear": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getCliffTime(uint256)",
          "getRange(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))",
          "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:ISablierV2NFTDescriptor": {
        "src": "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:Lockup": {
        "src": "lib/v2-core/src/types/DataTypes.sol:29",
        "version": {
          "withMetadata": "6e0d3a69a4a69d3a9404a715266ac9c0b7b3ac7b1d364dbc940e94d8e9394501",
          "withoutMetadata": "6e0d3a69a4a69d3a9404a715266ac9c0b7b3ac7b1d364dbc940e94d8e9394501",
          "linkedWithoutMetadata": "6e0d3a69a4a69d3a9404a715266ac9c0b7b3ac7b1d364dbc940e94d8e9394501"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupDynamic": {
        "src": "lib/v2-core/src/types/DataTypes.sol:72",
        "version": {
          "withMetadata": "45b3aa8f232e41f055346c1bbe049e878c05976fc4529e1cf1180419419e7809",
          "withoutMetadata": "45b3aa8f232e41f055346c1bbe049e878c05976fc4529e1cf1180419419e7809",
          "linkedWithoutMetadata": "45b3aa8f232e41f055346c1bbe049e878c05976fc4529e1cf1180419419e7809"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupLinear": {
        "src": "lib/v2-core/src/types/DataTypes.sol:180",
        "version": {
          "withMetadata": "420266b914039036616220be465fab61acbe39973ca3cca0f3781bf93e2a584d",
          "withoutMetadata": "420266b914039036616220be465fab61acbe39973ca3cca0f3781bf93e2a584d",
          "linkedWithoutMetadata": "420266b914039036616220be465fab61acbe39973ca3cca0f3781bf93e2a584d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/auth/Ownable.sol:Ownable": {
        "src": "solady/src/auth/Ownable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "renounceOwnership()",
          "requestOwnershipHandover()",
          "cancelOwnershipHandover()",
          "completeOwnershipHandover(address)",
          "owner()",
          "ownershipHandoverExpiresAt(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC20.sol:ERC20": {
        "src": "solady/src/tokens/ERC20.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC721.sol:ERC721": {
        "src": "solady/src/tokens/ERC721.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "balanceOf(address)",
          "getApproved(uint256)",
          "approve(address,uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/CREATE3.sol:CREATE3": {
        "src": "solady/src/utils/CREATE3.sol:8",
        "version": {
          "withMetadata": "749a72e3049796d3290cdb574c44b0d6473c038295d8b735dcb9a23be934f038",
          "withoutMetadata": "749a72e3049796d3290cdb574c44b0d6473c038295d8b735dcb9a23be934f038",
          "linkedWithoutMetadata": "749a72e3049796d3290cdb574c44b0d6473c038295d8b735dcb9a23be934f038"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/SafeTransferLib.sol:SafeTransferLib": {
        "src": "solady/src/utils/SafeTransferLib.sol:12",
        "version": {
          "withMetadata": "aff7453e4a478c607ef50af7036189cd8529e023c7468772ecccf08eb1750ddb",
          "withoutMetadata": "aff7453e4a478c607ef50af7036189cd8529e023c7468772ecccf08eb1750ddb",
          "linkedWithoutMetadata": "aff7453e4a478c607ef50af7036189cd8529e023c7468772ecccf08eb1750ddb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "44eb2dddcdc03ecfea3c9ac11674f518cc7bb79f2dbcf7d2e5d8b21ffbd3e205",
          "withoutMetadata": "44eb2dddcdc03ecfea3c9ac11674f518cc7bb79f2dbcf7d2e5d8b21ffbd3e205",
          "linkedWithoutMetadata": "44eb2dddcdc03ecfea3c9ac11674f518cc7bb79f2dbcf7d2e5d8b21ffbd3e205"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "b520daab6cd0a3c81c51d0057d95f28c54a7619701eae8a3db09ea6bcdc502c6",
          "withoutMetadata": "b520daab6cd0a3c81c51d0057d95f28c54a7619701eae8a3db09ea6bcdc502c6",
          "linkedWithoutMetadata": "b520daab6cd0a3c81c51d0057d95f28c54a7619701eae8a3db09ea6bcdc502c6"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "9556471f3a08dc61ddd4c376e78af1db3de326e8bbff03476fb7e4b5648e660a",
          "withoutMetadata": "9556471f3a08dc61ddd4c376e78af1db3de326e8bbff03476fb7e4b5648e660a",
          "linkedWithoutMetadata": "9556471f3a08dc61ddd4c376e78af1db3de326e8bbff03476fb7e4b5648e660a"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "c6bfbce0b8dc6dfc4b04c37eba486b8174b839ebdd213026a80ed142556b607f",
          "withoutMetadata": "c6bfbce0b8dc6dfc4b04c37eba486b8174b839ebdd213026a80ed142556b607f",
          "linkedWithoutMetadata": "c6bfbce0b8dc6dfc4b04c37eba486b8174b839ebdd213026a80ed142556b607f"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "21b6cb6926d5847eee8b085c3c8ca4f4f0aedea703afd89a891d869613fa7f0d",
          "withoutMetadata": "21b6cb6926d5847eee8b085c3c8ca4f4f0aedea703afd89a891d869613fa7f0d",
          "linkedWithoutMetadata": "21b6cb6926d5847eee8b085c3c8ca4f4f0aedea703afd89a891d869613fa7f0d"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "d4e223751ca683364cd2a0e429a4d94882e21710dd2b87ecf4dbe200582b9421",
          "withoutMetadata": "d4e223751ca683364cd2a0e429a4d94882e21710dd2b87ecf4dbe200582b9421",
          "linkedWithoutMetadata": "d4e223751ca683364cd2a0e429a4d94882e21710dd2b87ecf4dbe200582b9421"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "f35f6cd65d00915f3ff499a6e684093199e3b2b8e09de53fdc3185f97a4b3ca8",
          "withoutMetadata": "f35f6cd65d00915f3ff499a6e684093199e3b2b8e09de53fdc3185f97a4b3ca8",
          "linkedWithoutMetadata": "f35f6cd65d00915f3ff499a6e684093199e3b2b8e09de53fdc3185f97a4b3ca8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Allo.sol:Allo": {
        "src": "contracts/core/Allo.sol:89",
        "version": {
          "withMetadata": "cfe58ca006a00e209aaf5895066c4eaff3cce5dd21a95d5a165e23a1010674bb",
          "withoutMetadata": "cfe58ca006a00e209aaf5895066c4eaff3cce5dd21a95d5a165e23a1010674bb",
          "linkedWithoutMetadata": "cfe58ca006a00e209aaf5895066c4eaff3cce5dd21a95d5a165e23a1010674bb"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "solady/src/auth/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IAllo.sol:IAllo"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "getFeeDenominator()",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "isCloneableStrategy(address)",
          "getPool(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)21169_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "percentFee",
              "offset": 0,
              "slot": "52",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:114"
            },
            {
              "label": "baseFee",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:129"
            },
            {
              "label": "_poolIndex",
              "offset": 0,
              "slot": "54",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "55",
              "type": "t_address_payable",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "56",
              "type": "t_contract(IRegistry)4234",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:133"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "57",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:134"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "58",
              "type": "t_mapping(t_uint256,t_struct(Pool)3753_storage)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:135"
            },
            {
              "label": "cloneableStrategies",
              "offset": 0,
              "slot": "59",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)4401": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)21169_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)3753_storage)": {
              "label": "mapping(uint256 => struct IAllo.Pool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Pool)3753_storage": {
              "label": "struct IAllo.Pool",
              "members": [
                {
                  "label": "profileId",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "strategy",
                  "type": "t_contract(IStrategy)4401",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "managerRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)21169_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Anchor.sol:Anchor": {
        "src": "contracts/core/Anchor.sol:89",
        "version": {
          "withMetadata": "460c62ed7af543898e3e60374e24fc5bebc5aa0c29d83dbebc4bfd073955d7f3",
          "withoutMetadata": "460c62ed7af543898e3e60374e24fc5bebc5aa0c29d83dbebc4bfd073955d7f3",
          "linkedWithoutMetadata": "460c62ed7af543898e3e60374e24fc5bebc5aa0c29d83dbebc4bfd073955d7f3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "execute(address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Anchor",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "profileId",
            "src": "contracts/core/Anchor.sol:89"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Registry.sol:Registry": {
        "src": "contracts/core/Registry.sol:103",
        "version": {
          "withMetadata": "7d2c1ceaab539cbb3333fde09807186fa9ab361b51dc5c98834fdd019d06ecec",
          "withoutMetadata": "7d2c1ceaab539cbb3333fde09807186fa9ab361b51dc5c98834fdd019d06ecec",
          "linkedWithoutMetadata": "7d2c1ceaab539cbb3333fde09807186fa9ab361b51dc5c98834fdd019d06ecec"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "contracts/core/libraries/Native.sol:Native",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "contracts/core/interfaces/IRegistry.sol:IRegistry"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)21169_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "anchorToProfileId",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:109"
            },
            {
              "label": "profilesById",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_struct(Profile)4061_storage)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:111"
            },
            {
              "label": "profileIdToPendingOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:113"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Profile)4061_storage)": {
              "label": "mapping(bytes32 => struct IRegistry.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)21169_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Profile)4061_storage": {
              "label": "struct IRegistry.Profile",
              "members": [
                {
                  "label": "id",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "anchor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)21169_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IAllo.sol:IAllo": {
        "src": "contracts/core/interfaces/IAllo.sol:97",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "isCloneableStrategy(address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "getPool(uint256)",
          "getFeeDenominator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IRegistry.sol:IRegistry": {
        "src": "contracts/core/interfaces/IRegistry.sol:92",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/core/interfaces/IStrategy.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "isValidAllocator(address)",
          "isPoolActive()",
          "getPoolAmount()",
          "increasePoolAmount(uint256)",
          "getRecipientStatus(address)",
          "getPayouts(address[],bytes[])",
          "initialize(uint256,bytes)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Clone.sol:Clone": {
        "src": "contracts/core/libraries/Clone.sol:37",
        "version": {
          "withMetadata": "5d75f64dd032e99bb6ff4bfa8c21cd17074ad4dfd7555040b9c4afaa515b3977",
          "withoutMetadata": "5d75f64dd032e99bb6ff4bfa8c21cd17074ad4dfd7555040b9c4afaa515b3977",
          "linkedWithoutMetadata": "5d75f64dd032e99bb6ff4bfa8c21cd17074ad4dfd7555040b9c4afaa515b3977"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Errors.sol:Errors": {
        "src": "contracts/core/libraries/Errors.sol:109",
        "version": {
          "withMetadata": "0ad60f46cdebaf4f77c1d8f9fd3228dd1ad9eca768ed5b0408474216aef22ece",
          "withoutMetadata": "0ad60f46cdebaf4f77c1d8f9fd3228dd1ad9eca768ed5b0408474216aef22ece",
          "linkedWithoutMetadata": "0ad60f46cdebaf4f77c1d8f9fd3228dd1ad9eca768ed5b0408474216aef22ece"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Native.sol:Native": {
        "src": "contracts/core/libraries/Native.sol:26",
        "version": {
          "withMetadata": "b1f668347bdf1576c094a22fea66b6558362d84fecfe8d48ebeb1aeadae9f124",
          "withoutMetadata": "b1f668347bdf1576c094a22fea66b6558362d84fecfe8d48ebeb1aeadae9f124",
          "linkedWithoutMetadata": "b1f668347bdf1576c094a22fea66b6558362d84fecfe8d48ebeb1aeadae9f124"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Transfer.sol:Transfer": {
        "src": "contracts/core/libraries/Transfer.sol:95",
        "version": {
          "withMetadata": "e7aaded41b3541674f947759c462c72971e680e89d1f13e29d54176fbd9d18f9",
          "withoutMetadata": "e7aaded41b3541674f947759c462c72971e680e89d1f13e29d54176fbd9d18f9",
          "linkedWithoutMetadata": "e7aaded41b3541674f947759c462c72971e680e89d1f13e29d54176fbd9d18f9"
        },
        "inherit": [
          "contracts/core/libraries/Native.sol:Native"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/factory/ContractFactory.sol:ContractFactory": {
        "src": "contracts/factory/ContractFactory.sol:107",
        "version": {
          "withMetadata": "f81d2d7d533cfa5e0108ae3d1a6df3f69da90406a7ab128443c2b01d4090b99a",
          "withoutMetadata": "f81d2d7d533cfa5e0108ae3d1a6df3f69da90406a7ab128443c2b01d4090b99a",
          "linkedWithoutMetadata": "f81d2d7d533cfa5e0108ae3d1a6df3f69da90406a7ab128443c2b01d4090b99a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "deploy(string,string,bytes)",
          "setDeployer(address,bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ContractFactory",
            "src": "contracts/factory/ContractFactory.sol:119"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "usedSalts",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            },
            {
              "label": "isDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/BaseStrategy.sol:BaseStrategy": {
        "src": "contracts/strategies/BaseStrategy.sol:111",
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "getPoolAmount()",
          "isPoolActive()",
          "getRecipientStatus(address)",
          "increasePoolAmount(uint256)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)",
          "getPayouts(address[],bytes[])",
          "isValidAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseStrategy",
            "src": "contracts/strategies/BaseStrategy.sol:129"
          },
          {
            "kind": "state-variable-immutable",
            "name": "allo",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          },
          {
            "kind": "state-variable-immutable",
            "name": "strategyId",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:DirectGrantsSimpleStrategy": {
        "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:110",
        "version": {
          "withMetadata": "926a4f0ae90070b322ef2c9274f20511d69b67afbe36bdb509afb39e9c829133",
          "withoutMetadata": "926a4f0ae90070b322ef2c9274f20511d69b67afbe36bdb509afb39e9c829133",
          "linkedWithoutMetadata": "926a4f0ae90070b322ef2c9274f20511d69b67afbe36bdb509afb39e9c829133"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getMilestoneStatus(address,uint256)",
          "getMilestones(address)",
          "setMilestones(address,struct DirectGrantsSimpleStrategy.Milestone[])",
          "reviewSetMilestones(address,uint8)",
          "submitMilestone(address,uint256,(uint256,string))",
          "rejectMilestone(address,uint256)",
          "setRecipientStatusToInReview(address[])",
          "setPoolActive(bool)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DirectGrantsSimpleStrategy",
            "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:192"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:161"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:163"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:164"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:167"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:168"
            },
            {
              "label": "_acceptedRecipientIds",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:172"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)5489_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:177"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Milestone)5498_storage)dyn_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:179"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:184"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)5498_storage)dyn_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(Milestone)5498_storage)dyn_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Milestone[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5489_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)5498_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)5489_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "milestonesReviewStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:DonationVotingCustomRegistryStrategy": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52",
        "version": {
          "withMetadata": "a5c8d1a72d691d2634f31222ade292c8577eee42c89184eb1266422169a845da",
          "withoutMetadata": "a5c8d1a72d691d2634f31222ade292c8577eee42c89184eb1266422169a845da",
          "linkedWithoutMetadata": "a5c8d1a72d691d2634f31222ade292c8577eee42c89184eb1266422169a845da"
        },
        "inherit": [
          "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingCustomRegistryStrategy",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:162"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7103_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:165"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:167"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:172"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(SimpleProjectRegistry)7074",
              "contract": "DonationVotingCustomRegistryStrategy",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(SimpleProjectRegistry)7074": {
              "label": "contract SimpleProjectRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7103_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4252_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7103_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:SimpleProjectRegistry": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:26",
        "version": {
          "withMetadata": "e1bb0b949f0f27ceea40102b24407ef80d182d0942f875447f1c2274abe7c3bb",
          "withoutMetadata": "e1bb0b949f0f27ceea40102b24407ef80d182d0942f875447f1c2274abe7c3bb",
          "linkedWithoutMetadata": "e1bb0b949f0f27ceea40102b24407ef80d182d0942f875447f1c2274abe7c3bb"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addProject(address)",
          "addProjects(address[])",
          "removeProject(address)",
          "removeProjects(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleProjectRegistry",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "projects",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleProjectRegistry",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy": {
        "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:100",
        "version": {
          "withMetadata": "67145c67035cf2dda8e47170b6ea8aca6e8a8ff1b2ec9681fa3b36cf3d5404fd",
          "withoutMetadata": "67145c67035cf2dda8e47170b6ea8aca6e8a8ff1b2ec9681fa3b36cf3d5404fd",
          "linkedWithoutMetadata": "67145c67035cf2dda8e47170b6ea8aca6e8a8ff1b2ec9681fa3b36cf3d5404fd"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "setPayout(address[],uint256[])",
          "claim(struct DonationVotingStrategy.Claim[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingStrategy",
            "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:198"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:162"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7103_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:165"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:167"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:172"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7103_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4252_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7103_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:ProportionalPayoutStrategy": {
        "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:113",
        "version": {
          "withMetadata": "9138a4a3c1e17ecd56eb9169a5a376cd843cb6f1d5739702c7a2977b1e6d5f36",
          "withoutMetadata": "9138a4a3c1e17ecd56eb9169a5a376cd843cb6f1d5739702c7a2977b1e6d5f36",
          "linkedWithoutMetadata": "9138a4a3c1e17ecd56eb9169a5a376cd843cb6f1d5739702c7a2977b1e6d5f36"
        },
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "setAllocationTime(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProportionalPayoutStrategy",
            "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:163"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Recipient)8515_storage)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:151"
            },
            {
              "label": "hasAllocated",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:153"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ERC721)33656",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "maxRecipientsAllowed",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:155"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:157"
            },
            {
              "label": "totalAllocations",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:159"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:161"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)33656": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)8515_storage)": {
              "label": "mapping(address => struct ProportionalPayoutStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)8515_storage": {
              "label": "struct ProportionalPayoutStrategy.Recipient",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:QVGovernanceERC20Votes": {
        "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:89",
        "version": {
          "withMetadata": "db79eaaa01a9ff1e2f44141950ddf672ddf9d9ff66e8ce50e4ba95bb6c6b1afb",
          "withoutMetadata": "db79eaaa01a9ff1e2f44141950ddf672ddf9d9ff66e8ce50e4ba95bb6c6b1afb",
          "linkedWithoutMetadata": "db79eaaa01a9ff1e2f44141950ddf672ddf9d9ff66e8ce50e4ba95bb6c6b1afb"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVGovernanceERC20Votes",
            "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:102"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17409_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17420_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "govToken",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IVotes)21616",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:96"
            },
            {
              "label": "timestamp",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:98"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IVotes)21616": {
              "label": "contract IVotes",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17420_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17409_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17420_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17409_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:HackathonQVStrategy": {
        "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:110",
        "version": {
          "withMetadata": "c0b7c7e68aa7b8d337478b299a300fb3c2fd0833275289bee3085c78892c8d1e",
          "withoutMetadata": "c0b7c7e68aa7b8d337478b299a300fb3c2fd0833275289bee3085c78892c8d1e",
          "linkedWithoutMetadata": "c0b7c7e68aa7b8d337478b299a300fb3c2fd0833275289bee3085c78892c8d1e"
        },
        "inherit": [
          "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver",
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllowedRecipientIds(address[],uint64,bytes)",
          "setPayoutPercentages(uint256[])",
          "getPayouts(address[],bytes[])",
          "getAttestation(bytes32)",
          "getSchema(bytes32)",
          "isPayable()",
          "isAttestationExpired(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HackathonQVStrategy",
            "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:148"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17409_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17420_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "_eas",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IEAS)20307",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            },
            {
              "label": "payoutPercentages",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:130"
            },
            {
              "label": "votesByRank",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:131"
            },
            {
              "label": "easInfo",
              "offset": 0,
              "slot": "14",
              "type": "t_struct(EASInfo)9414_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "19",
              "type": "t_contract(ERC721)33656",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:133"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:133"
            },
            {
              "label": "recipientIdToUID",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:135"
            },
            {
              "label": "recipientIdToIndex",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:136"
            },
            {
              "label": "indexToRecipientId",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:143"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ERC721)33656": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IEAS)20307": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(ISchemaRegistry)20352": {
              "label": "contract ISchemaRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17420_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17409_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17420_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(EASInfo)9414_storage": {
              "label": "struct HackathonQVStrategy.EASInfo",
              "members": [
                {
                  "label": "eas",
                  "type": "t_contract(IEAS)20307",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "schemaRegistry",
                  "type": "t_contract(ISchemaRegistry)20352",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "schemaUID",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "schema",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "revocable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17409_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver": {
        "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:19",
        "inherit": [
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver"
        ],
        "libraries": [],
        "methods": [
          "isPayable()",
          "()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_eas",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IEAS)20307",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            }
          ],
          "types": {
            "t_contract(IEAS)20307": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:QVImpactStreamStrategy": {
        "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:89",
        "version": {
          "withMetadata": "6850612470246a8fa92865e4812fd4f25d386af285f5534f0cdb91f9df861670",
          "withoutMetadata": "6850612470246a8fa92865e4812fd4f25d386af285f5534f0cdb91f9df861670",
          "linkedWithoutMetadata": "6850612470246a8fa92865e4812fd4f25d386af285f5534f0cdb91f9df861670"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "updatePoolTimestamps(uint64,uint64)",
          "batchAddAllocator(address[])",
          "addAllocator(address)",
          "batchRemoveAllocator(address[])",
          "removeAllocator(address)",
          "setPayouts(struct QVImpactStreamStrategy.Payout[])",
          "getRecipient(address)",
          "getVoiceCreditsCastByAllocator(address)",
          "getVoiceCreditsCastByAllocatorToRecipient(address,address)",
          "getVotesCastByAllocatorToRecipient(address,address)",
          "recoverFunds(address,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVImpactStreamStrategy",
            "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:218"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "3",
              "type": "t_uint64",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:157"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "3",
              "type": "t_uint64",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:158"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:161"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:163"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:165"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)10859_storage)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:168"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)10870_storage)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:173"
            },
            {
              "label": "payouts",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:178"
            },
            {
              "label": "payoutSet",
              "offset": 0,
              "slot": "10",
              "type": "t_bool",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:179"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)10870_storage)": {
              "label": "mapping(address => struct QVImpactStreamStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)10859_storage)": {
              "label": "mapping(address => struct QVImpactStreamStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)10870_storage": {
              "label": "struct QVImpactStreamStrategy.Allocator",
              "members": [
                {
                  "label": "usedVoiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)10859_storage": {
              "label": "struct QVImpactStreamStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "requestedAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:QVNftTieredStrategy": {
        "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:94",
        "version": {
          "withMetadata": "281c4ebcb60743f061f5f819d67087c39bc7b8d8031126952a7937a35ee35e71",
          "withoutMetadata": "281c4ebcb60743f061f5f819d67087c39bc7b8d8031126952a7937a35ee35e71",
          "linkedWithoutMetadata": "281c4ebcb60743f061f5f819d67087c39bc7b8d8031126952a7937a35ee35e71"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVNftTieredStrategy",
            "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17409_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17420_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "nfts",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_contract(ERC721)33656)dyn_storage",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:111"
            },
            {
              "label": "maxVoiceCreditsPerNft",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_contract(ERC721)33656,t_uint256)",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:113"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_contract(ERC721)33656,t_mapping(t_uint256,t_uint256))",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:115"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(ERC721)33656)dyn_storage": {
              "label": "contract ERC721[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)33656": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17420_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17409_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)33656,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(contract ERC721 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)33656,t_uint256)": {
              "label": "mapping(contract ERC721 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17420_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17409_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:LockupDynamicStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:16",
        "version": {
          "withMetadata": "96091ed68e1000dd482416432be23b43c273dfa55f52aeed4f063a97e0bc9ce2",
          "withoutMetadata": "96091ed68e1000dd482416432be23b43c273dfa55f52aeed4f063a97e0bc9ce2",
          "linkedWithoutMetadata": "96091ed68e1000dd482416432be23b43c273dfa55f52aeed4f063a97e0bc9ce2"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientSegments(address,struct LockupDynamic.SegmentWithDelta[])",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupDynamicStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:42"
            },
            {
              "label": "lockupDynamic",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupDynamic)32067",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)32187_storage",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)12375_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(SegmentWithDelta)32271_storage)dyn_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupDynamic)32067": {
              "label": "contract ISablierV2LockupDynamic",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12375_storage)": {
              "label": "mapping(address => struct LockupDynamicStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)32187_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)31428",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12375_storage": {
              "label": "struct LockupDynamicStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "segments",
                  "type": "t_array(t_struct(SegmentWithDelta)32271_storage)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(SegmentWithDelta)32271_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exponent",
                  "type": "t_userDefinedValueType(UD2x18)29624",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "delta",
                  "type": "t_uint40",
                  "offset": 24,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD2x18)29624": {
              "label": "UD2x18",
              "numberOfBytes": "8",
              "underlying": "t_uint64"
            },
            "t_userDefinedValueType(UD60x18)31428": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:LockupLinearStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:16",
        "version": {
          "withMetadata": "bd05c4b9750ca4df97d6d0a5d8e22fc2c804220062515fbac610715d858a6674",
          "withoutMetadata": "bd05c4b9750ca4df97d6d0a5d8e22fc2c804220062515fbac610715d858a6674",
          "linkedWithoutMetadata": "bd05c4b9750ca4df97d6d0a5d8e22fc2c804220062515fbac610715d858a6674"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientDurations(address,(uint40,uint40))",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupLinearStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:42"
            },
            {
              "label": "lockupLinear",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupLinear)32156",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)32187_storage",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)13557_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupLinear)32156": {
              "label": "contract ISablierV2LockupLinear",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)13557_storage)": {
              "label": "mapping(address => struct LockupLinearStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)32187_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)31428",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Durations)32339_storage": {
              "label": "struct LockupLinear.Durations",
              "members": [
                {
                  "label": "cliff",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "total",
                  "type": "t_uint40",
                  "offset": 5,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)13557_storage": {
              "label": "struct LockupLinearStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durations",
                  "type": "t_struct(Durations)32339_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD60x18)31428": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:NFT": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:8",
        "version": {
          "withMetadata": "d97f8ddb67a2dc707067cec85a4a4506ce4ca7483458ae582ca11a2883011c2f",
          "withoutMetadata": "d97f8ddb67a2dc707067cec85a4a4506ce4ca7483458ae582ca11a2883011c2f",
          "linkedWithoutMetadata": "d97f8ddb67a2dc707067cec85a4a4506ce4ca7483458ae582ca11a2883011c2f"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable",
          "solady/src/tokens/ERC721.sol:ERC721"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)",
          "name()",
          "symbol()",
          "mintTo(address)",
          "tokenURI(uint256)",
          "withdrawPayments(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFT",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTokenId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:16"
            },
            {
              "label": "MINT_PRICE",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:17"
            },
            {
              "label": "__name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:20"
            },
            {
              "label": "__symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:NFTFactory": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:6",
        "version": {
          "withMetadata": "cc01a1c3c044ad1f8da03a9e8a896cd4ee475b4cd75a6dab6be5f5f450ab210a",
          "withoutMetadata": "cc01a1c3c044ad1f8da03a9e8a896cd4ee475b4cd75a6dab6be5f5f450ab210a",
          "linkedWithoutMetadata": "cc01a1c3c044ad1f8da03a9e8a896cd4ee475b4cd75a6dab6be5f5f450ab210a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createNFTContract(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isNFTContract",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NFTFactory",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:WrappedVotingNftMintStrategy": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:101",
        "version": {
          "withMetadata": "d9958fee832d1562063007f34deb610b1b7d9599d19ab8d3064738f343eb16c6",
          "withoutMetadata": "d9958fee832d1562063007f34deb610b1b7d9599d19ab8d3064738f343eb16c6",
          "linkedWithoutMetadata": "d9958fee832d1562063007f34deb610b1b7d9599d19ab8d3064738f343eb16c6"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllocationTimes(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrappedVotingNftMintStrategy",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:147"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "nftFactory",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(NFTFactory)14776",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationStartTime",
              "offset": 20,
              "slot": "4",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "currentWinner",
              "offset": 8,
              "slot": "5",
              "type": "t_address",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:137"
            },
            {
              "label": "allocations",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:138"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(NFTFactory)14776": {
              "label": "contract NFTFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:99",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(struct DonationVotingMerkleDistributionBaseStrategy.ApplicationStatus[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "updateDistribution(bytes32,(uint256,string))",
          "isDistributionSet()",
          "hasBeenDistributed(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionBaseStrategy",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:286"
          },
          {
            "kind": "state-variable-immutable",
            "name": "PERMIT2",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:230"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4527_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)15352_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)15352_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)15352_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:DonationVotingMerkleDistributionDirectTransferStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76",
        "version": {
          "withMetadata": "6027da41fab15bd27ed4d02c30b292202fd905d4ca9ebd474c15b3d6af6a8711",
          "withoutMetadata": "6027da41fab15bd27ed4d02c30b292202fd905d4ca9ebd474c15b3d6af6a8711",
          "linkedWithoutMetadata": "6027da41fab15bd27ed4d02c30b292202fd905d4ca9ebd474c15b3d6af6a8711"
        },
        "inherit": [
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionDirectTransferStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4527_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)15352_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)15352_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)15352_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:DonationVotingMerkleDistributionVaultStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:92",
        "version": {
          "withMetadata": "4197f4a645de358427cb209ead6e2da1773cd596857f0ea6c7418104f9cac1ca",
          "withoutMetadata": "4197f4a645de358427cb209ead6e2da1773cd596857f0ea6c7418104f9cac1ca",
          "linkedWithoutMetadata": "4197f4a645de358427cb209ead6e2da1773cd596857f0ea6c7418104f9cac1ca"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)",
          "claim(struct DonationVotingMerkleDistributionVaultStrategy.Claim[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionVaultStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4527_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)15352_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "16",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "16",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "18",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "67",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)15352_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)15352_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy": {
        "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:89",
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVBaseStrategy",
            "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:258"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17409_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17420_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17420_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17409_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17420_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17409_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-simple/QVSimpleStrategy.sol:QVSimpleStrategy": {
        "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:90",
        "version": {
          "withMetadata": "e3771c2945de3c3656cbc341a878c5eb6d556570c3926b1a6cc259a48bdf1b51",
          "withoutMetadata": "e3771c2945de3c3656cbc341a878c5eb6d556570c3926b1a6cc259a48bdf1b51",
          "linkedWithoutMetadata": "e3771c2945de3c3656cbc341a878c5eb6d556570c3926b1a6cc259a48bdf1b51"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "addAllocator(address)",
          "removeAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVSimpleStrategy",
            "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17409_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17420_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:108"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:111"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17420_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17409_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17420_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17409_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:RFPCommitteeStrategy": {
        "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:84",
        "version": {
          "withMetadata": "e4ed5722891ed357ae01a1e995b8aa2233166746a74e6d3aab219aeafde34192",
          "withoutMetadata": "e4ed5722891ed357ae01a1e995b8aa2233166746a74e6d3aab219aeafde34192",
          "linkedWithoutMetadata": "e4ed5722891ed357ae01a1e995b8aa2233166746a74e6d3aab219aeafde34192"
        },
        "inherit": [
          "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPCommitteeStrategy",
            "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:124"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:173"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:174"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4234",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:184"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:189"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)18929_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)18920_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:192"
            },
            {
              "label": "voteThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:104"
            },
            {
              "label": "votedFor",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:109"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:112"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)18929_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)18920_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)18929_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)18920_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy": {
        "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:105",
        "version": {
          "withMetadata": "2e19f0ad239c96a0b8c32b8c018769ffe0fc1845dd06b2d0c2012503a9d531a6",
          "withoutMetadata": "2e19f0ad239c96a0b8c32b8c018769ffe0fc1845dd06b2d0c2012503a9d531a6",
          "linkedWithoutMetadata": "2e19f0ad239c96a0b8c32b8c018769ffe0fc1845dd06b2d0c2012503a9d531a6"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getPayouts(address[],bytes[])",
          "getMilestone(uint256)",
          "getMilestoneStatus(uint256)",
          "setPoolActive(bool)",
          "setMilestones(struct RFPSimpleStrategy.Milestone[])",
          "submitUpcomingMilestone((uint256,string))",
          "increaseMaxBid(uint256)",
          "rejectMilestone(uint256)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPSimpleStrategy",
            "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:200"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:173"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:174"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4234",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:184"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:189"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)18929_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)18920_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:192"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)18929_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Recipient)18920_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4527_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)18929_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4527_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)18920_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/IEAS.sol:IEAS": {
        "src": "lib/eas-contracts/contracts/IEAS.sol:82",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSchemaRegistry()",
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))",
          "multiAttest(struct MultiAttestationRequest[])",
          "multiAttestByDelegation(struct MultiDelegatedAttestationRequest[])",
          "revoke((bytes32,(bytes32,uint256)))",
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))",
          "multiRevoke(struct MultiRevocationRequest[])",
          "multiRevokeByDelegation(struct MultiDelegatedRevocationRequest[])",
          "timestamp(bytes32)",
          "multiTimestamp(bytes32[])",
          "revokeOffchain(bytes32)",
          "multiRevokeOffchain(bytes32[])",
          "getAttestation(bytes32)",
          "isAttestationValid(bytes32)",
          "getTimestamp(bytes32)",
          "getRevokeOffchain(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol:ISchemaRegistry": {
        "src": "lib/eas-contracts/contracts/ISchemaRegistry.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "register(string,address,bool)",
          "getSchema(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver": {
        "src": "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:19",
        "version": {
          "withMetadata": "6c1536dbefa345209d9f0c4c489eaa752d4fc7b6624461086b65424cce24379f",
          "withoutMetadata": "6c1536dbefa345209d9f0c4c489eaa752d4fc7b6624461086b65424cce24379f",
          "linkedWithoutMetadata": "6c1536dbefa345209d9f0c4c489eaa752d4fc7b6624461086b65424cce24379f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5050434e9fa1333e25a76678f78faebd5ba713a394898dcf3f7e8427562aea42",
          "withoutMetadata": "5050434e9fa1333e25a76678f78faebd5ba713a394898dcf3f7e8427562aea42",
          "linkedWithoutMetadata": "5050434e9fa1333e25a76678f78faebd5ba713a394898dcf3f7e8427562aea42"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:50",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)21169_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)21169_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)21169_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "587ff892ed698ddfeb52e785854947256dc2125f4ba0a1f09a6392e930a948bc",
          "withoutMetadata": "587ff892ed698ddfeb52e785854947256dc2125f4ba0a1f09a6392e930a948bc",
          "linkedWithoutMetadata": "587ff892ed698ddfeb52e785854947256dc2125f4ba0a1f09a6392e930a948bc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "83e316b0881ba22dfe1120e5879a1a00d4af39b2f5427ad6660150df7705c7af",
          "withoutMetadata": "83e316b0881ba22dfe1120e5879a1a00d4af39b2f5427ad6660150df7705c7af",
          "linkedWithoutMetadata": "83e316b0881ba22dfe1120e5879a1a00d4af39b2f5427ad6660150df7705c7af"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "401038a3e5141998137ca3ebb417e8d225ab1104737fd5385c87223a546448b0",
          "withoutMetadata": "401038a3e5141998137ca3ebb417e8d225ab1104737fd5385c87223a546448b0",
          "linkedWithoutMetadata": "401038a3e5141998137ca3ebb417e8d225ab1104737fd5385c87223a546448b0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "b57bbd19b82c29218ff0d95dada9ca396c987cf775d80198fd3e8766807f576b",
          "withoutMetadata": "b57bbd19b82c29218ff0d95dada9ca396c987cf775d80198fd3e8766807f576b",
          "linkedWithoutMetadata": "b57bbd19b82c29218ff0d95dada9ca396c987cf775d80198fd3e8766807f576b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "1d4a726c13ed2e466c9e42083307024bffb8aa7d078440cfa72b8818656c6064",
          "withoutMetadata": "1d4a726c13ed2e466c9e42083307024bffb8aa7d078440cfa72b8818656c6064",
          "linkedWithoutMetadata": "1d4a726c13ed2e466c9e42083307024bffb8aa7d078440cfa72b8818656c6064"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "cf104ce03f79be81ef8f467c9622238a62963db92c5358cb6494b8bcfaf9b382",
          "withoutMetadata": "cf104ce03f79be81ef8f467c9622238a62963db92c5358cb6494b8bcfaf9b382",
          "linkedWithoutMetadata": "cf104ce03f79be81ef8f467c9622238a62963db92c5358cb6494b8bcfaf9b382"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/IEIP712.sol:IEIP712": {
        "src": "lib/permit2/src/interfaces/IEIP712.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/ISignatureTransfer.sol:ISignatureTransfer": {
        "src": "lib/permit2/src/interfaces/ISignatureTransfer.sol:9",
        "inherit": [
          "lib/permit2/src/interfaces/IEIP712.sol:IEIP712"
        ],
        "libraries": [],
        "methods": [
          "nonceBitmap(address,uint256)",
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)",
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)",
          "permitTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes)",
          "permitWitnessTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes32,string,bytes)",
          "invalidateUnorderedNonces(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable": {
        "src": "lib/v2-core/src/interfaces/IAdminable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "transferAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Base.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "comptroller()",
          "protocolRevenues(address)",
          "claimProtocolRevenues(address)",
          "setComptroller(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:ISablierV2Comptroller": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "flashFee()",
          "isFlashAsset(address)",
          "protocolFees(address)",
          "setFlashFee(uint256)",
          "setProtocolFee(address,uint256)",
          "toggleFlashAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:13",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getAsset(uint256)",
          "getDepositedAmount(uint256)",
          "getEndTime(uint256)",
          "getRecipient(uint256)",
          "getRefundedAmount(uint256)",
          "getSender(uint256)",
          "getStartTime(uint256)",
          "getWithdrawnAmount(uint256)",
          "isCancelable(uint256)",
          "isCold(uint256)",
          "isDepleted(uint256)",
          "isStream(uint256)",
          "isWarm(uint256)",
          "nextStreamId()",
          "refundableAmountOf(uint256)",
          "statusOf(uint256)",
          "streamedAmountOf(uint256)",
          "wasCanceled(uint256)",
          "withdrawableAmountOf(uint256)",
          "burn(uint256)",
          "cancel(uint256)",
          "cancelMultiple(uint256[])",
          "renounce(uint256)",
          "setNFTDescriptor(address)",
          "withdraw(uint256,address,uint128)",
          "withdrawMax(uint256,address)",
          "withdrawMaxAndTransfer(uint256,address)",
          "withdrawMultiple(uint256[],address,uint128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:ISablierV2LockupDynamic": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_SEGMENT_COUNT()",
          "getRange(uint256)",
          "getSegments(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDeltas((address,bool,address,uint128,address,(address,uint256),struct LockupDynamic.SegmentWithDelta[]))",
          "createWithMilestones((address,uint40,bool,address,uint128,address,(address,uint256),struct LockupDynamic.Segment[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:ISablierV2LockupLinear": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getCliffTime(uint256)",
          "getRange(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))",
          "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:ISablierV2NFTDescriptor": {
        "src": "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:Lockup": {
        "src": "lib/v2-core/src/types/DataTypes.sol:29",
        "version": {
          "withMetadata": "6949ddac8532ff5bbcd404fb5555800c822d14af13d8a9df4d1a6bb5cdba03aa",
          "withoutMetadata": "6949ddac8532ff5bbcd404fb5555800c822d14af13d8a9df4d1a6bb5cdba03aa",
          "linkedWithoutMetadata": "6949ddac8532ff5bbcd404fb5555800c822d14af13d8a9df4d1a6bb5cdba03aa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupDynamic": {
        "src": "lib/v2-core/src/types/DataTypes.sol:72",
        "version": {
          "withMetadata": "04b9f145391a79424751bb1814c7f73fc752c83b0b0f4fa0f4f28410a7c5a060",
          "withoutMetadata": "04b9f145391a79424751bb1814c7f73fc752c83b0b0f4fa0f4f28410a7c5a060",
          "linkedWithoutMetadata": "04b9f145391a79424751bb1814c7f73fc752c83b0b0f4fa0f4f28410a7c5a060"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupLinear": {
        "src": "lib/v2-core/src/types/DataTypes.sol:180",
        "version": {
          "withMetadata": "0684ce4024d40451a853e149d3b5a1314a340c9336877b07ccf413221b51b635",
          "withoutMetadata": "0684ce4024d40451a853e149d3b5a1314a340c9336877b07ccf413221b51b635",
          "linkedWithoutMetadata": "0684ce4024d40451a853e149d3b5a1314a340c9336877b07ccf413221b51b635"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/auth/Ownable.sol:Ownable": {
        "src": "solady/src/auth/Ownable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "renounceOwnership()",
          "requestOwnershipHandover()",
          "cancelOwnershipHandover()",
          "completeOwnershipHandover(address)",
          "owner()",
          "ownershipHandoverExpiresAt(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC20.sol:ERC20": {
        "src": "solady/src/tokens/ERC20.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC721.sol:ERC721": {
        "src": "solady/src/tokens/ERC721.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "balanceOf(address)",
          "getApproved(uint256)",
          "approve(address,uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/CREATE3.sol:CREATE3": {
        "src": "solady/src/utils/CREATE3.sol:8",
        "version": {
          "withMetadata": "c6b63b525b1c8fc2598313dfd1b3a608a55bd3cce5a3a9ede0003fd1bae323e9",
          "withoutMetadata": "c6b63b525b1c8fc2598313dfd1b3a608a55bd3cce5a3a9ede0003fd1bae323e9",
          "linkedWithoutMetadata": "c6b63b525b1c8fc2598313dfd1b3a608a55bd3cce5a3a9ede0003fd1bae323e9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/SafeTransferLib.sol:SafeTransferLib": {
        "src": "solady/src/utils/SafeTransferLib.sol:12",
        "version": {
          "withMetadata": "eb824cf2c8e038a90379c689e9edb20da00a6d2f9ed63635aa23a6d4ac62f92d",
          "withoutMetadata": "eb824cf2c8e038a90379c689e9edb20da00a6d2f9ed63635aa23a6d4ac62f92d",
          "linkedWithoutMetadata": "eb824cf2c8e038a90379c689e9edb20da00a6d2f9ed63635aa23a6d4ac62f92d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "8db8b6e4c97fff5dcf5a8df93be4e32f3fca9dc1aa624d97c5513e18dfad0b7f",
          "withoutMetadata": "8db8b6e4c97fff5dcf5a8df93be4e32f3fca9dc1aa624d97c5513e18dfad0b7f",
          "linkedWithoutMetadata": "8db8b6e4c97fff5dcf5a8df93be4e32f3fca9dc1aa624d97c5513e18dfad0b7f"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "244b5a6af7faa748d9da71d85488653f090007c041c9ea88176563fda8bee722",
          "withoutMetadata": "244b5a6af7faa748d9da71d85488653f090007c041c9ea88176563fda8bee722",
          "linkedWithoutMetadata": "244b5a6af7faa748d9da71d85488653f090007c041c9ea88176563fda8bee722"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "7d3c59ac6a866bd8b0ce5039297af13127a8eda991ebbef3969e832965751cb0",
          "withoutMetadata": "7d3c59ac6a866bd8b0ce5039297af13127a8eda991ebbef3969e832965751cb0",
          "linkedWithoutMetadata": "7d3c59ac6a866bd8b0ce5039297af13127a8eda991ebbef3969e832965751cb0"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "210717f4a5e966376d1a1491ac329356c5b0050b78c395c3037458ca743c4015",
          "withoutMetadata": "210717f4a5e966376d1a1491ac329356c5b0050b78c395c3037458ca743c4015",
          "linkedWithoutMetadata": "210717f4a5e966376d1a1491ac329356c5b0050b78c395c3037458ca743c4015"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "e132a1c27eacf1447685d0b2524b758216656f411ae510192e5666f71f205097",
          "withoutMetadata": "e132a1c27eacf1447685d0b2524b758216656f411ae510192e5666f71f205097",
          "linkedWithoutMetadata": "e132a1c27eacf1447685d0b2524b758216656f411ae510192e5666f71f205097"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "d450887cd9536245614ab1a12af6fc7da194e6ece41a8e8817991643ce9b12d8",
          "withoutMetadata": "d450887cd9536245614ab1a12af6fc7da194e6ece41a8e8817991643ce9b12d8",
          "linkedWithoutMetadata": "d450887cd9536245614ab1a12af6fc7da194e6ece41a8e8817991643ce9b12d8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "dc0df2147078ccf843980285b76bd552217fcb37cb32edef870ca5d84578dc05",
          "withoutMetadata": "dc0df2147078ccf843980285b76bd552217fcb37cb32edef870ca5d84578dc05",
          "linkedWithoutMetadata": "dc0df2147078ccf843980285b76bd552217fcb37cb32edef870ca5d84578dc05"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Allo.sol:Allo": {
        "src": "contracts/core/Allo.sol:89",
        "version": {
          "withMetadata": "1746b306732060bd0e6f9bf6c51cc2c682efb2b577991d19cbe36db7ff6228a1",
          "withoutMetadata": "1746b306732060bd0e6f9bf6c51cc2c682efb2b577991d19cbe36db7ff6228a1",
          "linkedWithoutMetadata": "1746b306732060bd0e6f9bf6c51cc2c682efb2b577991d19cbe36db7ff6228a1"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "solady/src/auth/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IAllo.sol:IAllo"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "getFeeDenominator()",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "isCloneableStrategy(address)",
          "getPool(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)21517_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "percentFee",
              "offset": 0,
              "slot": "52",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:114"
            },
            {
              "label": "baseFee",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:129"
            },
            {
              "label": "_poolIndex",
              "offset": 0,
              "slot": "54",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "55",
              "type": "t_address_payable",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "56",
              "type": "t_contract(IRegistry)4373",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:133"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "57",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:134"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "58",
              "type": "t_mapping(t_uint256,t_struct(Pool)3892_storage)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:135"
            },
            {
              "label": "cloneableStrategies",
              "offset": 0,
              "slot": "59",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4373": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)4540": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)21517_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)3892_storage)": {
              "label": "mapping(uint256 => struct IAllo.Pool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Pool)3892_storage": {
              "label": "struct IAllo.Pool",
              "members": [
                {
                  "label": "profileId",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "strategy",
                  "type": "t_contract(IStrategy)4540",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "managerRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)21517_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Anchor.sol:Anchor": {
        "src": "contracts/core/Anchor.sol:89",
        "version": {
          "withMetadata": "1c79b4bf8ea6f5d0a5268ab19ed1947cb220afcd2058e3a453417104a308a238",
          "withoutMetadata": "1c79b4bf8ea6f5d0a5268ab19ed1947cb220afcd2058e3a453417104a308a238",
          "linkedWithoutMetadata": "1c79b4bf8ea6f5d0a5268ab19ed1947cb220afcd2058e3a453417104a308a238"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32,address)",
          "execute(address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Anchor",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "profileId",
            "src": "contracts/core/Anchor.sol:89"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Registry.sol:Registry": {
        "src": "contracts/core/Registry.sol:102",
        "version": {
          "withMetadata": "c329372b39624d8ee50fa45ac46b9e0b296ae775f27794e3b47159a1a726cbe1",
          "withoutMetadata": "c329372b39624d8ee50fa45ac46b9e0b296ae775f27794e3b47159a1a726cbe1",
          "linkedWithoutMetadata": "c329372b39624d8ee50fa45ac46b9e0b296ae775f27794e3b47159a1a726cbe1"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "contracts/core/libraries/Native.sol:Native",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "contracts/core/interfaces/IRegistry.sol:IRegistry"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)21517_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "anchorToProfileId",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:108"
            },
            {
              "label": "profilesById",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_struct(Profile)4200_storage)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:110"
            },
            {
              "label": "profileIdToPendingOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:112"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Profile)4200_storage)": {
              "label": "mapping(bytes32 => struct IRegistry.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)21517_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Profile)4200_storage": {
              "label": "struct IRegistry.Profile",
              "members": [
                {
                  "label": "id",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "anchor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)21517_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IAllo.sol:IAllo": {
        "src": "contracts/core/interfaces/IAllo.sol:97",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "isCloneableStrategy(address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "getPool(uint256)",
          "getFeeDenominator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IRegistry.sol:IRegistry": {
        "src": "contracts/core/interfaces/IRegistry.sol:92",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/core/interfaces/IStrategy.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "isValidAllocator(address)",
          "isPoolActive()",
          "getPoolAmount()",
          "increasePoolAmount(uint256)",
          "getRecipientStatus(address)",
          "getPayouts(address[],bytes[])",
          "initialize(uint256,bytes)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Clone.sol:Clone": {
        "src": "contracts/core/libraries/Clone.sol:37",
        "version": {
          "withMetadata": "a1439360f9f0037538d1fb9bcc245b5d8d212b5bb389bb789e22d8d698ab65e9",
          "withoutMetadata": "a1439360f9f0037538d1fb9bcc245b5d8d212b5bb389bb789e22d8d698ab65e9",
          "linkedWithoutMetadata": "a1439360f9f0037538d1fb9bcc245b5d8d212b5bb389bb789e22d8d698ab65e9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Errors.sol:Errors": {
        "src": "contracts/core/libraries/Errors.sol:109",
        "version": {
          "withMetadata": "03a893498dec963d042efb003e88d0536da01077bddfc52fff642e336b4d4afa",
          "withoutMetadata": "03a893498dec963d042efb003e88d0536da01077bddfc52fff642e336b4d4afa",
          "linkedWithoutMetadata": "03a893498dec963d042efb003e88d0536da01077bddfc52fff642e336b4d4afa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Native.sol:Native": {
        "src": "contracts/core/libraries/Native.sol:26",
        "version": {
          "withMetadata": "5b71596f4c272643cf7ba3ccb786edcf468effa168d3f9ad804989503724bfc2",
          "withoutMetadata": "5b71596f4c272643cf7ba3ccb786edcf468effa168d3f9ad804989503724bfc2",
          "linkedWithoutMetadata": "5b71596f4c272643cf7ba3ccb786edcf468effa168d3f9ad804989503724bfc2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Transfer.sol:Transfer": {
        "src": "contracts/core/libraries/Transfer.sol:97",
        "version": {
          "withMetadata": "10db3d8997be6bb1c7d2173c50e2f53438f0511d840f593a7239abbe805e9a7f",
          "withoutMetadata": "10db3d8997be6bb1c7d2173c50e2f53438f0511d840f593a7239abbe805e9a7f",
          "linkedWithoutMetadata": "10db3d8997be6bb1c7d2173c50e2f53438f0511d840f593a7239abbe805e9a7f"
        },
        "inherit": [
          "contracts/core/libraries/Native.sol:Native"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/factory/ContractFactory.sol:ContractFactory": {
        "src": "contracts/factory/ContractFactory.sol:107",
        "version": {
          "withMetadata": "7ef3955175489611b3e1c3d9dfd2ba75de74e898b46345e896c402e94807f50c",
          "withoutMetadata": "7ef3955175489611b3e1c3d9dfd2ba75de74e898b46345e896c402e94807f50c",
          "linkedWithoutMetadata": "7ef3955175489611b3e1c3d9dfd2ba75de74e898b46345e896c402e94807f50c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "deploy(string,string,bytes)",
          "setDeployer(address,bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ContractFactory",
            "src": "contracts/factory/ContractFactory.sol:119"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "usedSalts",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            },
            {
              "label": "isDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/BaseStrategy.sol:BaseStrategy": {
        "src": "contracts/strategies/BaseStrategy.sol:111",
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "getPoolAmount()",
          "isPoolActive()",
          "getRecipientStatus(address)",
          "increasePoolAmount(uint256)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)",
          "getPayouts(address[],bytes[])",
          "isValidAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseStrategy",
            "src": "contracts/strategies/BaseStrategy.sol:129"
          },
          {
            "kind": "state-variable-immutable",
            "name": "allo",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          },
          {
            "kind": "state-variable-immutable",
            "name": "strategyId",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:DirectGrantsSimpleStrategy": {
        "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:110",
        "version": {
          "withMetadata": "94ed955b7181ed645ac32ee2b0dd55941624f2d1dd4e491af2d31cc50fca4dde",
          "withoutMetadata": "94ed955b7181ed645ac32ee2b0dd55941624f2d1dd4e491af2d31cc50fca4dde",
          "linkedWithoutMetadata": "94ed955b7181ed645ac32ee2b0dd55941624f2d1dd4e491af2d31cc50fca4dde"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getMilestoneStatus(address,uint256)",
          "getMilestones(address)",
          "setMilestones(address,struct DirectGrantsSimpleStrategy.Milestone[])",
          "reviewSetMilestones(address,uint8)",
          "submitMilestone(address,uint256,(uint256,string))",
          "rejectMilestone(address,uint256)",
          "setRecipientStatusToInReview(address[])",
          "setPoolActive(bool)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DirectGrantsSimpleStrategy",
            "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:192"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:161"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:163"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:164"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(IRegistry)4373",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:167"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:168"
            },
            {
              "label": "_acceptedRecipientIds",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:172"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)5657_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:177"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Milestone)5666_storage)dyn_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:179"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:184"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)5666_storage)dyn_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4373": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4386": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(Milestone)5666_storage)dyn_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Milestone[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5657_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)5666_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)5657_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "milestonesReviewStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:DonationVotingCustomRegistryStrategy": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52",
        "version": {
          "withMetadata": "44a662ce22f64fbfdd952791dcaec2bd283714f8b25971d445239dfdb6d359b9",
          "withoutMetadata": "44a662ce22f64fbfdd952791dcaec2bd283714f8b25971d445239dfdb6d359b9",
          "linkedWithoutMetadata": "44a662ce22f64fbfdd952791dcaec2bd283714f8b25971d445239dfdb6d359b9"
        },
        "inherit": [
          "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingCustomRegistryStrategy",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4373",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:162"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7271_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:165"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4391_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:167"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:172"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(SimpleProjectRegistry)7242",
              "contract": "DonationVotingCustomRegistryStrategy",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4373": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(SimpleProjectRegistry)7242": {
              "label": "contract SimpleProjectRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4386": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4391_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7271_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4391_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7271_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:SimpleProjectRegistry": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:26",
        "version": {
          "withMetadata": "69fe35a9b92983ca258966182197e369c6c8f44142296b040148cd7253453847",
          "withoutMetadata": "69fe35a9b92983ca258966182197e369c6c8f44142296b040148cd7253453847",
          "linkedWithoutMetadata": "69fe35a9b92983ca258966182197e369c6c8f44142296b040148cd7253453847"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addProject(address)",
          "addProjects(address[])",
          "removeProject(address)",
          "removeProjects(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleProjectRegistry",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "projects",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleProjectRegistry",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy": {
        "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:100",
        "version": {
          "withMetadata": "441e782968f60393f27415d74ef49dfd49676ec5c69eb73794a858453ed9b4ad",
          "withoutMetadata": "441e782968f60393f27415d74ef49dfd49676ec5c69eb73794a858453ed9b4ad",
          "linkedWithoutMetadata": "441e782968f60393f27415d74ef49dfd49676ec5c69eb73794a858453ed9b4ad"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "setPayout(address[],uint256[])",
          "claim(struct DonationVotingStrategy.Claim[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingStrategy",
            "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:198"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4373",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:162"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7271_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:165"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4391_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:167"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:172"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4373": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4386": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4391_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7271_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4391_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7271_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:ProportionalPayoutStrategy": {
        "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:113",
        "version": {
          "withMetadata": "6f49e65a6166edda61451f42f19f14ec5f3760d2adb6b3cb38a54b1c475824c5",
          "withoutMetadata": "6f49e65a6166edda61451f42f19f14ec5f3760d2adb6b3cb38a54b1c475824c5",
          "linkedWithoutMetadata": "6f49e65a6166edda61451f42f19f14ec5f3760d2adb6b3cb38a54b1c475824c5"
        },
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "setAllocationTime(uint64,uint64)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProportionalPayoutStrategy",
            "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:163"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Recipient)8683_storage)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:151"
            },
            {
              "label": "hasAllocated",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:153"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ERC721)34004",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "maxRecipientsAllowed",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:155"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:157"
            },
            {
              "label": "totalAllocations",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:159"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:161"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)34004": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4386": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)8683_storage)": {
              "label": "mapping(address => struct ProportionalPayoutStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)8683_storage": {
              "label": "struct ProportionalPayoutStrategy.Recipient",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:QVGovernanceERC20Votes": {
        "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:89",
        "version": {
          "withMetadata": "40c79a9d043f35339f7e09f7652592dd9d5d4dec6622e62f88fdcdab0d3ceeef",
          "withoutMetadata": "40c79a9d043f35339f7e09f7652592dd9d5d4dec6622e62f88fdcdab0d3ceeef",
          "linkedWithoutMetadata": "40c79a9d043f35339f7e09f7652592dd9d5d4dec6622e62f88fdcdab0d3ceeef"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVGovernanceERC20Votes",
            "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:102"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4373",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17666_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:225"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17677_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:233"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4386,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:240"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:242"
            },
            {
              "label": "govToken",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IVotes)21964",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:96"
            },
            {
              "label": "timestamp",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:98"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4373": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IVotes)21964": {
              "label": "contract IVotes",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4386": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4386,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17677_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17666_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4386,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17677_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17666_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:HackathonQVStrategy": {
        "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:110",
        "version": {
          "withMetadata": "0ed7dc0fc389166b33682cc74870c2b69f7d28e2b10cc68c2e8565a1760177eb",
          "withoutMetadata": "0ed7dc0fc389166b33682cc74870c2b69f7d28e2b10cc68c2e8565a1760177eb",
          "linkedWithoutMetadata": "0ed7dc0fc389166b33682cc74870c2b69f7d28e2b10cc68c2e8565a1760177eb"
        },
        "inherit": [
          "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver",
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllowedRecipientIds(address[],uint64,bytes)",
          "setPayoutPercentages(uint256[])",
          "getPayouts(address[],bytes[])",
          "getAttestation(bytes32)",
          "getSchema(bytes32)",
          "isPayable()",
          "isAttestationExpired(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HackathonQVStrategy",
            "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:148"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4373",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17666_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:225"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17677_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:233"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4386,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:240"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:242"
            },
            {
              "label": "_eas",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IEAS)20655",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            },
            {
              "label": "payoutPercentages",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:130"
            },
            {
              "label": "votesByRank",
              "offset": 0,
              "slot": "14",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:131"
            },
            {
              "label": "easInfo",
              "offset": 0,
              "slot": "15",
              "type": "t_struct(EASInfo)9587_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "20",
              "type": "t_contract(ERC721)34004",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:133"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:133"
            },
            {
              "label": "recipientIdToUID",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:135"
            },
            {
              "label": "recipientIdToIndex",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:136"
            },
            {
              "label": "indexToRecipientId",
              "offset": 0,
              "slot": "25",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:143"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ERC721)34004": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IEAS)20655": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4373": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(ISchemaRegistry)20700": {
              "label": "contract ISchemaRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4386": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4386,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17677_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17666_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4386,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17677_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(EASInfo)9587_storage": {
              "label": "struct HackathonQVStrategy.EASInfo",
              "members": [
                {
                  "label": "eas",
                  "type": "t_contract(IEAS)20655",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "schemaRegistry",
                  "type": "t_contract(ISchemaRegistry)20700",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "schemaUID",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "schema",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "revocable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17666_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver": {
        "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:19",
        "inherit": [
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver"
        ],
        "libraries": [],
        "methods": [
          "isPayable()",
          "()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_eas",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IEAS)20655",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            }
          ],
          "types": {
            "t_contract(IEAS)20655": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:QVImpactStreamStrategy": {
        "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:89",
        "version": {
          "withMetadata": "85ba56b6c784c2f11641fc23479846784faf1e22f707f96080e052740b30585e",
          "withoutMetadata": "85ba56b6c784c2f11641fc23479846784faf1e22f707f96080e052740b30585e",
          "linkedWithoutMetadata": "85ba56b6c784c2f11641fc23479846784faf1e22f707f96080e052740b30585e"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "updatePoolTimestamps(uint64,uint64)",
          "batchAddAllocator(address[])",
          "addAllocator(address)",
          "batchRemoveAllocator(address[])",
          "removeAllocator(address)",
          "setPayouts(struct QVImpactStreamStrategy.Payout[])",
          "getRecipient(address)",
          "getVoiceCreditsCastByAllocator(address)",
          "getVoiceCreditsCastByAllocatorToRecipient(address,address)",
          "getVotesCastByAllocatorToRecipient(address,address)",
          "recoverFunds(address,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVImpactStreamStrategy",
            "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:218"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "3",
              "type": "t_uint64",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:157"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "3",
              "type": "t_uint64",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:158"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IRegistry)4373",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:161"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:163"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:165"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)11032_storage)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:168"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)11043_storage)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:173"
            },
            {
              "label": "payouts",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:178"
            },
            {
              "label": "payoutSet",
              "offset": 0,
              "slot": "10",
              "type": "t_bool",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:179"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4373": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4386": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)11043_storage)": {
              "label": "mapping(address => struct QVImpactStreamStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)11032_storage)": {
              "label": "mapping(address => struct QVImpactStreamStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)11043_storage": {
              "label": "struct QVImpactStreamStrategy.Allocator",
              "members": [
                {
                  "label": "usedVoiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)11032_storage": {
              "label": "struct QVImpactStreamStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "requestedAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:QVNftTieredStrategy": {
        "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:94",
        "version": {
          "withMetadata": "74ca327dc587d24bf5532156aed0c1c5e7a3c7b7e921a3dae18e638ae5d4a778",
          "withoutMetadata": "74ca327dc587d24bf5532156aed0c1c5e7a3c7b7e921a3dae18e638ae5d4a778",
          "linkedWithoutMetadata": "74ca327dc587d24bf5532156aed0c1c5e7a3c7b7e921a3dae18e638ae5d4a778"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVNftTieredStrategy",
            "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4373",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17666_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:225"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17677_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:233"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4386,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:240"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:242"
            },
            {
              "label": "nfts",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_contract(ERC721)34004)dyn_storage",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:111"
            },
            {
              "label": "maxVoiceCreditsPerNft",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_contract(ERC721)34004,t_uint256)",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:113"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_contract(ERC721)34004,t_mapping(t_uint256,t_uint256))",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:115"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(ERC721)34004)dyn_storage": {
              "label": "contract ERC721[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)34004": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4373": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4386": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4386,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17677_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17666_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)34004,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(contract ERC721 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)34004,t_uint256)": {
              "label": "mapping(contract ERC721 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4386,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17677_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17666_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:LockupDynamicStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:16",
        "version": {
          "withMetadata": "0d325b4a05567e77b4f0c6dd2f51c6a2b489802932baa610b904adc286ddfd07",
          "withoutMetadata": "0d325b4a05567e77b4f0c6dd2f51c6a2b489802932baa610b904adc286ddfd07",
          "linkedWithoutMetadata": "0d325b4a05567e77b4f0c6dd2f51c6a2b489802932baa610b904adc286ddfd07"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientSegments(address,struct LockupDynamic.SegmentWithDelta[])",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupDynamicStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:42"
            },
            {
              "label": "lockupDynamic",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupDynamic)32415",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)32535_storage",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)12548_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(SegmentWithDelta)32619_storage)dyn_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupDynamic)32415": {
              "label": "contract ISablierV2LockupDynamic",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4386": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12548_storage)": {
              "label": "mapping(address => struct LockupDynamicStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)32535_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)31776",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12548_storage": {
              "label": "struct LockupDynamicStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "segments",
                  "type": "t_array(t_struct(SegmentWithDelta)32619_storage)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(SegmentWithDelta)32619_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exponent",
                  "type": "t_userDefinedValueType(UD2x18)29972",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "delta",
                  "type": "t_uint40",
                  "offset": 24,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD2x18)29972": {
              "label": "UD2x18",
              "numberOfBytes": "8",
              "underlying": "t_uint64"
            },
            "t_userDefinedValueType(UD60x18)31776": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:LockupLinearStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:16",
        "version": {
          "withMetadata": "8f0845916452e20a371289f965994ea3e1072fea3cc93ee6f0facbff846ab379",
          "withoutMetadata": "8f0845916452e20a371289f965994ea3e1072fea3cc93ee6f0facbff846ab379",
          "linkedWithoutMetadata": "8f0845916452e20a371289f965994ea3e1072fea3cc93ee6f0facbff846ab379"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientDurations(address,(uint40,uint40))",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupLinearStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:42"
            },
            {
              "label": "lockupLinear",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupLinear)32504",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)32535_storage",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)13730_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupLinear)32504": {
              "label": "contract ISablierV2LockupLinear",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4386": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)13730_storage)": {
              "label": "mapping(address => struct LockupLinearStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)32535_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)31776",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Durations)32687_storage": {
              "label": "struct LockupLinear.Durations",
              "members": [
                {
                  "label": "cliff",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "total",
                  "type": "t_uint40",
                  "offset": 5,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)13730_storage": {
              "label": "struct LockupLinearStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durations",
                  "type": "t_struct(Durations)32687_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD60x18)31776": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:NFT": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:8",
        "version": {
          "withMetadata": "ec507198978f9d90b1bd2208d3e9599b16c4cfa8f79a8b26adb8d133765cf062",
          "withoutMetadata": "ec507198978f9d90b1bd2208d3e9599b16c4cfa8f79a8b26adb8d133765cf062",
          "linkedWithoutMetadata": "ec507198978f9d90b1bd2208d3e9599b16c4cfa8f79a8b26adb8d133765cf062"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable",
          "solady/src/tokens/ERC721.sol:ERC721"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)",
          "name()",
          "symbol()",
          "mintTo(address)",
          "tokenURI(uint256)",
          "withdrawPayments(address payable)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFT",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTokenId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:16"
            },
            {
              "label": "MINT_PRICE",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:17"
            },
            {
              "label": "__name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:20"
            },
            {
              "label": "__symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:NFTFactory": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:6",
        "version": {
          "withMetadata": "01536cbe3ffd69a57fca9e546f4d6c69c0f0949c80886c6bf31a61c0cfbd3292",
          "withoutMetadata": "01536cbe3ffd69a57fca9e546f4d6c69c0f0949c80886c6bf31a61c0cfbd3292",
          "linkedWithoutMetadata": "01536cbe3ffd69a57fca9e546f4d6c69c0f0949c80886c6bf31a61c0cfbd3292"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createNFTContract(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isNFTContract",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NFTFactory",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:WrappedVotingNftMintStrategy": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:101",
        "version": {
          "withMetadata": "ec94fac72a511c20cee32ba0b500bedd173e32e4089fb2ae4593f7f995cd1ea3",
          "withoutMetadata": "ec94fac72a511c20cee32ba0b500bedd173e32e4089fb2ae4593f7f995cd1ea3",
          "linkedWithoutMetadata": "ec94fac72a511c20cee32ba0b500bedd173e32e4089fb2ae4593f7f995cd1ea3"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllocationTimes(uint64,uint64)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrappedVotingNftMintStrategy",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:147"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "nftFactory",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(NFTFactory)14957",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationStartTime",
              "offset": 20,
              "slot": "4",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "currentWinner",
              "offset": 8,
              "slot": "5",
              "type": "t_address",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:137"
            },
            {
              "label": "allocations",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:138"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(NFTFactory)14957": {
              "label": "contract NFTFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:99",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(struct DonationVotingMerkleDistributionBaseStrategy.ApplicationStatus[],uint256)",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(address)",
          "updateDistribution(bytes32,(uint256,string))",
          "isDistributionSet()",
          "hasBeenDistributed(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionBaseStrategy",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:286"
          },
          {
            "kind": "state-variable-assignment",
            "name": "recipientsCounter",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
          },
          {
            "kind": "state-variable-immutable",
            "name": "PERMIT2",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:230"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4666_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:208"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4373",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)15538_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4373": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)15538_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)15538_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:DonationVotingMerkleDistributionDirectTransferStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:82",
        "version": {
          "withMetadata": "afcc05ec0c0c55336aa137280a7633f89f2d29b31bf3044774b3aef77e68d7ad",
          "withoutMetadata": "afcc05ec0c0c55336aa137280a7633f89f2d29b31bf3044774b3aef77e68d7ad",
          "linkedWithoutMetadata": "afcc05ec0c0c55336aa137280a7633f89f2d29b31bf3044774b3aef77e68d7ad"
        },
        "inherit": [
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionDirectTransferStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4666_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:208"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4373",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)15538_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4373": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)15538_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)15538_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:DonationVotingMerkleDistributionVaultStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:94",
        "version": {
          "withMetadata": "73df29194947dd772c92687e6009db5f007ef10f58f2cbe4fe3e678960c3eb65",
          "withoutMetadata": "73df29194947dd772c92687e6009db5f007ef10f58f2cbe4fe3e678960c3eb65",
          "linkedWithoutMetadata": "73df29194947dd772c92687e6009db5f007ef10f58f2cbe4fe3e678960c3eb65"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)",
          "claim(struct DonationVotingMerkleDistributionVaultStrategy.Claim[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionVaultStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4666_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:208"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4373",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)15538_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "16",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "16",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "18",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "67",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:117"
            },
            {
              "label": "totalClaimableAmount",
              "offset": 0,
              "slot": "68",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:120"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4373": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)15538_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)15538_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy": {
        "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:89",
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVBaseStrategy",
            "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:264"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4373",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17666_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:225"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17677_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:233"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4386,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:240"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:242"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4373": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4386": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4386,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17677_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17666_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4386,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17677_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17666_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-simple/QVSimpleStrategy.sol:QVSimpleStrategy": {
        "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:90",
        "version": {
          "withMetadata": "4bf9fa44bc5f62fe5324d77ec68b4ceb7fa7ddb1727ab2258783f90b620d4f6f",
          "withoutMetadata": "4bf9fa44bc5f62fe5324d77ec68b4ceb7fa7ddb1727ab2258783f90b620d4f6f",
          "linkedWithoutMetadata": "4bf9fa44bc5f62fe5324d77ec68b4ceb7fa7ddb1727ab2258783f90b620d4f6f"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "addAllocator(address)",
          "removeAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVSimpleStrategy",
            "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4373",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17666_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:225"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17677_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:233"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4386,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:240"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:242"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:108"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:111"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4373": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4386": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4386,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17677_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17666_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4386,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17677_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17666_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:RFPCommitteeStrategy": {
        "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:84",
        "version": {
          "withMetadata": "7c580af81380b352557bf7f436b4135ebf467319bdbe25c0acec2b62de0490ab",
          "withoutMetadata": "7c580af81380b352557bf7f436b4135ebf467319bdbe25c0acec2b62de0490ab",
          "linkedWithoutMetadata": "7c580af81380b352557bf7f436b4135ebf467319bdbe25c0acec2b62de0490ab"
        },
        "inherit": [
          "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPCommitteeStrategy",
            "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:124"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:173"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:174"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4373",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:184"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:189"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)19278_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)19269_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:192"
            },
            {
              "label": "voteThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:104"
            },
            {
              "label": "votedFor",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:109"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:112"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)19278_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4373": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4386": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)19269_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)19278_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)19269_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy": {
        "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:105",
        "version": {
          "withMetadata": "4692fd4921ed39566696ae87abf4c62827bafdd39c5606d8251dbf59e41d5b1e",
          "withoutMetadata": "4692fd4921ed39566696ae87abf4c62827bafdd39c5606d8251dbf59e41d5b1e",
          "linkedWithoutMetadata": "4692fd4921ed39566696ae87abf4c62827bafdd39c5606d8251dbf59e41d5b1e"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getPayouts(address[],bytes[])",
          "getMilestone(uint256)",
          "getMilestoneStatus(uint256)",
          "setPoolActive(bool)",
          "setMilestones(struct RFPSimpleStrategy.Milestone[])",
          "submitUpcomingMilestone((uint256,string))",
          "increaseMaxBid(uint256)",
          "rejectMilestone(uint256)",
          "withdraw(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPSimpleStrategy",
            "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:200"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:173"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:174"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4373",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:184"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:189"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)19278_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)19269_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:192"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)19278_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4373": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4386": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Recipient)19269_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)19278_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)19269_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/IEAS.sol:IEAS": {
        "src": "lib/eas-contracts/contracts/IEAS.sol:82",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSchemaRegistry()",
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))",
          "multiAttest(struct MultiAttestationRequest[])",
          "multiAttestByDelegation(struct MultiDelegatedAttestationRequest[])",
          "revoke((bytes32,(bytes32,uint256)))",
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))",
          "multiRevoke(struct MultiRevocationRequest[])",
          "multiRevokeByDelegation(struct MultiDelegatedRevocationRequest[])",
          "timestamp(bytes32)",
          "multiTimestamp(bytes32[])",
          "revokeOffchain(bytes32)",
          "multiRevokeOffchain(bytes32[])",
          "getAttestation(bytes32)",
          "isAttestationValid(bytes32)",
          "getTimestamp(bytes32)",
          "getRevokeOffchain(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol:ISchemaRegistry": {
        "src": "lib/eas-contracts/contracts/ISchemaRegistry.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "register(string,address,bool)",
          "getSchema(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver": {
        "src": "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:19",
        "version": {
          "withMetadata": "7c0bf88e2176db10fb1402a9627070a56310b5d684c8c0bc3c0bb3316f14a3f9",
          "withoutMetadata": "7c0bf88e2176db10fb1402a9627070a56310b5d684c8c0bc3c0bb3316f14a3f9",
          "linkedWithoutMetadata": "7c0bf88e2176db10fb1402a9627070a56310b5d684c8c0bc3c0bb3316f14a3f9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "27a86c6e35b4234ed442de269f1b4e6bb75cabc20433f95ee18ed2a59b20c3c7",
          "withoutMetadata": "27a86c6e35b4234ed442de269f1b4e6bb75cabc20433f95ee18ed2a59b20c3c7",
          "linkedWithoutMetadata": "27a86c6e35b4234ed442de269f1b4e6bb75cabc20433f95ee18ed2a59b20c3c7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:50",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)21517_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)21517_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)21517_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "f26f07ef39f3c5b7fbd601aa85960940cbbb550d827b7c4b22b46282fa6482fe",
          "withoutMetadata": "f26f07ef39f3c5b7fbd601aa85960940cbbb550d827b7c4b22b46282fa6482fe",
          "linkedWithoutMetadata": "f26f07ef39f3c5b7fbd601aa85960940cbbb550d827b7c4b22b46282fa6482fe"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "3194a5cb934b16baa7e988528e9e3c9976915e8f17ec0ec7ea462c61bcc13ad0",
          "withoutMetadata": "3194a5cb934b16baa7e988528e9e3c9976915e8f17ec0ec7ea462c61bcc13ad0",
          "linkedWithoutMetadata": "3194a5cb934b16baa7e988528e9e3c9976915e8f17ec0ec7ea462c61bcc13ad0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "6c8efe5bdf34a69ae4878a4a3e1a8eabb7dd010a2fb6694cb7d5ff740aec665e",
          "withoutMetadata": "6c8efe5bdf34a69ae4878a4a3e1a8eabb7dd010a2fb6694cb7d5ff740aec665e",
          "linkedWithoutMetadata": "6c8efe5bdf34a69ae4878a4a3e1a8eabb7dd010a2fb6694cb7d5ff740aec665e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "24b9f710eb5e0e5f040ba3a2f01a9d2c33e7c75d7de9f45e61a7705618b818ac",
          "withoutMetadata": "24b9f710eb5e0e5f040ba3a2f01a9d2c33e7c75d7de9f45e61a7705618b818ac",
          "linkedWithoutMetadata": "24b9f710eb5e0e5f040ba3a2f01a9d2c33e7c75d7de9f45e61a7705618b818ac"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "4a7789ad354f9b1cf755a97a3b35aafda0c336436f23a22fadaa77c6764b5057",
          "withoutMetadata": "4a7789ad354f9b1cf755a97a3b35aafda0c336436f23a22fadaa77c6764b5057",
          "linkedWithoutMetadata": "4a7789ad354f9b1cf755a97a3b35aafda0c336436f23a22fadaa77c6764b5057"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "fd16e5d1fe718e46ed56f5681615af2b04f5b94943c77ecc2a7b2cdd3f41ae9d",
          "withoutMetadata": "fd16e5d1fe718e46ed56f5681615af2b04f5b94943c77ecc2a7b2cdd3f41ae9d",
          "linkedWithoutMetadata": "fd16e5d1fe718e46ed56f5681615af2b04f5b94943c77ecc2a7b2cdd3f41ae9d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/IEIP712.sol:IEIP712": {
        "src": "lib/permit2/src/interfaces/IEIP712.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/ISignatureTransfer.sol:ISignatureTransfer": {
        "src": "lib/permit2/src/interfaces/ISignatureTransfer.sol:9",
        "inherit": [
          "lib/permit2/src/interfaces/IEIP712.sol:IEIP712"
        ],
        "libraries": [],
        "methods": [
          "nonceBitmap(address,uint256)",
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)",
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)",
          "permitTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes)",
          "permitWitnessTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes32,string,bytes)",
          "invalidateUnorderedNonces(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable": {
        "src": "lib/v2-core/src/interfaces/IAdminable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "transferAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Base.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "comptroller()",
          "protocolRevenues(address)",
          "claimProtocolRevenues(address)",
          "setComptroller(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:ISablierV2Comptroller": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "flashFee()",
          "isFlashAsset(address)",
          "protocolFees(address)",
          "setFlashFee(uint256)",
          "setProtocolFee(address,uint256)",
          "toggleFlashAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:13",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getAsset(uint256)",
          "getDepositedAmount(uint256)",
          "getEndTime(uint256)",
          "getRecipient(uint256)",
          "getRefundedAmount(uint256)",
          "getSender(uint256)",
          "getStartTime(uint256)",
          "getWithdrawnAmount(uint256)",
          "isCancelable(uint256)",
          "isCold(uint256)",
          "isDepleted(uint256)",
          "isStream(uint256)",
          "isWarm(uint256)",
          "nextStreamId()",
          "refundableAmountOf(uint256)",
          "statusOf(uint256)",
          "streamedAmountOf(uint256)",
          "wasCanceled(uint256)",
          "withdrawableAmountOf(uint256)",
          "burn(uint256)",
          "cancel(uint256)",
          "cancelMultiple(uint256[])",
          "renounce(uint256)",
          "setNFTDescriptor(address)",
          "withdraw(uint256,address,uint128)",
          "withdrawMax(uint256,address)",
          "withdrawMaxAndTransfer(uint256,address)",
          "withdrawMultiple(uint256[],address,uint128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:ISablierV2LockupDynamic": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_SEGMENT_COUNT()",
          "getRange(uint256)",
          "getSegments(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDeltas((address,bool,address,uint128,address,(address,uint256),struct LockupDynamic.SegmentWithDelta[]))",
          "createWithMilestones((address,uint40,bool,address,uint128,address,(address,uint256),struct LockupDynamic.Segment[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:ISablierV2LockupLinear": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getCliffTime(uint256)",
          "getRange(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))",
          "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:ISablierV2NFTDescriptor": {
        "src": "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:Lockup": {
        "src": "lib/v2-core/src/types/DataTypes.sol:29",
        "version": {
          "withMetadata": "79aa172cddeac234c67213a393fbe35fa2fded1d3ea71c6e8553cee512e6ce08",
          "withoutMetadata": "79aa172cddeac234c67213a393fbe35fa2fded1d3ea71c6e8553cee512e6ce08",
          "linkedWithoutMetadata": "79aa172cddeac234c67213a393fbe35fa2fded1d3ea71c6e8553cee512e6ce08"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupDynamic": {
        "src": "lib/v2-core/src/types/DataTypes.sol:72",
        "version": {
          "withMetadata": "97d48f6f744b8cb4c6c31200ea8527b5f3f7ef958c8fff1f3b0191c6dad69346",
          "withoutMetadata": "97d48f6f744b8cb4c6c31200ea8527b5f3f7ef958c8fff1f3b0191c6dad69346",
          "linkedWithoutMetadata": "97d48f6f744b8cb4c6c31200ea8527b5f3f7ef958c8fff1f3b0191c6dad69346"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupLinear": {
        "src": "lib/v2-core/src/types/DataTypes.sol:180",
        "version": {
          "withMetadata": "ba687d7a83c9d45e688666e5e2fd5198f1e6549d74674039353c7ba3e549e950",
          "withoutMetadata": "ba687d7a83c9d45e688666e5e2fd5198f1e6549d74674039353c7ba3e549e950",
          "linkedWithoutMetadata": "ba687d7a83c9d45e688666e5e2fd5198f1e6549d74674039353c7ba3e549e950"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/auth/Ownable.sol:Ownable": {
        "src": "solady/src/auth/Ownable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "renounceOwnership()",
          "requestOwnershipHandover()",
          "cancelOwnershipHandover()",
          "completeOwnershipHandover(address)",
          "owner()",
          "ownershipHandoverExpiresAt(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC20.sol:ERC20": {
        "src": "solady/src/tokens/ERC20.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC721.sol:ERC721": {
        "src": "solady/src/tokens/ERC721.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "balanceOf(address)",
          "getApproved(uint256)",
          "approve(address,uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/CREATE3.sol:CREATE3": {
        "src": "solady/src/utils/CREATE3.sol:8",
        "version": {
          "withMetadata": "cba3bde3cb5c8673e568d49b748a7d3f297693acf7d552773c7d0e013bcae60d",
          "withoutMetadata": "cba3bde3cb5c8673e568d49b748a7d3f297693acf7d552773c7d0e013bcae60d",
          "linkedWithoutMetadata": "cba3bde3cb5c8673e568d49b748a7d3f297693acf7d552773c7d0e013bcae60d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/SafeTransferLib.sol:SafeTransferLib": {
        "src": "solady/src/utils/SafeTransferLib.sol:12",
        "version": {
          "withMetadata": "ec9716eb88eba5f385ed803d9632e08321e75460afee3cd7c5c3a295662abe4c",
          "withoutMetadata": "ec9716eb88eba5f385ed803d9632e08321e75460afee3cd7c5c3a295662abe4c",
          "linkedWithoutMetadata": "ec9716eb88eba5f385ed803d9632e08321e75460afee3cd7c5c3a295662abe4c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "eaff89b96c25eed3c5f6eae04720dc04898c3bf49a8d3132965c47271b073a21",
          "withoutMetadata": "eaff89b96c25eed3c5f6eae04720dc04898c3bf49a8d3132965c47271b073a21",
          "linkedWithoutMetadata": "eaff89b96c25eed3c5f6eae04720dc04898c3bf49a8d3132965c47271b073a21"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "466dc342b8e8b0c251ec2320021ed5298951a08397a4db20c8bb1b8cfac62119",
          "withoutMetadata": "466dc342b8e8b0c251ec2320021ed5298951a08397a4db20c8bb1b8cfac62119",
          "linkedWithoutMetadata": "466dc342b8e8b0c251ec2320021ed5298951a08397a4db20c8bb1b8cfac62119"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "7af2b48e885d95ddc1a24071d22642ed0fb6ac6ab24cdbc647121cbb78cd30d4",
          "withoutMetadata": "7af2b48e885d95ddc1a24071d22642ed0fb6ac6ab24cdbc647121cbb78cd30d4",
          "linkedWithoutMetadata": "7af2b48e885d95ddc1a24071d22642ed0fb6ac6ab24cdbc647121cbb78cd30d4"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "9c19451560fcc61e65c3d0fb46da00b1eeabb742803d3bda5ee607d4bb3e477b",
          "withoutMetadata": "9c19451560fcc61e65c3d0fb46da00b1eeabb742803d3bda5ee607d4bb3e477b",
          "linkedWithoutMetadata": "9c19451560fcc61e65c3d0fb46da00b1eeabb742803d3bda5ee607d4bb3e477b"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "508e44f58bb62590d904bd515d1c8d90439782317e31cbff00598806eba23fc0",
          "withoutMetadata": "508e44f58bb62590d904bd515d1c8d90439782317e31cbff00598806eba23fc0",
          "linkedWithoutMetadata": "508e44f58bb62590d904bd515d1c8d90439782317e31cbff00598806eba23fc0"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "8eb47ee5a66a62540e6448c832f12d09d6551ab808f2075654be879a6735f731",
          "withoutMetadata": "8eb47ee5a66a62540e6448c832f12d09d6551ab808f2075654be879a6735f731",
          "linkedWithoutMetadata": "8eb47ee5a66a62540e6448c832f12d09d6551ab808f2075654be879a6735f731"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "463674d7343cca13f920d93747488f8a1d0c169cd01ba214f3e6bf8b5889b819",
          "withoutMetadata": "463674d7343cca13f920d93747488f8a1d0c169cd01ba214f3e6bf8b5889b819",
          "linkedWithoutMetadata": "463674d7343cca13f920d93747488f8a1d0c169cd01ba214f3e6bf8b5889b819"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Allo.sol:Allo": {
        "src": "contracts/core/Allo.sol:89",
        "version": {
          "withMetadata": "af3098ea76d40f150241a27de0f677593e796b3422f10dc2c8ec3b9e83fa5296",
          "withoutMetadata": "af3098ea76d40f150241a27de0f677593e796b3422f10dc2c8ec3b9e83fa5296",
          "linkedWithoutMetadata": "af3098ea76d40f150241a27de0f677593e796b3422f10dc2c8ec3b9e83fa5296"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "solady/src/auth/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IAllo.sol:IAllo"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "getFeeDenominator()",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "isCloneableStrategy(address)",
          "getPool(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)21517_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "percentFee",
              "offset": 0,
              "slot": "52",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:114"
            },
            {
              "label": "baseFee",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:129"
            },
            {
              "label": "_poolIndex",
              "offset": 0,
              "slot": "54",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "55",
              "type": "t_address_payable",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "56",
              "type": "t_contract(IRegistry)4373",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:133"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "57",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:134"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "58",
              "type": "t_mapping(t_uint256,t_struct(Pool)3892_storage)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:135"
            },
            {
              "label": "cloneableStrategies",
              "offset": 0,
              "slot": "59",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4373": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)4540": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)21517_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)3892_storage)": {
              "label": "mapping(uint256 => struct IAllo.Pool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Pool)3892_storage": {
              "label": "struct IAllo.Pool",
              "members": [
                {
                  "label": "profileId",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "strategy",
                  "type": "t_contract(IStrategy)4540",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "managerRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)21517_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Anchor.sol:Anchor": {
        "src": "contracts/core/Anchor.sol:89",
        "version": {
          "withMetadata": "3789c106779f82ee06c6065520f189ee829af51623f4170b73dd8b80beed3e7f",
          "withoutMetadata": "3789c106779f82ee06c6065520f189ee829af51623f4170b73dd8b80beed3e7f",
          "linkedWithoutMetadata": "3789c106779f82ee06c6065520f189ee829af51623f4170b73dd8b80beed3e7f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32,address)",
          "execute(address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Anchor",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "profileId",
            "src": "contracts/core/Anchor.sol:89"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Registry.sol:Registry": {
        "src": "contracts/core/Registry.sol:102",
        "version": {
          "withMetadata": "af12ec36a226c5175b3c77bb397628420105c37b5e6ffdf4c82699ef097a4951",
          "withoutMetadata": "af12ec36a226c5175b3c77bb397628420105c37b5e6ffdf4c82699ef097a4951",
          "linkedWithoutMetadata": "af12ec36a226c5175b3c77bb397628420105c37b5e6ffdf4c82699ef097a4951"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "contracts/core/libraries/Native.sol:Native",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "contracts/core/interfaces/IRegistry.sol:IRegistry"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)21517_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "anchorToProfileId",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:108"
            },
            {
              "label": "profilesById",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_struct(Profile)4200_storage)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:110"
            },
            {
              "label": "profileIdToPendingOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:112"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Profile)4200_storage)": {
              "label": "mapping(bytes32 => struct IRegistry.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)21517_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Profile)4200_storage": {
              "label": "struct IRegistry.Profile",
              "members": [
                {
                  "label": "id",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "anchor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)21517_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IAllo.sol:IAllo": {
        "src": "contracts/core/interfaces/IAllo.sol:97",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "isCloneableStrategy(address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "getPool(uint256)",
          "getFeeDenominator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IRegistry.sol:IRegistry": {
        "src": "contracts/core/interfaces/IRegistry.sol:92",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/core/interfaces/IStrategy.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "isValidAllocator(address)",
          "isPoolActive()",
          "getPoolAmount()",
          "increasePoolAmount(uint256)",
          "getRecipientStatus(address)",
          "getPayouts(address[],bytes[])",
          "initialize(uint256,bytes)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Clone.sol:Clone": {
        "src": "contracts/core/libraries/Clone.sol:37",
        "version": {
          "withMetadata": "1e7f038e220b429e247e6367be2821b3f243fe7bae75ba54e3f6d98606b3b6c6",
          "withoutMetadata": "1e7f038e220b429e247e6367be2821b3f243fe7bae75ba54e3f6d98606b3b6c6",
          "linkedWithoutMetadata": "1e7f038e220b429e247e6367be2821b3f243fe7bae75ba54e3f6d98606b3b6c6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Errors.sol:Errors": {
        "src": "contracts/core/libraries/Errors.sol:109",
        "version": {
          "withMetadata": "54ea89a00b80cf537696d4f600c9578ccad0b3e348135384476789c7961cf20d",
          "withoutMetadata": "54ea89a00b80cf537696d4f600c9578ccad0b3e348135384476789c7961cf20d",
          "linkedWithoutMetadata": "54ea89a00b80cf537696d4f600c9578ccad0b3e348135384476789c7961cf20d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Native.sol:Native": {
        "src": "contracts/core/libraries/Native.sol:26",
        "version": {
          "withMetadata": "d4114bda1732708162778bdad1b2c0fbee481e5ebb4129339f9507f38ede2b29",
          "withoutMetadata": "d4114bda1732708162778bdad1b2c0fbee481e5ebb4129339f9507f38ede2b29",
          "linkedWithoutMetadata": "d4114bda1732708162778bdad1b2c0fbee481e5ebb4129339f9507f38ede2b29"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Transfer.sol:Transfer": {
        "src": "contracts/core/libraries/Transfer.sol:97",
        "version": {
          "withMetadata": "23744585012628e89ea538ba3b43cac621f42c6fb2cb3e90fc9b9a7d85ada95d",
          "withoutMetadata": "23744585012628e89ea538ba3b43cac621f42c6fb2cb3e90fc9b9a7d85ada95d",
          "linkedWithoutMetadata": "23744585012628e89ea538ba3b43cac621f42c6fb2cb3e90fc9b9a7d85ada95d"
        },
        "inherit": [
          "contracts/core/libraries/Native.sol:Native"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/factory/ContractFactory.sol:ContractFactory": {
        "src": "contracts/factory/ContractFactory.sol:107",
        "version": {
          "withMetadata": "410dba1f5357bdec1ae1d7e000f861b03119b22745a1a34dfa752371ff66cfc2",
          "withoutMetadata": "410dba1f5357bdec1ae1d7e000f861b03119b22745a1a34dfa752371ff66cfc2",
          "linkedWithoutMetadata": "410dba1f5357bdec1ae1d7e000f861b03119b22745a1a34dfa752371ff66cfc2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "deploy(string,string,bytes)",
          "setDeployer(address,bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ContractFactory",
            "src": "contracts/factory/ContractFactory.sol:119"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "usedSalts",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            },
            {
              "label": "isDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/BaseStrategy.sol:BaseStrategy": {
        "src": "contracts/strategies/BaseStrategy.sol:111",
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "getPoolAmount()",
          "isPoolActive()",
          "getRecipientStatus(address)",
          "increasePoolAmount(uint256)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)",
          "getPayouts(address[],bytes[])",
          "isValidAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseStrategy",
            "src": "contracts/strategies/BaseStrategy.sol:129"
          },
          {
            "kind": "state-variable-immutable",
            "name": "allo",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          },
          {
            "kind": "state-variable-immutable",
            "name": "strategyId",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:DirectGrantsSimpleStrategy": {
        "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:110",
        "version": {
          "withMetadata": "af03321b047a81c2a32a731a13f0d3f370cf7e2592030e860944fce837c306ff",
          "withoutMetadata": "af03321b047a81c2a32a731a13f0d3f370cf7e2592030e860944fce837c306ff",
          "linkedWithoutMetadata": "af03321b047a81c2a32a731a13f0d3f370cf7e2592030e860944fce837c306ff"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getMilestoneStatus(address,uint256)",
          "getMilestones(address)",
          "setMilestones(address,struct DirectGrantsSimpleStrategy.Milestone[])",
          "reviewSetMilestones(address,uint8)",
          "submitMilestone(address,uint256,(uint256,string))",
          "rejectMilestone(address,uint256)",
          "setRecipientStatusToInReview(address[])",
          "setPoolActive(bool)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DirectGrantsSimpleStrategy",
            "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:192"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:161"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:163"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:164"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(IRegistry)4373",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:167"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:168"
            },
            {
              "label": "_acceptedRecipientIds",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:172"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)5657_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:177"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Milestone)5666_storage)dyn_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:179"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:184"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)5666_storage)dyn_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4373": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4386": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(Milestone)5666_storage)dyn_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Milestone[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5657_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)5666_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)5657_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "milestonesReviewStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:DonationVotingCustomRegistryStrategy": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52",
        "version": {
          "withMetadata": "78209bc161322a6ac83ac3a0640839cdf4f0d8c1134e63b49c3e58a8082a3573",
          "withoutMetadata": "78209bc161322a6ac83ac3a0640839cdf4f0d8c1134e63b49c3e58a8082a3573",
          "linkedWithoutMetadata": "78209bc161322a6ac83ac3a0640839cdf4f0d8c1134e63b49c3e58a8082a3573"
        },
        "inherit": [
          "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingCustomRegistryStrategy",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4373",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:162"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7271_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:165"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4391_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:167"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:172"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(SimpleProjectRegistry)7242",
              "contract": "DonationVotingCustomRegistryStrategy",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4373": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(SimpleProjectRegistry)7242": {
              "label": "contract SimpleProjectRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4386": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4391_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7271_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4391_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7271_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:SimpleProjectRegistry": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:26",
        "version": {
          "withMetadata": "37131ba3ab897979f2f7a3c17a6eb21577441f4b6783a89630900a3751551e86",
          "withoutMetadata": "37131ba3ab897979f2f7a3c17a6eb21577441f4b6783a89630900a3751551e86",
          "linkedWithoutMetadata": "37131ba3ab897979f2f7a3c17a6eb21577441f4b6783a89630900a3751551e86"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addProject(address)",
          "addProjects(address[])",
          "removeProject(address)",
          "removeProjects(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleProjectRegistry",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "projects",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleProjectRegistry",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy": {
        "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:100",
        "version": {
          "withMetadata": "4d849839d7beb08632c46a8daa6d10f0f78bbfb901fd21013b0a1126121f3c14",
          "withoutMetadata": "4d849839d7beb08632c46a8daa6d10f0f78bbfb901fd21013b0a1126121f3c14",
          "linkedWithoutMetadata": "4d849839d7beb08632c46a8daa6d10f0f78bbfb901fd21013b0a1126121f3c14"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "setPayout(address[],uint256[])",
          "claim(struct DonationVotingStrategy.Claim[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingStrategy",
            "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:198"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4373",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:162"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7271_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:165"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4391_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:167"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:172"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4373": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4386": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4391_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7271_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4391_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7271_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:ProportionalPayoutStrategy": {
        "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:113",
        "version": {
          "withMetadata": "9eb5b8b40647752a501dd522787c8e85319315f82605619b3d4c32974f6ec43a",
          "withoutMetadata": "9eb5b8b40647752a501dd522787c8e85319315f82605619b3d4c32974f6ec43a",
          "linkedWithoutMetadata": "9eb5b8b40647752a501dd522787c8e85319315f82605619b3d4c32974f6ec43a"
        },
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "setAllocationTime(uint64,uint64)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProportionalPayoutStrategy",
            "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:163"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Recipient)8683_storage)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:151"
            },
            {
              "label": "hasAllocated",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:153"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ERC721)34004",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "maxRecipientsAllowed",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:155"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:157"
            },
            {
              "label": "totalAllocations",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:159"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:161"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)34004": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4386": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)8683_storage)": {
              "label": "mapping(address => struct ProportionalPayoutStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)8683_storage": {
              "label": "struct ProportionalPayoutStrategy.Recipient",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:QVGovernanceERC20Votes": {
        "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:89",
        "version": {
          "withMetadata": "0c18472bcbbc3ffd1575f5e78400e549078b29426ce4f26ff3542633a6f79684",
          "withoutMetadata": "0c18472bcbbc3ffd1575f5e78400e549078b29426ce4f26ff3542633a6f79684",
          "linkedWithoutMetadata": "0c18472bcbbc3ffd1575f5e78400e549078b29426ce4f26ff3542633a6f79684"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVGovernanceERC20Votes",
            "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:102"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4373",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17666_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:225"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17677_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:233"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4386,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:240"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:242"
            },
            {
              "label": "govToken",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IVotes)21964",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:96"
            },
            {
              "label": "timestamp",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:98"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4373": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IVotes)21964": {
              "label": "contract IVotes",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4386": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4386,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17677_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17666_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4386,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17677_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17666_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:HackathonQVStrategy": {
        "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:110",
        "version": {
          "withMetadata": "270448d405b84c91cc73a111ef2e3369659e1fd33b40dd8d64878eb17b1d163f",
          "withoutMetadata": "270448d405b84c91cc73a111ef2e3369659e1fd33b40dd8d64878eb17b1d163f",
          "linkedWithoutMetadata": "270448d405b84c91cc73a111ef2e3369659e1fd33b40dd8d64878eb17b1d163f"
        },
        "inherit": [
          "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver",
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllowedRecipientIds(address[],uint64,bytes)",
          "setPayoutPercentages(uint256[])",
          "getPayouts(address[],bytes[])",
          "getAttestation(bytes32)",
          "getSchema(bytes32)",
          "isPayable()",
          "isAttestationExpired(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HackathonQVStrategy",
            "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:148"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4373",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17666_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:225"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17677_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:233"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4386,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:240"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:242"
            },
            {
              "label": "_eas",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IEAS)20655",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            },
            {
              "label": "payoutPercentages",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:130"
            },
            {
              "label": "votesByRank",
              "offset": 0,
              "slot": "14",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:131"
            },
            {
              "label": "easInfo",
              "offset": 0,
              "slot": "15",
              "type": "t_struct(EASInfo)9587_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "20",
              "type": "t_contract(ERC721)34004",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:133"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:133"
            },
            {
              "label": "recipientIdToUID",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:135"
            },
            {
              "label": "recipientIdToIndex",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:136"
            },
            {
              "label": "indexToRecipientId",
              "offset": 0,
              "slot": "25",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:143"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ERC721)34004": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IEAS)20655": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4373": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(ISchemaRegistry)20700": {
              "label": "contract ISchemaRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4386": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4386,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17677_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17666_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4386,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17677_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(EASInfo)9587_storage": {
              "label": "struct HackathonQVStrategy.EASInfo",
              "members": [
                {
                  "label": "eas",
                  "type": "t_contract(IEAS)20655",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "schemaRegistry",
                  "type": "t_contract(ISchemaRegistry)20700",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "schemaUID",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "schema",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "revocable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17666_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver": {
        "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:19",
        "inherit": [
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver"
        ],
        "libraries": [],
        "methods": [
          "isPayable()",
          "()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_eas",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IEAS)20655",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            }
          ],
          "types": {
            "t_contract(IEAS)20655": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:QVImpactStreamStrategy": {
        "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:89",
        "version": {
          "withMetadata": "092b610e22aa06b22e21a19e81a2a2fb7f6e1a49a6fec97addce077926dd12ae",
          "withoutMetadata": "092b610e22aa06b22e21a19e81a2a2fb7f6e1a49a6fec97addce077926dd12ae",
          "linkedWithoutMetadata": "092b610e22aa06b22e21a19e81a2a2fb7f6e1a49a6fec97addce077926dd12ae"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "updatePoolTimestamps(uint64,uint64)",
          "batchAddAllocator(address[])",
          "addAllocator(address)",
          "batchRemoveAllocator(address[])",
          "removeAllocator(address)",
          "setPayouts(struct QVImpactStreamStrategy.Payout[])",
          "getRecipient(address)",
          "getVoiceCreditsCastByAllocator(address)",
          "getVoiceCreditsCastByAllocatorToRecipient(address,address)",
          "getVotesCastByAllocatorToRecipient(address,address)",
          "recoverFunds(address,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVImpactStreamStrategy",
            "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:218"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "3",
              "type": "t_uint64",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:157"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "3",
              "type": "t_uint64",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:158"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IRegistry)4373",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:161"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:163"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:165"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)11032_storage)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:168"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)11043_storage)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:173"
            },
            {
              "label": "payouts",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:178"
            },
            {
              "label": "payoutSet",
              "offset": 0,
              "slot": "10",
              "type": "t_bool",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:179"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4373": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4386": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)11043_storage)": {
              "label": "mapping(address => struct QVImpactStreamStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)11032_storage)": {
              "label": "mapping(address => struct QVImpactStreamStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)11043_storage": {
              "label": "struct QVImpactStreamStrategy.Allocator",
              "members": [
                {
                  "label": "usedVoiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)11032_storage": {
              "label": "struct QVImpactStreamStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "requestedAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:QVNftTieredStrategy": {
        "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:94",
        "version": {
          "withMetadata": "8d1908860be4ccdcad1667407d303b01e9722649cb3e40bf33453cc33924118c",
          "withoutMetadata": "8d1908860be4ccdcad1667407d303b01e9722649cb3e40bf33453cc33924118c",
          "linkedWithoutMetadata": "8d1908860be4ccdcad1667407d303b01e9722649cb3e40bf33453cc33924118c"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVNftTieredStrategy",
            "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4373",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17666_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:225"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17677_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:233"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4386,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:240"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:242"
            },
            {
              "label": "nfts",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_contract(ERC721)34004)dyn_storage",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:111"
            },
            {
              "label": "maxVoiceCreditsPerNft",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_contract(ERC721)34004,t_uint256)",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:113"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_contract(ERC721)34004,t_mapping(t_uint256,t_uint256))",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:115"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(ERC721)34004)dyn_storage": {
              "label": "contract ERC721[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)34004": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4373": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4386": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4386,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17677_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17666_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)34004,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(contract ERC721 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)34004,t_uint256)": {
              "label": "mapping(contract ERC721 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4386,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17677_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17666_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:LockupDynamicStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:16",
        "version": {
          "withMetadata": "255c88bd8b1722313781a474ec38042f88c16c90a68a3401a1a394d21e5f4968",
          "withoutMetadata": "255c88bd8b1722313781a474ec38042f88c16c90a68a3401a1a394d21e5f4968",
          "linkedWithoutMetadata": "255c88bd8b1722313781a474ec38042f88c16c90a68a3401a1a394d21e5f4968"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientSegments(address,struct LockupDynamic.SegmentWithDelta[])",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupDynamicStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:42"
            },
            {
              "label": "lockupDynamic",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupDynamic)32415",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)32535_storage",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)12548_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(SegmentWithDelta)32619_storage)dyn_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupDynamic)32415": {
              "label": "contract ISablierV2LockupDynamic",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4386": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12548_storage)": {
              "label": "mapping(address => struct LockupDynamicStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)32535_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)31776",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12548_storage": {
              "label": "struct LockupDynamicStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "segments",
                  "type": "t_array(t_struct(SegmentWithDelta)32619_storage)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(SegmentWithDelta)32619_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exponent",
                  "type": "t_userDefinedValueType(UD2x18)29972",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "delta",
                  "type": "t_uint40",
                  "offset": 24,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD2x18)29972": {
              "label": "UD2x18",
              "numberOfBytes": "8",
              "underlying": "t_uint64"
            },
            "t_userDefinedValueType(UD60x18)31776": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:LockupLinearStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:16",
        "version": {
          "withMetadata": "3b385f8aa25f59fa571770976ad95fa7d5f83c5acb92f341be1de22bc7db5d3e",
          "withoutMetadata": "3b385f8aa25f59fa571770976ad95fa7d5f83c5acb92f341be1de22bc7db5d3e",
          "linkedWithoutMetadata": "3b385f8aa25f59fa571770976ad95fa7d5f83c5acb92f341be1de22bc7db5d3e"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientDurations(address,(uint40,uint40))",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupLinearStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:42"
            },
            {
              "label": "lockupLinear",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupLinear)32504",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)32535_storage",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)13730_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupLinear)32504": {
              "label": "contract ISablierV2LockupLinear",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4386": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)13730_storage)": {
              "label": "mapping(address => struct LockupLinearStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)32535_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)31776",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Durations)32687_storage": {
              "label": "struct LockupLinear.Durations",
              "members": [
                {
                  "label": "cliff",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "total",
                  "type": "t_uint40",
                  "offset": 5,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)13730_storage": {
              "label": "struct LockupLinearStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durations",
                  "type": "t_struct(Durations)32687_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD60x18)31776": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:NFT": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:8",
        "version": {
          "withMetadata": "d43e2e235346e010a3fb4733092452f46c7010ea4494431486db0e85c23a2593",
          "withoutMetadata": "d43e2e235346e010a3fb4733092452f46c7010ea4494431486db0e85c23a2593",
          "linkedWithoutMetadata": "d43e2e235346e010a3fb4733092452f46c7010ea4494431486db0e85c23a2593"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable",
          "solady/src/tokens/ERC721.sol:ERC721"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)",
          "name()",
          "symbol()",
          "mintTo(address)",
          "tokenURI(uint256)",
          "withdrawPayments(address payable)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFT",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTokenId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:16"
            },
            {
              "label": "MINT_PRICE",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:17"
            },
            {
              "label": "__name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:20"
            },
            {
              "label": "__symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:NFTFactory": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:6",
        "version": {
          "withMetadata": "20b177c67a4358d25a721181bb8a3fde90115bd4dc6340926522ef9ea0b66e92",
          "withoutMetadata": "20b177c67a4358d25a721181bb8a3fde90115bd4dc6340926522ef9ea0b66e92",
          "linkedWithoutMetadata": "20b177c67a4358d25a721181bb8a3fde90115bd4dc6340926522ef9ea0b66e92"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createNFTContract(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isNFTContract",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NFTFactory",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:WrappedVotingNftMintStrategy": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:101",
        "version": {
          "withMetadata": "a7b73b9f436064df04f11084779ee812475ce10e84794b80c1b95f7cac589aeb",
          "withoutMetadata": "a7b73b9f436064df04f11084779ee812475ce10e84794b80c1b95f7cac589aeb",
          "linkedWithoutMetadata": "a7b73b9f436064df04f11084779ee812475ce10e84794b80c1b95f7cac589aeb"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllocationTimes(uint64,uint64)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrappedVotingNftMintStrategy",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:147"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "nftFactory",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(NFTFactory)14957",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationStartTime",
              "offset": 20,
              "slot": "4",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "currentWinner",
              "offset": 8,
              "slot": "5",
              "type": "t_address",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:137"
            },
            {
              "label": "allocations",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:138"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(NFTFactory)14957": {
              "label": "contract NFTFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:99",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(struct DonationVotingMerkleDistributionBaseStrategy.ApplicationStatus[],uint256)",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(address)",
          "updateDistribution(bytes32,(uint256,string))",
          "isDistributionSet()",
          "hasBeenDistributed(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionBaseStrategy",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:286"
          },
          {
            "kind": "state-variable-assignment",
            "name": "recipientsCounter",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
          },
          {
            "kind": "state-variable-immutable",
            "name": "PERMIT2",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:230"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4666_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:208"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4373",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)15538_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4373": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)15538_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)15538_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:DonationVotingMerkleDistributionDirectTransferStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:82",
        "version": {
          "withMetadata": "ec806b0022f003159a98c3613f47efd79ee3843deb4bda409d1a6cd98cdaee05",
          "withoutMetadata": "ec806b0022f003159a98c3613f47efd79ee3843deb4bda409d1a6cd98cdaee05",
          "linkedWithoutMetadata": "ec806b0022f003159a98c3613f47efd79ee3843deb4bda409d1a6cd98cdaee05"
        },
        "inherit": [
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionDirectTransferStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4666_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:208"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4373",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)15538_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4373": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)15538_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)15538_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:DonationVotingMerkleDistributionVaultStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:94",
        "version": {
          "withMetadata": "5b9a233f0fe373fc22e41c8088c0f7ffe6f1bfc8b84806416a9aa8bb2c10a770",
          "withoutMetadata": "5b9a233f0fe373fc22e41c8088c0f7ffe6f1bfc8b84806416a9aa8bb2c10a770",
          "linkedWithoutMetadata": "5b9a233f0fe373fc22e41c8088c0f7ffe6f1bfc8b84806416a9aa8bb2c10a770"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)",
          "claim(struct DonationVotingMerkleDistributionVaultStrategy.Claim[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionVaultStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:129"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4666_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:208"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4373",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)15538_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "16",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "16",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "18",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "67",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:117"
            },
            {
              "label": "totalClaimableAmount",
              "offset": 0,
              "slot": "68",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:120"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4373": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)15538_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)15538_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy": {
        "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:89",
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVBaseStrategy",
            "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:264"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4373",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17666_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:225"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17677_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:233"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4386,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:240"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:242"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4373": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4386": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4386,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17677_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17666_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4386,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17677_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17666_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-simple/QVSimpleStrategy.sol:QVSimpleStrategy": {
        "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:90",
        "version": {
          "withMetadata": "128adbb9357bb50cbf478727ed6febc885390618eb863cbcf2f0cad1ff1906b0",
          "withoutMetadata": "128adbb9357bb50cbf478727ed6febc885390618eb863cbcf2f0cad1ff1906b0",
          "linkedWithoutMetadata": "128adbb9357bb50cbf478727ed6febc885390618eb863cbcf2f0cad1ff1906b0"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "addAllocator(address)",
          "removeAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVSimpleStrategy",
            "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4373",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17666_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:225"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17677_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:233"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4386,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:240"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:242"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:108"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:111"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4373": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4386": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4386,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17677_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17666_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4386,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17677_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17666_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:RFPCommitteeStrategy": {
        "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:84",
        "version": {
          "withMetadata": "6627921d5d4e04779ec9c0051cc60e6c86df9735553dc1216432ab2019df6e21",
          "withoutMetadata": "6627921d5d4e04779ec9c0051cc60e6c86df9735553dc1216432ab2019df6e21",
          "linkedWithoutMetadata": "6627921d5d4e04779ec9c0051cc60e6c86df9735553dc1216432ab2019df6e21"
        },
        "inherit": [
          "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPCommitteeStrategy",
            "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:124"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:173"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:174"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4373",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:184"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:189"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)19278_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)19269_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:192"
            },
            {
              "label": "voteThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:104"
            },
            {
              "label": "votedFor",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:109"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:112"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)19278_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4373": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4386": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)19269_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)19278_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)19269_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy": {
        "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:105",
        "version": {
          "withMetadata": "d42ce966b01c1c9a383686477349da04e76e0746f44157880dbe45093ec723b2",
          "withoutMetadata": "d42ce966b01c1c9a383686477349da04e76e0746f44157880dbe45093ec723b2",
          "linkedWithoutMetadata": "d42ce966b01c1c9a383686477349da04e76e0746f44157880dbe45093ec723b2"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getPayouts(address[],bytes[])",
          "getMilestone(uint256)",
          "getMilestoneStatus(uint256)",
          "setPoolActive(bool)",
          "setMilestones(struct RFPSimpleStrategy.Milestone[])",
          "submitUpcomingMilestone((uint256,string))",
          "increaseMaxBid(uint256)",
          "rejectMilestone(uint256)",
          "withdraw(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPSimpleStrategy",
            "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:200"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:173"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:174"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4373",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:184"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:189"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)19278_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)19269_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:192"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)19278_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4373": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4386": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Recipient)19269_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4666_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)19278_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4666_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)19269_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4386",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/IEAS.sol:IEAS": {
        "src": "lib/eas-contracts/contracts/IEAS.sol:82",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSchemaRegistry()",
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))",
          "multiAttest(struct MultiAttestationRequest[])",
          "multiAttestByDelegation(struct MultiDelegatedAttestationRequest[])",
          "revoke((bytes32,(bytes32,uint256)))",
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))",
          "multiRevoke(struct MultiRevocationRequest[])",
          "multiRevokeByDelegation(struct MultiDelegatedRevocationRequest[])",
          "timestamp(bytes32)",
          "multiTimestamp(bytes32[])",
          "revokeOffchain(bytes32)",
          "multiRevokeOffchain(bytes32[])",
          "getAttestation(bytes32)",
          "isAttestationValid(bytes32)",
          "getTimestamp(bytes32)",
          "getRevokeOffchain(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol:ISchemaRegistry": {
        "src": "lib/eas-contracts/contracts/ISchemaRegistry.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "register(string,address,bool)",
          "getSchema(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver": {
        "src": "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:19",
        "version": {
          "withMetadata": "16aca102b3188924d895645b8c999f31833792c33a4395aec6f6ebabbfc7b99a",
          "withoutMetadata": "16aca102b3188924d895645b8c999f31833792c33a4395aec6f6ebabbfc7b99a",
          "linkedWithoutMetadata": "16aca102b3188924d895645b8c999f31833792c33a4395aec6f6ebabbfc7b99a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "3c0c4826323c77360dd305da59736ec01d22577f9a42bcb4feb875c3b2221ec5",
          "withoutMetadata": "3c0c4826323c77360dd305da59736ec01d22577f9a42bcb4feb875c3b2221ec5",
          "linkedWithoutMetadata": "3c0c4826323c77360dd305da59736ec01d22577f9a42bcb4feb875c3b2221ec5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:50",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)21517_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)21517_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)21517_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "47dcf0f2d2ca60dbb3eec7635d94d7721c9ba90f158bf66e75c32fe1c23adae8",
          "withoutMetadata": "47dcf0f2d2ca60dbb3eec7635d94d7721c9ba90f158bf66e75c32fe1c23adae8",
          "linkedWithoutMetadata": "47dcf0f2d2ca60dbb3eec7635d94d7721c9ba90f158bf66e75c32fe1c23adae8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "1c7a5a23b02b27444d9440630b1591bc333b2510dabe7de7a1ac6840c586f2d4",
          "withoutMetadata": "1c7a5a23b02b27444d9440630b1591bc333b2510dabe7de7a1ac6840c586f2d4",
          "linkedWithoutMetadata": "1c7a5a23b02b27444d9440630b1591bc333b2510dabe7de7a1ac6840c586f2d4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "63c5efbde91b8ef10232b3f73c1724842d309a2fecfa59fefe4b681c1041e326",
          "withoutMetadata": "63c5efbde91b8ef10232b3f73c1724842d309a2fecfa59fefe4b681c1041e326",
          "linkedWithoutMetadata": "63c5efbde91b8ef10232b3f73c1724842d309a2fecfa59fefe4b681c1041e326"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "d842cf6a6d0d5d462d1705a61121fd0ff5090b87f407b909ca1b6270e02a3ddc",
          "withoutMetadata": "d842cf6a6d0d5d462d1705a61121fd0ff5090b87f407b909ca1b6270e02a3ddc",
          "linkedWithoutMetadata": "d842cf6a6d0d5d462d1705a61121fd0ff5090b87f407b909ca1b6270e02a3ddc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "b5fef4a2f62bb4bc362c5ef9fd425093f6b3a3fad8465c00b0744b8a2b0b53b5",
          "withoutMetadata": "b5fef4a2f62bb4bc362c5ef9fd425093f6b3a3fad8465c00b0744b8a2b0b53b5",
          "linkedWithoutMetadata": "b5fef4a2f62bb4bc362c5ef9fd425093f6b3a3fad8465c00b0744b8a2b0b53b5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "4beeaa091db0cbbb0f5a278e7ea9597a214306d94a7707b57e681cb0ff0ecdc4",
          "withoutMetadata": "4beeaa091db0cbbb0f5a278e7ea9597a214306d94a7707b57e681cb0ff0ecdc4",
          "linkedWithoutMetadata": "4beeaa091db0cbbb0f5a278e7ea9597a214306d94a7707b57e681cb0ff0ecdc4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/IEIP712.sol:IEIP712": {
        "src": "lib/permit2/src/interfaces/IEIP712.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/ISignatureTransfer.sol:ISignatureTransfer": {
        "src": "lib/permit2/src/interfaces/ISignatureTransfer.sol:9",
        "inherit": [
          "lib/permit2/src/interfaces/IEIP712.sol:IEIP712"
        ],
        "libraries": [],
        "methods": [
          "nonceBitmap(address,uint256)",
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)",
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)",
          "permitTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes)",
          "permitWitnessTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes32,string,bytes)",
          "invalidateUnorderedNonces(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable": {
        "src": "lib/v2-core/src/interfaces/IAdminable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "transferAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Base.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "comptroller()",
          "protocolRevenues(address)",
          "claimProtocolRevenues(address)",
          "setComptroller(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:ISablierV2Comptroller": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "flashFee()",
          "isFlashAsset(address)",
          "protocolFees(address)",
          "setFlashFee(uint256)",
          "setProtocolFee(address,uint256)",
          "toggleFlashAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:13",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getAsset(uint256)",
          "getDepositedAmount(uint256)",
          "getEndTime(uint256)",
          "getRecipient(uint256)",
          "getRefundedAmount(uint256)",
          "getSender(uint256)",
          "getStartTime(uint256)",
          "getWithdrawnAmount(uint256)",
          "isCancelable(uint256)",
          "isCold(uint256)",
          "isDepleted(uint256)",
          "isStream(uint256)",
          "isWarm(uint256)",
          "nextStreamId()",
          "refundableAmountOf(uint256)",
          "statusOf(uint256)",
          "streamedAmountOf(uint256)",
          "wasCanceled(uint256)",
          "withdrawableAmountOf(uint256)",
          "burn(uint256)",
          "cancel(uint256)",
          "cancelMultiple(uint256[])",
          "renounce(uint256)",
          "setNFTDescriptor(address)",
          "withdraw(uint256,address,uint128)",
          "withdrawMax(uint256,address)",
          "withdrawMaxAndTransfer(uint256,address)",
          "withdrawMultiple(uint256[],address,uint128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:ISablierV2LockupDynamic": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_SEGMENT_COUNT()",
          "getRange(uint256)",
          "getSegments(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDeltas((address,bool,address,uint128,address,(address,uint256),struct LockupDynamic.SegmentWithDelta[]))",
          "createWithMilestones((address,uint40,bool,address,uint128,address,(address,uint256),struct LockupDynamic.Segment[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:ISablierV2LockupLinear": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getCliffTime(uint256)",
          "getRange(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))",
          "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:ISablierV2NFTDescriptor": {
        "src": "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:Lockup": {
        "src": "lib/v2-core/src/types/DataTypes.sol:29",
        "version": {
          "withMetadata": "b1679abcdcb36ad8752d9f850cdd405591ba03b91b3b79aa7c8ae51f2b342fa5",
          "withoutMetadata": "b1679abcdcb36ad8752d9f850cdd405591ba03b91b3b79aa7c8ae51f2b342fa5",
          "linkedWithoutMetadata": "b1679abcdcb36ad8752d9f850cdd405591ba03b91b3b79aa7c8ae51f2b342fa5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupDynamic": {
        "src": "lib/v2-core/src/types/DataTypes.sol:72",
        "version": {
          "withMetadata": "c69f3433cd82cac9b486ef847b42f99d69d282015f66893e51b99f9186c8a562",
          "withoutMetadata": "c69f3433cd82cac9b486ef847b42f99d69d282015f66893e51b99f9186c8a562",
          "linkedWithoutMetadata": "c69f3433cd82cac9b486ef847b42f99d69d282015f66893e51b99f9186c8a562"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupLinear": {
        "src": "lib/v2-core/src/types/DataTypes.sol:180",
        "version": {
          "withMetadata": "d05cadcf1c1d231dbc6981492324dbc3edf5b27eee213828911a66e6d510ad13",
          "withoutMetadata": "d05cadcf1c1d231dbc6981492324dbc3edf5b27eee213828911a66e6d510ad13",
          "linkedWithoutMetadata": "d05cadcf1c1d231dbc6981492324dbc3edf5b27eee213828911a66e6d510ad13"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/auth/Ownable.sol:Ownable": {
        "src": "solady/src/auth/Ownable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "renounceOwnership()",
          "requestOwnershipHandover()",
          "cancelOwnershipHandover()",
          "completeOwnershipHandover(address)",
          "owner()",
          "ownershipHandoverExpiresAt(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC20.sol:ERC20": {
        "src": "solady/src/tokens/ERC20.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC721.sol:ERC721": {
        "src": "solady/src/tokens/ERC721.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "balanceOf(address)",
          "getApproved(uint256)",
          "approve(address,uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/CREATE3.sol:CREATE3": {
        "src": "solady/src/utils/CREATE3.sol:8",
        "version": {
          "withMetadata": "c60aec5502c3b7bd2266eafbf486a181bb4f5b25882663034dfd4ff03db3d1e2",
          "withoutMetadata": "c60aec5502c3b7bd2266eafbf486a181bb4f5b25882663034dfd4ff03db3d1e2",
          "linkedWithoutMetadata": "c60aec5502c3b7bd2266eafbf486a181bb4f5b25882663034dfd4ff03db3d1e2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/SafeTransferLib.sol:SafeTransferLib": {
        "src": "solady/src/utils/SafeTransferLib.sol:12",
        "version": {
          "withMetadata": "1462066635a88ae4f26510a89dd4a557c0201eb72279ec344851d32b38d3d073",
          "withoutMetadata": "1462066635a88ae4f26510a89dd4a557c0201eb72279ec344851d32b38d3d073",
          "linkedWithoutMetadata": "1462066635a88ae4f26510a89dd4a557c0201eb72279ec344851d32b38d3d073"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "500871cda4efc3ab71374560d80c6fc49081a7103fe0f45d0fc4e27ae95e4863",
          "withoutMetadata": "500871cda4efc3ab71374560d80c6fc49081a7103fe0f45d0fc4e27ae95e4863",
          "linkedWithoutMetadata": "500871cda4efc3ab71374560d80c6fc49081a7103fe0f45d0fc4e27ae95e4863"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "7bd8b91a39d887f92552b84a33d492a58302834b0963dc98484dfc05b7d54865",
          "withoutMetadata": "7bd8b91a39d887f92552b84a33d492a58302834b0963dc98484dfc05b7d54865",
          "linkedWithoutMetadata": "7bd8b91a39d887f92552b84a33d492a58302834b0963dc98484dfc05b7d54865"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "6af14d6c6e72d5133daa4399417702ef0772e01506b94e532c8ace4369abe2d3",
          "withoutMetadata": "6af14d6c6e72d5133daa4399417702ef0772e01506b94e532c8ace4369abe2d3",
          "linkedWithoutMetadata": "6af14d6c6e72d5133daa4399417702ef0772e01506b94e532c8ace4369abe2d3"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "0d2e7ebd70ac9e80067ec08840dbd892f3b9643a6aeed10be9cf74ea094945b9",
          "withoutMetadata": "0d2e7ebd70ac9e80067ec08840dbd892f3b9643a6aeed10be9cf74ea094945b9",
          "linkedWithoutMetadata": "0d2e7ebd70ac9e80067ec08840dbd892f3b9643a6aeed10be9cf74ea094945b9"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "7de6a850f7b320ac83a347f9960eaa81c9590ef1ce0b379aa28378097981751d",
          "withoutMetadata": "7de6a850f7b320ac83a347f9960eaa81c9590ef1ce0b379aa28378097981751d",
          "linkedWithoutMetadata": "7de6a850f7b320ac83a347f9960eaa81c9590ef1ce0b379aa28378097981751d"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "76ed403b9b9e20f25a391170bf252d885dda0954510fd10e89d73d515a2c6e45",
          "withoutMetadata": "76ed403b9b9e20f25a391170bf252d885dda0954510fd10e89d73d515a2c6e45",
          "linkedWithoutMetadata": "76ed403b9b9e20f25a391170bf252d885dda0954510fd10e89d73d515a2c6e45"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "3af35b3b1a0bbc3ef6615052390e4cd61853f0999ca00525a2a532d343b3cd98",
          "withoutMetadata": "3af35b3b1a0bbc3ef6615052390e4cd61853f0999ca00525a2a532d343b3cd98",
          "linkedWithoutMetadata": "3af35b3b1a0bbc3ef6615052390e4cd61853f0999ca00525a2a532d343b3cd98"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Allo.sol:Allo": {
        "src": "contracts/core/Allo.sol:89",
        "version": {
          "withMetadata": "12987158f3096980e597f4763b35f2419c19018444815359870809ada1d119f6",
          "withoutMetadata": "12987158f3096980e597f4763b35f2419c19018444815359870809ada1d119f6",
          "linkedWithoutMetadata": "12987158f3096980e597f4763b35f2419c19018444815359870809ada1d119f6"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "solady/src/auth/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IAllo.sol:IAllo"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "getFeeDenominator()",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "isCloneableStrategy(address)",
          "getPool(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "percentFee",
              "offset": 0,
              "slot": "52",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:114"
            },
            {
              "label": "baseFee",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:129"
            },
            {
              "label": "_poolIndex",
              "offset": 0,
              "slot": "54",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "55",
              "type": "t_address_payable",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "56",
              "type": "t_contract(IRegistry)4234",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:133"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "57",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:134"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "58",
              "type": "t_mapping(t_uint256,t_struct(Pool)3753_storage)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:135"
            },
            {
              "label": "cloneableStrategies",
              "offset": 0,
              "slot": "59",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)4405": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)3753_storage)": {
              "label": "mapping(uint256 => struct IAllo.Pool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Pool)3753_storage": {
              "label": "struct IAllo.Pool",
              "members": [
                {
                  "label": "profileId",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "strategy",
                  "type": "t_contract(IStrategy)4405",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "managerRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)19902_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Anchor.sol:Anchor": {
        "src": "contracts/core/Anchor.sol:89",
        "version": {
          "withMetadata": "15a4ee8e90908441027c647b7bc078a52eb248a0df4bcedd1c0c638700ed7fdf",
          "withoutMetadata": "15a4ee8e90908441027c647b7bc078a52eb248a0df4bcedd1c0c638700ed7fdf",
          "linkedWithoutMetadata": "15a4ee8e90908441027c647b7bc078a52eb248a0df4bcedd1c0c638700ed7fdf"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "execute(address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Anchor",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "profileId",
            "src": "contracts/core/Anchor.sol:89"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Registry.sol:Registry": {
        "src": "contracts/core/Registry.sol:103",
        "version": {
          "withMetadata": "4b4c01e68784e4e05a2c5b628fb8f11f9e09f7e33b409bf51bd1e8e9855d0a98",
          "withoutMetadata": "4b4c01e68784e4e05a2c5b628fb8f11f9e09f7e33b409bf51bd1e8e9855d0a98",
          "linkedWithoutMetadata": "4b4c01e68784e4e05a2c5b628fb8f11f9e09f7e33b409bf51bd1e8e9855d0a98"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "contracts/core/libraries/Native.sol:Native",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "contracts/core/interfaces/IRegistry.sol:IRegistry"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "anchorToProfileId",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:109"
            },
            {
              "label": "profilesById",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_struct(Profile)4061_storage)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:111"
            },
            {
              "label": "profileIdToPendingOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:113"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Profile)4061_storage)": {
              "label": "mapping(bytes32 => struct IRegistry.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Profile)4061_storage": {
              "label": "struct IRegistry.Profile",
              "members": [
                {
                  "label": "id",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "anchor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)19902_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IAllo.sol:IAllo": {
        "src": "contracts/core/interfaces/IAllo.sol:97",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "isCloneableStrategy(address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "getPool(uint256)",
          "getFeeDenominator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IRegistry.sol:IRegistry": {
        "src": "contracts/core/interfaces/IRegistry.sol:92",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/core/interfaces/IStrategy.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "isValidAllocator(address)",
          "isPoolActive()",
          "getPoolAmount()",
          "increasePoolAmount(uint256)",
          "getRecipientStatus(address)",
          "getPayouts(address[],bytes[])",
          "initialize(uint256,bytes)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Clone.sol:Clone": {
        "src": "contracts/core/libraries/Clone.sol:37",
        "version": {
          "withMetadata": "5795aa6657e26c82569315eff278c988d27d29a523766d1d6ea3e792eedc70e7",
          "withoutMetadata": "5795aa6657e26c82569315eff278c988d27d29a523766d1d6ea3e792eedc70e7",
          "linkedWithoutMetadata": "5795aa6657e26c82569315eff278c988d27d29a523766d1d6ea3e792eedc70e7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Errors.sol:Errors": {
        "src": "contracts/core/libraries/Errors.sol:109",
        "version": {
          "withMetadata": "846997888af43c66728e817a8a65457b9cc7f06480fb322f06ec26e3d1ac2bca",
          "withoutMetadata": "846997888af43c66728e817a8a65457b9cc7f06480fb322f06ec26e3d1ac2bca",
          "linkedWithoutMetadata": "846997888af43c66728e817a8a65457b9cc7f06480fb322f06ec26e3d1ac2bca"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Native.sol:Native": {
        "src": "contracts/core/libraries/Native.sol:26",
        "version": {
          "withMetadata": "2e65cc9bcd433c55d2ce8d6d35a6e70704df4ab3ec59ccb7fc3c1931898802d1",
          "withoutMetadata": "2e65cc9bcd433c55d2ce8d6d35a6e70704df4ab3ec59ccb7fc3c1931898802d1",
          "linkedWithoutMetadata": "2e65cc9bcd433c55d2ce8d6d35a6e70704df4ab3ec59ccb7fc3c1931898802d1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Transfer.sol:Transfer": {
        "src": "contracts/core/libraries/Transfer.sol:95",
        "version": {
          "withMetadata": "42e5426c31ef1796874d40e97a617376a864fc55d46d1cbbe7f274307718c087",
          "withoutMetadata": "42e5426c31ef1796874d40e97a617376a864fc55d46d1cbbe7f274307718c087",
          "linkedWithoutMetadata": "42e5426c31ef1796874d40e97a617376a864fc55d46d1cbbe7f274307718c087"
        },
        "inherit": [
          "contracts/core/libraries/Native.sol:Native"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/factory/ContractFactory.sol:ContractFactory": {
        "src": "contracts/factory/ContractFactory.sol:107",
        "version": {
          "withMetadata": "d7563a2a54b08751553517935a3e790d98a04b3ee9fbbdc17734ef68e3b1d115",
          "withoutMetadata": "d7563a2a54b08751553517935a3e790d98a04b3ee9fbbdc17734ef68e3b1d115",
          "linkedWithoutMetadata": "d7563a2a54b08751553517935a3e790d98a04b3ee9fbbdc17734ef68e3b1d115"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "deploy(string,string,bytes)",
          "setDeployer(address,bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ContractFactory",
            "src": "contracts/factory/ContractFactory.sol:119"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "usedSalts",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            },
            {
              "label": "isDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/BaseStrategy.sol:BaseStrategy": {
        "src": "contracts/strategies/BaseStrategy.sol:111",
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "getPoolAmount()",
          "isPoolActive()",
          "getRecipientStatus(address)",
          "increasePoolAmount(uint256)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)",
          "getPayouts(address[],bytes[])",
          "isValidAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseStrategy",
            "src": "contracts/strategies/BaseStrategy.sol:129"
          },
          {
            "kind": "state-variable-immutable",
            "name": "allo",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          },
          {
            "kind": "state-variable-immutable",
            "name": "strategyId",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:DirectGrantsSimpleStrategy": {
        "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:112",
        "version": {
          "withMetadata": "915df443a5dde6c8388acb8fcb955322f47ac6a93857468261ad94d76360a902",
          "withoutMetadata": "915df443a5dde6c8388acb8fcb955322f47ac6a93857468261ad94d76360a902",
          "linkedWithoutMetadata": "915df443a5dde6c8388acb8fcb955322f47ac6a93857468261ad94d76360a902"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getMilestoneStatus(address,uint256)",
          "getMilestones(address)",
          "setMilestones(address,struct DirectGrantsSimpleStrategy.Milestone[])",
          "reviewSetMilestones(address,uint8)",
          "submitMilestone(address,uint256,(uint256,string))",
          "rejectMilestone(address,uint256)",
          "setRecipientStatusToInReview(address[])",
          "setPoolActive(bool)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DirectGrantsSimpleStrategy",
            "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:191"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:161"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:162"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:164"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:166"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:167"
            },
            {
              "label": "_acceptedRecipientIds",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:172"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)5493_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:177"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Milestone)5502_storage)dyn_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:179"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:184"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)5502_storage)dyn_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(Milestone)5502_storage)dyn_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Milestone[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5493_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)5502_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)5493_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "milestonesReviewStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:DonationVotingCustomRegistryStrategy": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51",
        "version": {
          "withMetadata": "606fbcbf9d9bca7dcc904b698857502c6b46e5ad133606a678512769388be5e0",
          "withoutMetadata": "606fbcbf9d9bca7dcc904b698857502c6b46e5ad133606a678512769388be5e0",
          "linkedWithoutMetadata": "606fbcbf9d9bca7dcc904b698857502c6b46e5ad133606a678512769388be5e0"
        },
        "inherit": [
          "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingCustomRegistryStrategy",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7094_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(SimpleProjectRegistry)7065",
              "contract": "DonationVotingCustomRegistryStrategy",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(SimpleProjectRegistry)7065": {
              "label": "contract SimpleProjectRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7094_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4252_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7094_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:SimpleProjectRegistry": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:26",
        "version": {
          "withMetadata": "64a09c46feb8056c892570a4b0165f15f01b904ca591a03ffae169ac1430ef2b",
          "withoutMetadata": "64a09c46feb8056c892570a4b0165f15f01b904ca591a03ffae169ac1430ef2b",
          "linkedWithoutMetadata": "64a09c46feb8056c892570a4b0165f15f01b904ca591a03ffae169ac1430ef2b"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addProject(address)",
          "addProjects(address[])",
          "removeProject(address)",
          "removeProjects(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleProjectRegistry",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "projects",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleProjectRegistry",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy": {
        "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:100",
        "version": {
          "withMetadata": "a78a78a3338e8a6021abafbed427faf94a84c9d51dc80fa12194eb7699019bde",
          "withoutMetadata": "a78a78a3338e8a6021abafbed427faf94a84c9d51dc80fa12194eb7699019bde",
          "linkedWithoutMetadata": "a78a78a3338e8a6021abafbed427faf94a84c9d51dc80fa12194eb7699019bde"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "setPayout(address[],uint256[])",
          "claim(struct DonationVotingStrategy.Claim[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingStrategy",
            "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:198"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7094_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7094_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4252_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7094_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:ProportionalPayoutStrategy": {
        "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:112",
        "version": {
          "withMetadata": "b1923ae8239ae8e9af0e14aab8247a7526dae02e350a22f55019a3e7bf75e0e4",
          "withoutMetadata": "b1923ae8239ae8e9af0e14aab8247a7526dae02e350a22f55019a3e7bf75e0e4",
          "linkedWithoutMetadata": "b1923ae8239ae8e9af0e14aab8247a7526dae02e350a22f55019a3e7bf75e0e4"
        },
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "setAllocationTime(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProportionalPayoutStrategy",
            "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:166"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Recipient)8501_storage)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:151"
            },
            {
              "label": "hasAllocated",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:152"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:153"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ERC721)32389",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "maxRecipientsAllowed",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:157"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:158"
            },
            {
              "label": "totalAllocations",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:159"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)32389": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)8501_storage)": {
              "label": "mapping(address => struct ProportionalPayoutStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)8501_storage": {
              "label": "struct ProportionalPayoutStrategy.Recipient",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:QVGovernanceERC20Votes": {
        "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:89",
        "version": {
          "withMetadata": "501a905768f987baab32fd0ab20e8bebcf0c37fa11743d15fa9787f69c6d61a1",
          "withoutMetadata": "501a905768f987baab32fd0ab20e8bebcf0c37fa11743d15fa9787f69c6d61a1",
          "linkedWithoutMetadata": "501a905768f987baab32fd0ab20e8bebcf0c37fa11743d15fa9787f69c6d61a1"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVGovernanceERC20Votes",
            "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:104"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "govToken",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IVotes)20349",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:97"
            },
            {
              "label": "timestamp",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:98"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IVotes)20349": {
              "label": "contract IVotes",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:HackathonQVStrategy": {
        "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:111",
        "version": {
          "withMetadata": "26687e4c14c218178470ae7d12021193139326ba098784d3bc75fd745cb69e27",
          "withoutMetadata": "26687e4c14c218178470ae7d12021193139326ba098784d3bc75fd745cb69e27",
          "linkedWithoutMetadata": "26687e4c14c218178470ae7d12021193139326ba098784d3bc75fd745cb69e27"
        },
        "inherit": [
          "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver",
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllowedRecipientIds(address[],uint64,bytes)",
          "setPayoutPercentages(uint256[])",
          "getPayouts(address[],bytes[])",
          "getAttestation(bytes32)",
          "getSchema(bytes32)",
          "isPayable()",
          "isAttestationExpired(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HackathonQVStrategy",
            "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:148"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "_eas",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IEAS)19040",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            },
            {
              "label": "payoutPercentages",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:130"
            },
            {
              "label": "votesByRank",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:131"
            },
            {
              "label": "easInfo",
              "offset": 0,
              "slot": "14",
              "type": "t_struct(EASInfo)9390_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "19",
              "type": "t_contract(ERC721)32389",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "recipientIdToUID",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:135"
            },
            {
              "label": "recipientIdToIndex",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:137"
            },
            {
              "label": "indexToRecipientId",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:143"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ERC721)32389": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IEAS)19040": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(ISchemaRegistry)19085": {
              "label": "contract ISchemaRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(EASInfo)9390_storage": {
              "label": "struct HackathonQVStrategy.EASInfo",
              "members": [
                {
                  "label": "eas",
                  "type": "t_contract(IEAS)19040",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "schemaRegistry",
                  "type": "t_contract(ISchemaRegistry)19085",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "schemaUID",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "schema",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "revocable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver": {
        "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:19",
        "inherit": [
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver"
        ],
        "libraries": [],
        "methods": [
          "isPayable()",
          "()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_eas",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IEAS)19040",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            }
          ],
          "types": {
            "t_contract(IEAS)19040": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:QVNftTieredStrategy": {
        "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:96",
        "version": {
          "withMetadata": "e2e33cfe860b8709270aab8f1ab54159f6943e92a8f94dae43f3f2aa6a7ad35f",
          "withoutMetadata": "e2e33cfe860b8709270aab8f1ab54159f6943e92a8f94dae43f3f2aa6a7ad35f",
          "linkedWithoutMetadata": "e2e33cfe860b8709270aab8f1ab54159f6943e92a8f94dae43f3f2aa6a7ad35f"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVNftTieredStrategy",
            "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "nfts",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_contract(ERC721)32389)dyn_storage",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:112"
            },
            {
              "label": "maxVoiceCreditsPerNft",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_contract(ERC721)32389,t_uint256)",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:113"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_contract(ERC721)32389,t_mapping(t_uint256,t_uint256))",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(ERC721)32389)dyn_storage": {
              "label": "contract ERC721[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)32389": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)32389,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(contract ERC721 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)32389,t_uint256)": {
              "label": "mapping(contract ERC721 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:LockupDynamicStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:16",
        "version": {
          "withMetadata": "c29ebb0a1c44e4f9f618355b68dfdfdfc29c65690689d351b12ff3f5fa586419",
          "withoutMetadata": "c29ebb0a1c44e4f9f618355b68dfdfdfc29c65690689d351b12ff3f5fa586419",
          "linkedWithoutMetadata": "c29ebb0a1c44e4f9f618355b68dfdfdfc29c65690689d351b12ff3f5fa586419"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientSegments(address,struct LockupDynamic.SegmentWithDelta[])",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupDynamicStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:42"
            },
            {
              "label": "lockupDynamic",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupDynamic)30800",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)30920_storage",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)11146_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(SegmentWithDelta)31004_storage)dyn_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupDynamic)30800": {
              "label": "contract ISablierV2LockupDynamic",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)11146_storage)": {
              "label": "mapping(address => struct LockupDynamicStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)30920_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)30161",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)11146_storage": {
              "label": "struct LockupDynamicStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "segments",
                  "type": "t_array(t_struct(SegmentWithDelta)31004_storage)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(SegmentWithDelta)31004_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exponent",
                  "type": "t_userDefinedValueType(UD2x18)28357",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "delta",
                  "type": "t_uint40",
                  "offset": 24,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD2x18)28357": {
              "label": "UD2x18",
              "numberOfBytes": "8",
              "underlying": "t_uint64"
            },
            "t_userDefinedValueType(UD60x18)30161": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:LockupLinearStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:16",
        "version": {
          "withMetadata": "f2a9c21e01151b75890e39a15e568de0c49627d31d5dbded8ec16f2526817059",
          "withoutMetadata": "f2a9c21e01151b75890e39a15e568de0c49627d31d5dbded8ec16f2526817059",
          "linkedWithoutMetadata": "f2a9c21e01151b75890e39a15e568de0c49627d31d5dbded8ec16f2526817059"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientDurations(address,(uint40,uint40))",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupLinearStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:42"
            },
            {
              "label": "lockupLinear",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupLinear)30889",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)30920_storage",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)12323_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupLinear)30889": {
              "label": "contract ISablierV2LockupLinear",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12323_storage)": {
              "label": "mapping(address => struct LockupLinearStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)30920_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)30161",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Durations)31072_storage": {
              "label": "struct LockupLinear.Durations",
              "members": [
                {
                  "label": "cliff",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "total",
                  "type": "t_uint40",
                  "offset": 5,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12323_storage": {
              "label": "struct LockupLinearStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durations",
                  "type": "t_struct(Durations)31072_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD60x18)30161": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:NFT": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:8",
        "version": {
          "withMetadata": "4de56bc17def5481068d5856a5b11ecbf798fd373088948137937bfd834be87e",
          "withoutMetadata": "4de56bc17def5481068d5856a5b11ecbf798fd373088948137937bfd834be87e",
          "linkedWithoutMetadata": "4de56bc17def5481068d5856a5b11ecbf798fd373088948137937bfd834be87e"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable",
          "solady/src/tokens/ERC721.sol:ERC721"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)",
          "name()",
          "symbol()",
          "mintTo(address)",
          "tokenURI(uint256)",
          "withdrawPayments(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFT",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTokenId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:16"
            },
            {
              "label": "MINT_PRICE",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:17"
            },
            {
              "label": "__name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:20"
            },
            {
              "label": "__symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:NFTFactory": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:6",
        "version": {
          "withMetadata": "83f6ef26de98317bb5acc449ee6dbf20edea94ad6e32f55ae84e762b2fcf40fd",
          "withoutMetadata": "83f6ef26de98317bb5acc449ee6dbf20edea94ad6e32f55ae84e762b2fcf40fd",
          "linkedWithoutMetadata": "83f6ef26de98317bb5acc449ee6dbf20edea94ad6e32f55ae84e762b2fcf40fd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createNFTContract(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isNFTContract",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NFTFactory",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:WrappedVotingNftMintStrategy": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:100",
        "version": {
          "withMetadata": "a8b7f1ec439ae364bfb1e3df91e0ad53da7ffca888e82615208d0c983f3e0854",
          "withoutMetadata": "a8b7f1ec439ae364bfb1e3df91e0ad53da7ffca888e82615208d0c983f3e0854",
          "linkedWithoutMetadata": "a8b7f1ec439ae364bfb1e3df91e0ad53da7ffca888e82615208d0c983f3e0854"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllocationTimes(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrappedVotingNftMintStrategy",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:147"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "nftFactory",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(NFTFactory)13537",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:134"
            },
            {
              "label": "allocationStartTime",
              "offset": 20,
              "slot": "4",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "currentWinner",
              "offset": 8,
              "slot": "5",
              "type": "t_address",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "allocations",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(NFTFactory)13537": {
              "label": "contract NFTFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:99",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(struct DonationVotingMerkleDistributionBaseStrategy.ApplicationStatus[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "updateDistribution(bytes32,(uint256,string))",
          "isDistributionSet()",
          "hasBeenDistributed(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionBaseStrategy",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:286"
          },
          {
            "kind": "state-variable-immutable",
            "name": "PERMIT2",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:230"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4531_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)14108_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14108_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14108_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:DonationVotingMerkleDistributionDirectTransferStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76",
        "version": {
          "withMetadata": "c75a5091528dd5173f2a71ad02c583c9f2642a730669cc2b83a3f0a801b633c9",
          "withoutMetadata": "c75a5091528dd5173f2a71ad02c583c9f2642a730669cc2b83a3f0a801b633c9",
          "linkedWithoutMetadata": "c75a5091528dd5173f2a71ad02c583c9f2642a730669cc2b83a3f0a801b633c9"
        },
        "inherit": [
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionDirectTransferStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4531_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)14108_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14108_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14108_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:DonationVotingMerkleDistributionVaultStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:92",
        "version": {
          "withMetadata": "2c6f2c5ea57abbcfc47d7ede02655c56fdbf5da61d24ae6ccfbf6973c0c6afae",
          "withoutMetadata": "2c6f2c5ea57abbcfc47d7ede02655c56fdbf5da61d24ae6ccfbf6973c0c6afae",
          "linkedWithoutMetadata": "2c6f2c5ea57abbcfc47d7ede02655c56fdbf5da61d24ae6ccfbf6973c0c6afae"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)",
          "claim(struct DonationVotingMerkleDistributionVaultStrategy.Claim[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionVaultStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4531_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)14108_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "16",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "16",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "18",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "67",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14108_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14108_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy": {
        "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:89",
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVBaseStrategy",
            "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:258"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-simple/QVSimpleStrategy.sol:QVSimpleStrategy": {
        "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:89",
        "version": {
          "withMetadata": "f2ffd0102622c1e5d1ee07358645aea26b1ac172ab1fd1856928ff77934fd028",
          "withoutMetadata": "f2ffd0102622c1e5d1ee07358645aea26b1ac172ab1fd1856928ff77934fd028",
          "linkedWithoutMetadata": "f2ffd0102622c1e5d1ee07358645aea26b1ac172ab1fd1856928ff77934fd028"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "addAllocator(address)",
          "removeAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVSimpleStrategy",
            "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:121"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:108"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:111"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:RFPCommitteeStrategy": {
        "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:83",
        "version": {
          "withMetadata": "c59f7ba96172eec5f7f21ec23cf94c6da9d2e4cb8a6a1597e39695b752250ee9",
          "withoutMetadata": "c59f7ba96172eec5f7f21ec23cf94c6da9d2e4cb8a6a1597e39695b752250ee9",
          "linkedWithoutMetadata": "c59f7ba96172eec5f7f21ec23cf94c6da9d2e4cb8a6a1597e39695b752250ee9"
        },
        "inherit": [
          "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPCommitteeStrategy",
            "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4234",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)17670_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)17661_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "voteThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:104"
            },
            {
              "label": "votedFor",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:109"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:114"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)17670_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17661_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)17670_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)17661_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy": {
        "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:107",
        "version": {
          "withMetadata": "fa75a3030f5b940b10c0fcc688449fb99f0b239fb69c35d05137aee6a4b83bca",
          "withoutMetadata": "fa75a3030f5b940b10c0fcc688449fb99f0b239fb69c35d05137aee6a4b83bca",
          "linkedWithoutMetadata": "fa75a3030f5b940b10c0fcc688449fb99f0b239fb69c35d05137aee6a4b83bca"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getPayouts(address[],bytes[])",
          "getMilestone(uint256)",
          "getMilestoneStatus(uint256)",
          "setPoolActive(bool)",
          "setMilestones(struct RFPSimpleStrategy.Milestone[])",
          "submitUpcomingMilestone((uint256,string))",
          "increaseMaxBid(uint256)",
          "rejectMilestone(uint256)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPSimpleStrategy",
            "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:199"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4234",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)17670_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)17661_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)17670_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Recipient)17661_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)17670_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)17661_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/IEAS.sol:IEAS": {
        "src": "lib/eas-contracts/contracts/IEAS.sol:82",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSchemaRegistry()",
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))",
          "multiAttest(struct MultiAttestationRequest[])",
          "multiAttestByDelegation(struct MultiDelegatedAttestationRequest[])",
          "revoke((bytes32,(bytes32,uint256)))",
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))",
          "multiRevoke(struct MultiRevocationRequest[])",
          "multiRevokeByDelegation(struct MultiDelegatedRevocationRequest[])",
          "timestamp(bytes32)",
          "multiTimestamp(bytes32[])",
          "revokeOffchain(bytes32)",
          "multiRevokeOffchain(bytes32[])",
          "getAttestation(bytes32)",
          "isAttestationValid(bytes32)",
          "getTimestamp(bytes32)",
          "getRevokeOffchain(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol:ISchemaRegistry": {
        "src": "lib/eas-contracts/contracts/ISchemaRegistry.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "register(string,address,bool)",
          "getSchema(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver": {
        "src": "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:19",
        "version": {
          "withMetadata": "893bbd16520d26e3eafa9f1a0dfce21f92de056c8fc83d4d44886cd8f7414535",
          "withoutMetadata": "893bbd16520d26e3eafa9f1a0dfce21f92de056c8fc83d4d44886cd8f7414535",
          "linkedWithoutMetadata": "893bbd16520d26e3eafa9f1a0dfce21f92de056c8fc83d4d44886cd8f7414535"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "8bd5d2cb72f05eee53ffbc7ada7be9f13545ea522c98341615a78f3601dff7f2",
          "withoutMetadata": "8bd5d2cb72f05eee53ffbc7ada7be9f13545ea522c98341615a78f3601dff7f2",
          "linkedWithoutMetadata": "8bd5d2cb72f05eee53ffbc7ada7be9f13545ea522c98341615a78f3601dff7f2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:50",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19902_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "09947c5eb7d75d3d7126f4c098d06ab9f84cf188b13050106bf72acd014f0344",
          "withoutMetadata": "09947c5eb7d75d3d7126f4c098d06ab9f84cf188b13050106bf72acd014f0344",
          "linkedWithoutMetadata": "09947c5eb7d75d3d7126f4c098d06ab9f84cf188b13050106bf72acd014f0344"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "bc2c4c597d306e0d454bac0627cd487147f4450f3c73d983844f91d7a40d660e",
          "withoutMetadata": "bc2c4c597d306e0d454bac0627cd487147f4450f3c73d983844f91d7a40d660e",
          "linkedWithoutMetadata": "bc2c4c597d306e0d454bac0627cd487147f4450f3c73d983844f91d7a40d660e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "4e7ac16a0a90828d78eb4304b6cde0d50e4453f152812d53990554b5413c5689",
          "withoutMetadata": "4e7ac16a0a90828d78eb4304b6cde0d50e4453f152812d53990554b5413c5689",
          "linkedWithoutMetadata": "4e7ac16a0a90828d78eb4304b6cde0d50e4453f152812d53990554b5413c5689"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "162ed34e8e38fbd5626e1a0151de0b8badb400fe03ff469d31f60a1b70af84cd",
          "withoutMetadata": "162ed34e8e38fbd5626e1a0151de0b8badb400fe03ff469d31f60a1b70af84cd",
          "linkedWithoutMetadata": "162ed34e8e38fbd5626e1a0151de0b8badb400fe03ff469d31f60a1b70af84cd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "b1783508ca9bb2ff47511dd8ffcf81c262d5260148d76a0ea81ae28b86b2e4e8",
          "withoutMetadata": "b1783508ca9bb2ff47511dd8ffcf81c262d5260148d76a0ea81ae28b86b2e4e8",
          "linkedWithoutMetadata": "b1783508ca9bb2ff47511dd8ffcf81c262d5260148d76a0ea81ae28b86b2e4e8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "12e214797f1ea1d2fc5c12c2252ff11efe91d1b249a26122ece7aab3401d5380",
          "withoutMetadata": "12e214797f1ea1d2fc5c12c2252ff11efe91d1b249a26122ece7aab3401d5380",
          "linkedWithoutMetadata": "12e214797f1ea1d2fc5c12c2252ff11efe91d1b249a26122ece7aab3401d5380"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/IEIP712.sol:IEIP712": {
        "src": "lib/permit2/src/interfaces/IEIP712.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/ISignatureTransfer.sol:ISignatureTransfer": {
        "src": "lib/permit2/src/interfaces/ISignatureTransfer.sol:9",
        "inherit": [
          "lib/permit2/src/interfaces/IEIP712.sol:IEIP712"
        ],
        "libraries": [],
        "methods": [
          "nonceBitmap(address,uint256)",
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)",
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)",
          "permitTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes)",
          "permitWitnessTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes32,string,bytes)",
          "invalidateUnorderedNonces(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable": {
        "src": "lib/v2-core/src/interfaces/IAdminable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "transferAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Base.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "comptroller()",
          "protocolRevenues(address)",
          "claimProtocolRevenues(address)",
          "setComptroller(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:ISablierV2Comptroller": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "flashFee()",
          "isFlashAsset(address)",
          "protocolFees(address)",
          "setFlashFee(uint256)",
          "setProtocolFee(address,uint256)",
          "toggleFlashAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:13",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getAsset(uint256)",
          "getDepositedAmount(uint256)",
          "getEndTime(uint256)",
          "getRecipient(uint256)",
          "getRefundedAmount(uint256)",
          "getSender(uint256)",
          "getStartTime(uint256)",
          "getWithdrawnAmount(uint256)",
          "isCancelable(uint256)",
          "isCold(uint256)",
          "isDepleted(uint256)",
          "isStream(uint256)",
          "isWarm(uint256)",
          "nextStreamId()",
          "refundableAmountOf(uint256)",
          "statusOf(uint256)",
          "streamedAmountOf(uint256)",
          "wasCanceled(uint256)",
          "withdrawableAmountOf(uint256)",
          "burn(uint256)",
          "cancel(uint256)",
          "cancelMultiple(uint256[])",
          "renounce(uint256)",
          "setNFTDescriptor(address)",
          "withdraw(uint256,address,uint128)",
          "withdrawMax(uint256,address)",
          "withdrawMaxAndTransfer(uint256,address)",
          "withdrawMultiple(uint256[],address,uint128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:ISablierV2LockupDynamic": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_SEGMENT_COUNT()",
          "getRange(uint256)",
          "getSegments(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDeltas((address,bool,address,uint128,address,(address,uint256),struct LockupDynamic.SegmentWithDelta[]))",
          "createWithMilestones((address,uint40,bool,address,uint128,address,(address,uint256),struct LockupDynamic.Segment[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:ISablierV2LockupLinear": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getCliffTime(uint256)",
          "getRange(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))",
          "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:ISablierV2NFTDescriptor": {
        "src": "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:Lockup": {
        "src": "lib/v2-core/src/types/DataTypes.sol:29",
        "version": {
          "withMetadata": "edf611a05911946273820ba66c3abad5380d01a5c796c01ba190897ac16e5d87",
          "withoutMetadata": "edf611a05911946273820ba66c3abad5380d01a5c796c01ba190897ac16e5d87",
          "linkedWithoutMetadata": "edf611a05911946273820ba66c3abad5380d01a5c796c01ba190897ac16e5d87"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupDynamic": {
        "src": "lib/v2-core/src/types/DataTypes.sol:72",
        "version": {
          "withMetadata": "1872f21dce01c09c47be11bc396c2933cfe7e7d609aa8aa604457e0ba424639d",
          "withoutMetadata": "1872f21dce01c09c47be11bc396c2933cfe7e7d609aa8aa604457e0ba424639d",
          "linkedWithoutMetadata": "1872f21dce01c09c47be11bc396c2933cfe7e7d609aa8aa604457e0ba424639d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupLinear": {
        "src": "lib/v2-core/src/types/DataTypes.sol:180",
        "version": {
          "withMetadata": "9b63bcfd768202c7f5a539164febce0159ec8c5da6bb20c5439b510e30597b28",
          "withoutMetadata": "9b63bcfd768202c7f5a539164febce0159ec8c5da6bb20c5439b510e30597b28",
          "linkedWithoutMetadata": "9b63bcfd768202c7f5a539164febce0159ec8c5da6bb20c5439b510e30597b28"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/auth/Ownable.sol:Ownable": {
        "src": "solady/src/auth/Ownable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "renounceOwnership()",
          "requestOwnershipHandover()",
          "cancelOwnershipHandover()",
          "completeOwnershipHandover(address)",
          "owner()",
          "ownershipHandoverExpiresAt(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC20.sol:ERC20": {
        "src": "solady/src/tokens/ERC20.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC721.sol:ERC721": {
        "src": "solady/src/tokens/ERC721.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "balanceOf(address)",
          "getApproved(uint256)",
          "approve(address,uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/CREATE3.sol:CREATE3": {
        "src": "solady/src/utils/CREATE3.sol:8",
        "version": {
          "withMetadata": "ce81eba572e8215b1280ebe87d90d91b3aaff52b5ff3393d80dfee98ce11e499",
          "withoutMetadata": "ce81eba572e8215b1280ebe87d90d91b3aaff52b5ff3393d80dfee98ce11e499",
          "linkedWithoutMetadata": "ce81eba572e8215b1280ebe87d90d91b3aaff52b5ff3393d80dfee98ce11e499"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/SafeTransferLib.sol:SafeTransferLib": {
        "src": "solady/src/utils/SafeTransferLib.sol:12",
        "version": {
          "withMetadata": "12237c07ed75b00097d9a801cafd00c61b2758203c61dbedd7986c146ea312b2",
          "withoutMetadata": "12237c07ed75b00097d9a801cafd00c61b2758203c61dbedd7986c146ea312b2",
          "linkedWithoutMetadata": "12237c07ed75b00097d9a801cafd00c61b2758203c61dbedd7986c146ea312b2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "0f869f63def230242cb6dabb06442ff29d1eac79bec262a00f3ae4d04b28216e",
          "withoutMetadata": "0f869f63def230242cb6dabb06442ff29d1eac79bec262a00f3ae4d04b28216e",
          "linkedWithoutMetadata": "0f869f63def230242cb6dabb06442ff29d1eac79bec262a00f3ae4d04b28216e"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "c34402f80b28be912ac14d100044bdacdc88640f015ebfc098bdc4918b41dad1",
          "withoutMetadata": "c34402f80b28be912ac14d100044bdacdc88640f015ebfc098bdc4918b41dad1",
          "linkedWithoutMetadata": "c34402f80b28be912ac14d100044bdacdc88640f015ebfc098bdc4918b41dad1"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "cb27e4fba8baa69e97bcd1c508dddf61364a12bbba6979ca894bcfce384732d3",
          "withoutMetadata": "cb27e4fba8baa69e97bcd1c508dddf61364a12bbba6979ca894bcfce384732d3",
          "linkedWithoutMetadata": "cb27e4fba8baa69e97bcd1c508dddf61364a12bbba6979ca894bcfce384732d3"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "20ac4b6a3b1ef3a692088ec6bef4048ddb0c5d688f23baec2dc3d1410f0eb9e6",
          "withoutMetadata": "20ac4b6a3b1ef3a692088ec6bef4048ddb0c5d688f23baec2dc3d1410f0eb9e6",
          "linkedWithoutMetadata": "20ac4b6a3b1ef3a692088ec6bef4048ddb0c5d688f23baec2dc3d1410f0eb9e6"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "029d87db27a91fd82ecc4971f85f7bb289b608663a203db07e008b7634471f64",
          "withoutMetadata": "029d87db27a91fd82ecc4971f85f7bb289b608663a203db07e008b7634471f64",
          "linkedWithoutMetadata": "029d87db27a91fd82ecc4971f85f7bb289b608663a203db07e008b7634471f64"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "8841eaa0afbbd9b7c6d05032f096303e99674790062448a539c7b768a12da194",
          "withoutMetadata": "8841eaa0afbbd9b7c6d05032f096303e99674790062448a539c7b768a12da194",
          "linkedWithoutMetadata": "8841eaa0afbbd9b7c6d05032f096303e99674790062448a539c7b768a12da194"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "40c8aeb95b566e53b35952868b97eca2f1d3cd65d8a49281e61471bb836ba62d",
          "withoutMetadata": "40c8aeb95b566e53b35952868b97eca2f1d3cd65d8a49281e61471bb836ba62d",
          "linkedWithoutMetadata": "40c8aeb95b566e53b35952868b97eca2f1d3cd65d8a49281e61471bb836ba62d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Allo.sol:Allo": {
        "src": "contracts/core/Allo.sol:89",
        "version": {
          "withMetadata": "93d37efd27a9d6053431695bbdae735a731d75b756baa6d5e44e465c6c3c4a8f",
          "withoutMetadata": "93d37efd27a9d6053431695bbdae735a731d75b756baa6d5e44e465c6c3c4a8f",
          "linkedWithoutMetadata": "93d37efd27a9d6053431695bbdae735a731d75b756baa6d5e44e465c6c3c4a8f"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "solady/src/auth/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IAllo.sol:IAllo"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "getFeeDenominator()",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "isCloneableStrategy(address)",
          "getPool(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "percentFee",
              "offset": 0,
              "slot": "52",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:114"
            },
            {
              "label": "baseFee",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:129"
            },
            {
              "label": "_poolIndex",
              "offset": 0,
              "slot": "54",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "55",
              "type": "t_address_payable",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "56",
              "type": "t_contract(IRegistry)4234",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:133"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "57",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:134"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "58",
              "type": "t_mapping(t_uint256,t_struct(Pool)3753_storage)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:135"
            },
            {
              "label": "cloneableStrategies",
              "offset": 0,
              "slot": "59",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)4405": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)3753_storage)": {
              "label": "mapping(uint256 => struct IAllo.Pool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Pool)3753_storage": {
              "label": "struct IAllo.Pool",
              "members": [
                {
                  "label": "profileId",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "strategy",
                  "type": "t_contract(IStrategy)4405",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "managerRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)19902_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Anchor.sol:Anchor": {
        "src": "contracts/core/Anchor.sol:89",
        "version": {
          "withMetadata": "ae98179a1790eadc5aa013659261480920879a86d98d517f2fd0aedfb0078afa",
          "withoutMetadata": "ae98179a1790eadc5aa013659261480920879a86d98d517f2fd0aedfb0078afa",
          "linkedWithoutMetadata": "ae98179a1790eadc5aa013659261480920879a86d98d517f2fd0aedfb0078afa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "execute(address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Anchor",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "profileId",
            "src": "contracts/core/Anchor.sol:89"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Registry.sol:Registry": {
        "src": "contracts/core/Registry.sol:103",
        "version": {
          "withMetadata": "08a50327755ba3c6963d5ec93be2b6629ab281b7fa8de1b743ab3771f69d408e",
          "withoutMetadata": "08a50327755ba3c6963d5ec93be2b6629ab281b7fa8de1b743ab3771f69d408e",
          "linkedWithoutMetadata": "08a50327755ba3c6963d5ec93be2b6629ab281b7fa8de1b743ab3771f69d408e"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "contracts/core/libraries/Native.sol:Native",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "contracts/core/interfaces/IRegistry.sol:IRegistry"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "anchorToProfileId",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:109"
            },
            {
              "label": "profilesById",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_struct(Profile)4061_storage)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:111"
            },
            {
              "label": "profileIdToPendingOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:113"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Profile)4061_storage)": {
              "label": "mapping(bytes32 => struct IRegistry.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Profile)4061_storage": {
              "label": "struct IRegistry.Profile",
              "members": [
                {
                  "label": "id",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "anchor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)19902_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IAllo.sol:IAllo": {
        "src": "contracts/core/interfaces/IAllo.sol:97",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "isCloneableStrategy(address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "getPool(uint256)",
          "getFeeDenominator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IRegistry.sol:IRegistry": {
        "src": "contracts/core/interfaces/IRegistry.sol:92",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/core/interfaces/IStrategy.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "isValidAllocator(address)",
          "isPoolActive()",
          "getPoolAmount()",
          "increasePoolAmount(uint256)",
          "getRecipientStatus(address)",
          "getPayouts(address[],bytes[])",
          "initialize(uint256,bytes)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Clone.sol:Clone": {
        "src": "contracts/core/libraries/Clone.sol:37",
        "version": {
          "withMetadata": "93455563f8049dab8e5e12257c397e96d3718d5185c810b95594bd33d00e1d05",
          "withoutMetadata": "93455563f8049dab8e5e12257c397e96d3718d5185c810b95594bd33d00e1d05",
          "linkedWithoutMetadata": "93455563f8049dab8e5e12257c397e96d3718d5185c810b95594bd33d00e1d05"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Errors.sol:Errors": {
        "src": "contracts/core/libraries/Errors.sol:109",
        "version": {
          "withMetadata": "cf34eab24125e871b298395165687d886c849c6ffffc936e5b4bc24546108553",
          "withoutMetadata": "cf34eab24125e871b298395165687d886c849c6ffffc936e5b4bc24546108553",
          "linkedWithoutMetadata": "cf34eab24125e871b298395165687d886c849c6ffffc936e5b4bc24546108553"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Native.sol:Native": {
        "src": "contracts/core/libraries/Native.sol:26",
        "version": {
          "withMetadata": "6dc17a545e8dfe26b4f1996bdcf525794f38403b7ae517b2fe369793e15e6409",
          "withoutMetadata": "6dc17a545e8dfe26b4f1996bdcf525794f38403b7ae517b2fe369793e15e6409",
          "linkedWithoutMetadata": "6dc17a545e8dfe26b4f1996bdcf525794f38403b7ae517b2fe369793e15e6409"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Transfer.sol:Transfer": {
        "src": "contracts/core/libraries/Transfer.sol:95",
        "version": {
          "withMetadata": "a0d47d4a15570149a400e4d2ff6d61f2ba82aa3ded22dee1385656e9ce432ac5",
          "withoutMetadata": "a0d47d4a15570149a400e4d2ff6d61f2ba82aa3ded22dee1385656e9ce432ac5",
          "linkedWithoutMetadata": "a0d47d4a15570149a400e4d2ff6d61f2ba82aa3ded22dee1385656e9ce432ac5"
        },
        "inherit": [
          "contracts/core/libraries/Native.sol:Native"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/factory/ContractFactory.sol:ContractFactory": {
        "src": "contracts/factory/ContractFactory.sol:107",
        "version": {
          "withMetadata": "632e004fe69342bcf69ccfb67c27d13991eed34df71d79d7ea49a4b0d8371aef",
          "withoutMetadata": "632e004fe69342bcf69ccfb67c27d13991eed34df71d79d7ea49a4b0d8371aef",
          "linkedWithoutMetadata": "632e004fe69342bcf69ccfb67c27d13991eed34df71d79d7ea49a4b0d8371aef"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "deploy(string,string,bytes)",
          "setDeployer(address,bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ContractFactory",
            "src": "contracts/factory/ContractFactory.sol:119"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "usedSalts",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            },
            {
              "label": "isDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/BaseStrategy.sol:BaseStrategy": {
        "src": "contracts/strategies/BaseStrategy.sol:111",
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "getPoolAmount()",
          "isPoolActive()",
          "getRecipientStatus(address)",
          "increasePoolAmount(uint256)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)",
          "getPayouts(address[],bytes[])",
          "isValidAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseStrategy",
            "src": "contracts/strategies/BaseStrategy.sol:129"
          },
          {
            "kind": "state-variable-immutable",
            "name": "allo",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          },
          {
            "kind": "state-variable-immutable",
            "name": "strategyId",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:DirectGrantsSimpleStrategy": {
        "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:112",
        "version": {
          "withMetadata": "39d2d898767c9d2603b37a67845616effb9acd5712bedfd21cb620183a24336b",
          "withoutMetadata": "39d2d898767c9d2603b37a67845616effb9acd5712bedfd21cb620183a24336b",
          "linkedWithoutMetadata": "39d2d898767c9d2603b37a67845616effb9acd5712bedfd21cb620183a24336b"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getMilestoneStatus(address,uint256)",
          "getMilestones(address)",
          "setMilestones(address,struct DirectGrantsSimpleStrategy.Milestone[])",
          "reviewSetMilestones(address,uint8)",
          "submitMilestone(address,uint256,(uint256,string))",
          "rejectMilestone(address,uint256)",
          "setRecipientStatusToInReview(address[])",
          "setPoolActive(bool)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DirectGrantsSimpleStrategy",
            "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:191"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:161"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:162"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:164"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:166"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:167"
            },
            {
              "label": "_acceptedRecipientIds",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:172"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)5493_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:177"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Milestone)5502_storage)dyn_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:179"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:184"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)5502_storage)dyn_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(Milestone)5502_storage)dyn_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Milestone[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5493_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)5502_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)5493_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "milestonesReviewStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:DonationVotingCustomRegistryStrategy": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51",
        "version": {
          "withMetadata": "b79983e114991c252bbf63dc7e6fe161c967398192b61dd0282d00509974f835",
          "withoutMetadata": "b79983e114991c252bbf63dc7e6fe161c967398192b61dd0282d00509974f835",
          "linkedWithoutMetadata": "b79983e114991c252bbf63dc7e6fe161c967398192b61dd0282d00509974f835"
        },
        "inherit": [
          "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingCustomRegistryStrategy",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7094_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(SimpleProjectRegistry)7065",
              "contract": "DonationVotingCustomRegistryStrategy",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(SimpleProjectRegistry)7065": {
              "label": "contract SimpleProjectRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7094_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4252_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7094_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:SimpleProjectRegistry": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:26",
        "version": {
          "withMetadata": "892936641a9e0e772d2de1b6d878f04cda47e33e4885b72beed46d4f7ca9f692",
          "withoutMetadata": "892936641a9e0e772d2de1b6d878f04cda47e33e4885b72beed46d4f7ca9f692",
          "linkedWithoutMetadata": "892936641a9e0e772d2de1b6d878f04cda47e33e4885b72beed46d4f7ca9f692"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addProject(address)",
          "addProjects(address[])",
          "removeProject(address)",
          "removeProjects(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleProjectRegistry",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "projects",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleProjectRegistry",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy": {
        "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:100",
        "version": {
          "withMetadata": "21e709da50b5c519a066d89c33376459e1d7bfb84643f5350789cfc7da45f647",
          "withoutMetadata": "21e709da50b5c519a066d89c33376459e1d7bfb84643f5350789cfc7da45f647",
          "linkedWithoutMetadata": "21e709da50b5c519a066d89c33376459e1d7bfb84643f5350789cfc7da45f647"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "setPayout(address[],uint256[])",
          "claim(struct DonationVotingStrategy.Claim[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingStrategy",
            "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:198"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7094_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7094_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4252_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7094_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:ProportionalPayoutStrategy": {
        "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:112",
        "version": {
          "withMetadata": "71e147977e7d92fc6d8c5daa8901a9a61dd679a1ec0cc345210db9801798e031",
          "withoutMetadata": "71e147977e7d92fc6d8c5daa8901a9a61dd679a1ec0cc345210db9801798e031",
          "linkedWithoutMetadata": "71e147977e7d92fc6d8c5daa8901a9a61dd679a1ec0cc345210db9801798e031"
        },
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "setAllocationTime(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProportionalPayoutStrategy",
            "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:166"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Recipient)8501_storage)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:151"
            },
            {
              "label": "hasAllocated",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:152"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:153"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ERC721)32389",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "maxRecipientsAllowed",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:157"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:158"
            },
            {
              "label": "totalAllocations",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:159"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)32389": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)8501_storage)": {
              "label": "mapping(address => struct ProportionalPayoutStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)8501_storage": {
              "label": "struct ProportionalPayoutStrategy.Recipient",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:QVGovernanceERC20Votes": {
        "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:89",
        "version": {
          "withMetadata": "09a63cc11be392bbd5c22bdd9fc36a5bcafb6fb8d0cf8e8498a10e4318488344",
          "withoutMetadata": "09a63cc11be392bbd5c22bdd9fc36a5bcafb6fb8d0cf8e8498a10e4318488344",
          "linkedWithoutMetadata": "09a63cc11be392bbd5c22bdd9fc36a5bcafb6fb8d0cf8e8498a10e4318488344"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVGovernanceERC20Votes",
            "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:104"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "govToken",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IVotes)20349",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:97"
            },
            {
              "label": "timestamp",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:98"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IVotes)20349": {
              "label": "contract IVotes",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:HackathonQVStrategy": {
        "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:111",
        "version": {
          "withMetadata": "c3d6f98d015c488e7d70b4d0b421a43ae5f5ae27954e96a65c6dfab242066c12",
          "withoutMetadata": "c3d6f98d015c488e7d70b4d0b421a43ae5f5ae27954e96a65c6dfab242066c12",
          "linkedWithoutMetadata": "c3d6f98d015c488e7d70b4d0b421a43ae5f5ae27954e96a65c6dfab242066c12"
        },
        "inherit": [
          "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver",
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllowedRecipientIds(address[],uint64,bytes)",
          "setPayoutPercentages(uint256[])",
          "getPayouts(address[],bytes[])",
          "getAttestation(bytes32)",
          "getSchema(bytes32)",
          "isPayable()",
          "isAttestationExpired(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HackathonQVStrategy",
            "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:148"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "_eas",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IEAS)19040",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            },
            {
              "label": "payoutPercentages",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:130"
            },
            {
              "label": "votesByRank",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:131"
            },
            {
              "label": "easInfo",
              "offset": 0,
              "slot": "14",
              "type": "t_struct(EASInfo)9390_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "19",
              "type": "t_contract(ERC721)32389",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "recipientIdToUID",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:135"
            },
            {
              "label": "recipientIdToIndex",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:137"
            },
            {
              "label": "indexToRecipientId",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:143"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ERC721)32389": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IEAS)19040": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(ISchemaRegistry)19085": {
              "label": "contract ISchemaRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(EASInfo)9390_storage": {
              "label": "struct HackathonQVStrategy.EASInfo",
              "members": [
                {
                  "label": "eas",
                  "type": "t_contract(IEAS)19040",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "schemaRegistry",
                  "type": "t_contract(ISchemaRegistry)19085",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "schemaUID",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "schema",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "revocable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver": {
        "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:19",
        "inherit": [
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver"
        ],
        "libraries": [],
        "methods": [
          "isPayable()",
          "()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_eas",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IEAS)19040",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            }
          ],
          "types": {
            "t_contract(IEAS)19040": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:QVNftTieredStrategy": {
        "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:96",
        "version": {
          "withMetadata": "e0b85773f1c17c7dfd5d99aaf87e8beed34ad8d5ddb76b2e4f89d76261b44e0d",
          "withoutMetadata": "e0b85773f1c17c7dfd5d99aaf87e8beed34ad8d5ddb76b2e4f89d76261b44e0d",
          "linkedWithoutMetadata": "e0b85773f1c17c7dfd5d99aaf87e8beed34ad8d5ddb76b2e4f89d76261b44e0d"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVNftTieredStrategy",
            "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "nfts",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_contract(ERC721)32389)dyn_storage",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:112"
            },
            {
              "label": "maxVoiceCreditsPerNft",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_contract(ERC721)32389,t_uint256)",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:113"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_contract(ERC721)32389,t_mapping(t_uint256,t_uint256))",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(ERC721)32389)dyn_storage": {
              "label": "contract ERC721[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)32389": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)32389,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(contract ERC721 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)32389,t_uint256)": {
              "label": "mapping(contract ERC721 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:LockupDynamicStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:16",
        "version": {
          "withMetadata": "869a0fe6e1556e2288e99d58e5dfba6f2800c9933f7c5921fe1300e2766c7da8",
          "withoutMetadata": "869a0fe6e1556e2288e99d58e5dfba6f2800c9933f7c5921fe1300e2766c7da8",
          "linkedWithoutMetadata": "869a0fe6e1556e2288e99d58e5dfba6f2800c9933f7c5921fe1300e2766c7da8"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientSegments(address,struct LockupDynamic.SegmentWithDelta[])",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupDynamicStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:42"
            },
            {
              "label": "lockupDynamic",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupDynamic)30800",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)30920_storage",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)11146_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(SegmentWithDelta)31004_storage)dyn_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupDynamic)30800": {
              "label": "contract ISablierV2LockupDynamic",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)11146_storage)": {
              "label": "mapping(address => struct LockupDynamicStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)30920_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)30161",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)11146_storage": {
              "label": "struct LockupDynamicStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "segments",
                  "type": "t_array(t_struct(SegmentWithDelta)31004_storage)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(SegmentWithDelta)31004_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exponent",
                  "type": "t_userDefinedValueType(UD2x18)28357",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "delta",
                  "type": "t_uint40",
                  "offset": 24,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD2x18)28357": {
              "label": "UD2x18",
              "numberOfBytes": "8",
              "underlying": "t_uint64"
            },
            "t_userDefinedValueType(UD60x18)30161": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:LockupLinearStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:16",
        "version": {
          "withMetadata": "34171b32d6872627b3b1204bcd64fa8dcd4a57df1733d5fb5e7228665fb3add0",
          "withoutMetadata": "34171b32d6872627b3b1204bcd64fa8dcd4a57df1733d5fb5e7228665fb3add0",
          "linkedWithoutMetadata": "34171b32d6872627b3b1204bcd64fa8dcd4a57df1733d5fb5e7228665fb3add0"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientDurations(address,(uint40,uint40))",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupLinearStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:42"
            },
            {
              "label": "lockupLinear",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupLinear)30889",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)30920_storage",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)12323_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupLinear)30889": {
              "label": "contract ISablierV2LockupLinear",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12323_storage)": {
              "label": "mapping(address => struct LockupLinearStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)30920_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)30161",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Durations)31072_storage": {
              "label": "struct LockupLinear.Durations",
              "members": [
                {
                  "label": "cliff",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "total",
                  "type": "t_uint40",
                  "offset": 5,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12323_storage": {
              "label": "struct LockupLinearStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durations",
                  "type": "t_struct(Durations)31072_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD60x18)30161": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:NFT": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:8",
        "version": {
          "withMetadata": "9fbcf5d3cddbc8f0229df71d0cb069eb8a39aca6fdbe5c87b4d043aa077823a3",
          "withoutMetadata": "9fbcf5d3cddbc8f0229df71d0cb069eb8a39aca6fdbe5c87b4d043aa077823a3",
          "linkedWithoutMetadata": "9fbcf5d3cddbc8f0229df71d0cb069eb8a39aca6fdbe5c87b4d043aa077823a3"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable",
          "solady/src/tokens/ERC721.sol:ERC721"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)",
          "name()",
          "symbol()",
          "mintTo(address)",
          "tokenURI(uint256)",
          "withdrawPayments(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFT",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTokenId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:16"
            },
            {
              "label": "MINT_PRICE",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:17"
            },
            {
              "label": "__name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:20"
            },
            {
              "label": "__symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:NFTFactory": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:6",
        "version": {
          "withMetadata": "a98af5edf92e2153b3d302b3f5cf71e09f900db6408a38a54d7eae1e6e9cda41",
          "withoutMetadata": "a98af5edf92e2153b3d302b3f5cf71e09f900db6408a38a54d7eae1e6e9cda41",
          "linkedWithoutMetadata": "a98af5edf92e2153b3d302b3f5cf71e09f900db6408a38a54d7eae1e6e9cda41"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createNFTContract(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isNFTContract",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NFTFactory",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:WrappedVotingNftMintStrategy": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:100",
        "version": {
          "withMetadata": "6a52a344d16475af17d83fb1e74c1e5150ba71348e84b6af333d328ea4ad5dc8",
          "withoutMetadata": "6a52a344d16475af17d83fb1e74c1e5150ba71348e84b6af333d328ea4ad5dc8",
          "linkedWithoutMetadata": "6a52a344d16475af17d83fb1e74c1e5150ba71348e84b6af333d328ea4ad5dc8"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllocationTimes(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrappedVotingNftMintStrategy",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:147"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "nftFactory",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(NFTFactory)13537",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:134"
            },
            {
              "label": "allocationStartTime",
              "offset": 20,
              "slot": "4",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "currentWinner",
              "offset": 8,
              "slot": "5",
              "type": "t_address",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "allocations",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(NFTFactory)13537": {
              "label": "contract NFTFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:99",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(struct DonationVotingMerkleDistributionBaseStrategy.ApplicationStatus[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "updateDistribution(bytes32,(uint256,string))",
          "isDistributionSet()",
          "hasBeenDistributed(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionBaseStrategy",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:286"
          },
          {
            "kind": "state-variable-immutable",
            "name": "PERMIT2",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:230"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4531_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)14108_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14108_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14108_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:DonationVotingMerkleDistributionDirectTransferStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76",
        "version": {
          "withMetadata": "345c85086d9ac62a1eba8aa5d149a0a56babd13e5d7a2ac6ba94bda0513bb5fd",
          "withoutMetadata": "345c85086d9ac62a1eba8aa5d149a0a56babd13e5d7a2ac6ba94bda0513bb5fd",
          "linkedWithoutMetadata": "345c85086d9ac62a1eba8aa5d149a0a56babd13e5d7a2ac6ba94bda0513bb5fd"
        },
        "inherit": [
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionDirectTransferStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4531_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)14108_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14108_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14108_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:DonationVotingMerkleDistributionVaultStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:92",
        "version": {
          "withMetadata": "6b969f01e19aaea85d320240712ba47eeba58263bcd0c393a31b46bb85d264be",
          "withoutMetadata": "6b969f01e19aaea85d320240712ba47eeba58263bcd0c393a31b46bb85d264be",
          "linkedWithoutMetadata": "6b969f01e19aaea85d320240712ba47eeba58263bcd0c393a31b46bb85d264be"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)",
          "claim(struct DonationVotingMerkleDistributionVaultStrategy.Claim[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionVaultStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4531_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)14108_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "16",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "16",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "18",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "67",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14108_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14108_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy": {
        "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:89",
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVBaseStrategy",
            "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:258"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-simple/QVSimpleStrategy.sol:QVSimpleStrategy": {
        "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:89",
        "version": {
          "withMetadata": "4588b66ea2e170684d80ed7d9b5ec06d0fb62ece2e1f6ec920c56c94c6a37681",
          "withoutMetadata": "4588b66ea2e170684d80ed7d9b5ec06d0fb62ece2e1f6ec920c56c94c6a37681",
          "linkedWithoutMetadata": "4588b66ea2e170684d80ed7d9b5ec06d0fb62ece2e1f6ec920c56c94c6a37681"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "addAllocator(address)",
          "removeAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVSimpleStrategy",
            "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:121"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:108"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:111"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:RFPCommitteeStrategy": {
        "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:83",
        "version": {
          "withMetadata": "6d7ca5a39cc4dde2c34fbe2c1480bead5aed36726f432f54fab460bbe0c174ac",
          "withoutMetadata": "6d7ca5a39cc4dde2c34fbe2c1480bead5aed36726f432f54fab460bbe0c174ac",
          "linkedWithoutMetadata": "6d7ca5a39cc4dde2c34fbe2c1480bead5aed36726f432f54fab460bbe0c174ac"
        },
        "inherit": [
          "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPCommitteeStrategy",
            "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4234",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)17670_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)17661_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "voteThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:104"
            },
            {
              "label": "votedFor",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:109"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:114"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)17670_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17661_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)17670_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)17661_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy": {
        "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:107",
        "version": {
          "withMetadata": "9e54dda36c4105b0238661faa0427b18c677b919302e4edbe96cc22fe8c503ad",
          "withoutMetadata": "9e54dda36c4105b0238661faa0427b18c677b919302e4edbe96cc22fe8c503ad",
          "linkedWithoutMetadata": "9e54dda36c4105b0238661faa0427b18c677b919302e4edbe96cc22fe8c503ad"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getPayouts(address[],bytes[])",
          "getMilestone(uint256)",
          "getMilestoneStatus(uint256)",
          "setPoolActive(bool)",
          "setMilestones(struct RFPSimpleStrategy.Milestone[])",
          "submitUpcomingMilestone((uint256,string))",
          "increaseMaxBid(uint256)",
          "rejectMilestone(uint256)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPSimpleStrategy",
            "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:199"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4234",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)17670_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)17661_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)17670_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Recipient)17661_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)17670_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)17661_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/IEAS.sol:IEAS": {
        "src": "lib/eas-contracts/contracts/IEAS.sol:82",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSchemaRegistry()",
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))",
          "multiAttest(struct MultiAttestationRequest[])",
          "multiAttestByDelegation(struct MultiDelegatedAttestationRequest[])",
          "revoke((bytes32,(bytes32,uint256)))",
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))",
          "multiRevoke(struct MultiRevocationRequest[])",
          "multiRevokeByDelegation(struct MultiDelegatedRevocationRequest[])",
          "timestamp(bytes32)",
          "multiTimestamp(bytes32[])",
          "revokeOffchain(bytes32)",
          "multiRevokeOffchain(bytes32[])",
          "getAttestation(bytes32)",
          "isAttestationValid(bytes32)",
          "getTimestamp(bytes32)",
          "getRevokeOffchain(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol:ISchemaRegistry": {
        "src": "lib/eas-contracts/contracts/ISchemaRegistry.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "register(string,address,bool)",
          "getSchema(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver": {
        "src": "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:19",
        "version": {
          "withMetadata": "1d2d2a9e731126bbe39e90bac00e0e7c6557450fbf432d3765747c7e7c5943e9",
          "withoutMetadata": "1d2d2a9e731126bbe39e90bac00e0e7c6557450fbf432d3765747c7e7c5943e9",
          "linkedWithoutMetadata": "1d2d2a9e731126bbe39e90bac00e0e7c6557450fbf432d3765747c7e7c5943e9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "7c8073e9895f779a6de4c813a020ba0c37c95cfa1c9f8751083bac3c84740315",
          "withoutMetadata": "7c8073e9895f779a6de4c813a020ba0c37c95cfa1c9f8751083bac3c84740315",
          "linkedWithoutMetadata": "7c8073e9895f779a6de4c813a020ba0c37c95cfa1c9f8751083bac3c84740315"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:50",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19902_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "c936612162629c41433880a5a8accb107d58e6b6994adb3a6208cd3c646e22f3",
          "withoutMetadata": "c936612162629c41433880a5a8accb107d58e6b6994adb3a6208cd3c646e22f3",
          "linkedWithoutMetadata": "c936612162629c41433880a5a8accb107d58e6b6994adb3a6208cd3c646e22f3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "6694f2435e88d29c247bea9478935c91db6233a8af3fcd3b1955fd23c9fc4c34",
          "withoutMetadata": "6694f2435e88d29c247bea9478935c91db6233a8af3fcd3b1955fd23c9fc4c34",
          "linkedWithoutMetadata": "6694f2435e88d29c247bea9478935c91db6233a8af3fcd3b1955fd23c9fc4c34"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "7c02ae6ee7db0dcb694106812e79dae358bce7fbffc4ad667ffa3fa32fa739b1",
          "withoutMetadata": "7c02ae6ee7db0dcb694106812e79dae358bce7fbffc4ad667ffa3fa32fa739b1",
          "linkedWithoutMetadata": "7c02ae6ee7db0dcb694106812e79dae358bce7fbffc4ad667ffa3fa32fa739b1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "dee2d557baff49a80acf18b7ee57c6ef3e8d585654eeb2b9fdfc91a56958fee5",
          "withoutMetadata": "dee2d557baff49a80acf18b7ee57c6ef3e8d585654eeb2b9fdfc91a56958fee5",
          "linkedWithoutMetadata": "dee2d557baff49a80acf18b7ee57c6ef3e8d585654eeb2b9fdfc91a56958fee5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9681d062190d9fe6bb74127b866c326e2144a34993b2e6ab44acc23dd805038d",
          "withoutMetadata": "9681d062190d9fe6bb74127b866c326e2144a34993b2e6ab44acc23dd805038d",
          "linkedWithoutMetadata": "9681d062190d9fe6bb74127b866c326e2144a34993b2e6ab44acc23dd805038d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "6ba290626c699f85993ca3f7adbc25a70e99cc09dfb38ebd2674896f13b52ccb",
          "withoutMetadata": "6ba290626c699f85993ca3f7adbc25a70e99cc09dfb38ebd2674896f13b52ccb",
          "linkedWithoutMetadata": "6ba290626c699f85993ca3f7adbc25a70e99cc09dfb38ebd2674896f13b52ccb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/IEIP712.sol:IEIP712": {
        "src": "lib/permit2/src/interfaces/IEIP712.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/ISignatureTransfer.sol:ISignatureTransfer": {
        "src": "lib/permit2/src/interfaces/ISignatureTransfer.sol:9",
        "inherit": [
          "lib/permit2/src/interfaces/IEIP712.sol:IEIP712"
        ],
        "libraries": [],
        "methods": [
          "nonceBitmap(address,uint256)",
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)",
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)",
          "permitTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes)",
          "permitWitnessTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes32,string,bytes)",
          "invalidateUnorderedNonces(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable": {
        "src": "lib/v2-core/src/interfaces/IAdminable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "transferAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Base.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "comptroller()",
          "protocolRevenues(address)",
          "claimProtocolRevenues(address)",
          "setComptroller(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:ISablierV2Comptroller": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "flashFee()",
          "isFlashAsset(address)",
          "protocolFees(address)",
          "setFlashFee(uint256)",
          "setProtocolFee(address,uint256)",
          "toggleFlashAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:13",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getAsset(uint256)",
          "getDepositedAmount(uint256)",
          "getEndTime(uint256)",
          "getRecipient(uint256)",
          "getRefundedAmount(uint256)",
          "getSender(uint256)",
          "getStartTime(uint256)",
          "getWithdrawnAmount(uint256)",
          "isCancelable(uint256)",
          "isCold(uint256)",
          "isDepleted(uint256)",
          "isStream(uint256)",
          "isWarm(uint256)",
          "nextStreamId()",
          "refundableAmountOf(uint256)",
          "statusOf(uint256)",
          "streamedAmountOf(uint256)",
          "wasCanceled(uint256)",
          "withdrawableAmountOf(uint256)",
          "burn(uint256)",
          "cancel(uint256)",
          "cancelMultiple(uint256[])",
          "renounce(uint256)",
          "setNFTDescriptor(address)",
          "withdraw(uint256,address,uint128)",
          "withdrawMax(uint256,address)",
          "withdrawMaxAndTransfer(uint256,address)",
          "withdrawMultiple(uint256[],address,uint128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:ISablierV2LockupDynamic": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_SEGMENT_COUNT()",
          "getRange(uint256)",
          "getSegments(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDeltas((address,bool,address,uint128,address,(address,uint256),struct LockupDynamic.SegmentWithDelta[]))",
          "createWithMilestones((address,uint40,bool,address,uint128,address,(address,uint256),struct LockupDynamic.Segment[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:ISablierV2LockupLinear": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getCliffTime(uint256)",
          "getRange(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))",
          "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:ISablierV2NFTDescriptor": {
        "src": "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:Lockup": {
        "src": "lib/v2-core/src/types/DataTypes.sol:29",
        "version": {
          "withMetadata": "aec1f6285b9fc8ce1accef1cdae56274ebd7066aa48d6a9ca3b55bab867ff880",
          "withoutMetadata": "aec1f6285b9fc8ce1accef1cdae56274ebd7066aa48d6a9ca3b55bab867ff880",
          "linkedWithoutMetadata": "aec1f6285b9fc8ce1accef1cdae56274ebd7066aa48d6a9ca3b55bab867ff880"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupDynamic": {
        "src": "lib/v2-core/src/types/DataTypes.sol:72",
        "version": {
          "withMetadata": "7991dab76e3552502f319534144606b588d0a098682380c3d88af986b860c93f",
          "withoutMetadata": "7991dab76e3552502f319534144606b588d0a098682380c3d88af986b860c93f",
          "linkedWithoutMetadata": "7991dab76e3552502f319534144606b588d0a098682380c3d88af986b860c93f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupLinear": {
        "src": "lib/v2-core/src/types/DataTypes.sol:180",
        "version": {
          "withMetadata": "13567d115319cd24357cc6954d51bcc8b711a3032e9ad978d36923c730ebed5b",
          "withoutMetadata": "13567d115319cd24357cc6954d51bcc8b711a3032e9ad978d36923c730ebed5b",
          "linkedWithoutMetadata": "13567d115319cd24357cc6954d51bcc8b711a3032e9ad978d36923c730ebed5b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/auth/Ownable.sol:Ownable": {
        "src": "solady/src/auth/Ownable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "renounceOwnership()",
          "requestOwnershipHandover()",
          "cancelOwnershipHandover()",
          "completeOwnershipHandover(address)",
          "owner()",
          "ownershipHandoverExpiresAt(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC20.sol:ERC20": {
        "src": "solady/src/tokens/ERC20.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC721.sol:ERC721": {
        "src": "solady/src/tokens/ERC721.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "balanceOf(address)",
          "getApproved(uint256)",
          "approve(address,uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/CREATE3.sol:CREATE3": {
        "src": "solady/src/utils/CREATE3.sol:8",
        "version": {
          "withMetadata": "30437799c7af89c978c88e5ce53b6305d494a03e84ed07a0d1b401015509ca81",
          "withoutMetadata": "30437799c7af89c978c88e5ce53b6305d494a03e84ed07a0d1b401015509ca81",
          "linkedWithoutMetadata": "30437799c7af89c978c88e5ce53b6305d494a03e84ed07a0d1b401015509ca81"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/SafeTransferLib.sol:SafeTransferLib": {
        "src": "solady/src/utils/SafeTransferLib.sol:12",
        "version": {
          "withMetadata": "aee1815cc1145b98c386f5f016b44d58b00deb9e644543d15090c2cf485b768b",
          "withoutMetadata": "aee1815cc1145b98c386f5f016b44d58b00deb9e644543d15090c2cf485b768b",
          "linkedWithoutMetadata": "aee1815cc1145b98c386f5f016b44d58b00deb9e644543d15090c2cf485b768b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "6e6b6dadf481256da5a718ebeb47e2f23b4dcd98599ea736409a7bcc4d5b95b3",
          "withoutMetadata": "6e6b6dadf481256da5a718ebeb47e2f23b4dcd98599ea736409a7bcc4d5b95b3",
          "linkedWithoutMetadata": "6e6b6dadf481256da5a718ebeb47e2f23b4dcd98599ea736409a7bcc4d5b95b3"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "b3aa6b2d0dae890cec41037db495285a8ee6a29922e0d4f48813362c5349a8e7",
          "withoutMetadata": "b3aa6b2d0dae890cec41037db495285a8ee6a29922e0d4f48813362c5349a8e7",
          "linkedWithoutMetadata": "b3aa6b2d0dae890cec41037db495285a8ee6a29922e0d4f48813362c5349a8e7"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "fb740371d8bd7ec2c5093e81bd1eb1769bf3074a7818985c2c144c8020bfe05c",
          "withoutMetadata": "fb740371d8bd7ec2c5093e81bd1eb1769bf3074a7818985c2c144c8020bfe05c",
          "linkedWithoutMetadata": "fb740371d8bd7ec2c5093e81bd1eb1769bf3074a7818985c2c144c8020bfe05c"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "ffb33d09b0c730856232e6e29010110c5d0c6ab6a9cd4cb151662d183a95ca91",
          "withoutMetadata": "ffb33d09b0c730856232e6e29010110c5d0c6ab6a9cd4cb151662d183a95ca91",
          "linkedWithoutMetadata": "ffb33d09b0c730856232e6e29010110c5d0c6ab6a9cd4cb151662d183a95ca91"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "8e3841872bb69de6e2b906edddf2ddcebf30e7c64315ad516ccd9d117054cec3",
          "withoutMetadata": "8e3841872bb69de6e2b906edddf2ddcebf30e7c64315ad516ccd9d117054cec3",
          "linkedWithoutMetadata": "8e3841872bb69de6e2b906edddf2ddcebf30e7c64315ad516ccd9d117054cec3"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "a04db63132492e02b8286b50d6d1fe4aed407db3ae19f48ea835a0644b1c2494",
          "withoutMetadata": "a04db63132492e02b8286b50d6d1fe4aed407db3ae19f48ea835a0644b1c2494",
          "linkedWithoutMetadata": "a04db63132492e02b8286b50d6d1fe4aed407db3ae19f48ea835a0644b1c2494"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "e92a70401db627905aa7734a88b5b0e0f079f418b257f33f62897efb5df8dd5e",
          "withoutMetadata": "e92a70401db627905aa7734a88b5b0e0f079f418b257f33f62897efb5df8dd5e",
          "linkedWithoutMetadata": "e92a70401db627905aa7734a88b5b0e0f079f418b257f33f62897efb5df8dd5e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Allo.sol:Allo": {
        "src": "contracts/core/Allo.sol:89",
        "version": {
          "withMetadata": "1fd326dc0e9452397b7a8469df88e02de32eb0bf759099ff282127800c145fde",
          "withoutMetadata": "1fd326dc0e9452397b7a8469df88e02de32eb0bf759099ff282127800c145fde",
          "linkedWithoutMetadata": "1fd326dc0e9452397b7a8469df88e02de32eb0bf759099ff282127800c145fde"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "solady/src/auth/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IAllo.sol:IAllo"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "getFeeDenominator()",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "isCloneableStrategy(address)",
          "getPool(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "percentFee",
              "offset": 0,
              "slot": "52",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:114"
            },
            {
              "label": "baseFee",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:129"
            },
            {
              "label": "_poolIndex",
              "offset": 0,
              "slot": "54",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "55",
              "type": "t_address_payable",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "56",
              "type": "t_contract(IRegistry)4234",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:133"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "57",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:134"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "58",
              "type": "t_mapping(t_uint256,t_struct(Pool)3753_storage)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:135"
            },
            {
              "label": "cloneableStrategies",
              "offset": 0,
              "slot": "59",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)4405": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)3753_storage)": {
              "label": "mapping(uint256 => struct IAllo.Pool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Pool)3753_storage": {
              "label": "struct IAllo.Pool",
              "members": [
                {
                  "label": "profileId",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "strategy",
                  "type": "t_contract(IStrategy)4405",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "managerRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)19902_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Anchor.sol:Anchor": {
        "src": "contracts/core/Anchor.sol:89",
        "version": {
          "withMetadata": "c8464733f370d2e32a1652bea805a9ea0fbb56b12000818ed1501cd3735b6eef",
          "withoutMetadata": "c8464733f370d2e32a1652bea805a9ea0fbb56b12000818ed1501cd3735b6eef",
          "linkedWithoutMetadata": "c8464733f370d2e32a1652bea805a9ea0fbb56b12000818ed1501cd3735b6eef"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "execute(address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Anchor",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "profileId",
            "src": "contracts/core/Anchor.sol:89"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Registry.sol:Registry": {
        "src": "contracts/core/Registry.sol:103",
        "version": {
          "withMetadata": "911c7298fc6e0bf4813b36ba9cef7fb6c841091009b5eef5d472b2e20cfe2e25",
          "withoutMetadata": "911c7298fc6e0bf4813b36ba9cef7fb6c841091009b5eef5d472b2e20cfe2e25",
          "linkedWithoutMetadata": "911c7298fc6e0bf4813b36ba9cef7fb6c841091009b5eef5d472b2e20cfe2e25"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "contracts/core/libraries/Native.sol:Native",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "contracts/core/interfaces/IRegistry.sol:IRegistry"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "anchorToProfileId",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:109"
            },
            {
              "label": "profilesById",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_struct(Profile)4061_storage)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:111"
            },
            {
              "label": "profileIdToPendingOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:113"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Profile)4061_storage)": {
              "label": "mapping(bytes32 => struct IRegistry.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Profile)4061_storage": {
              "label": "struct IRegistry.Profile",
              "members": [
                {
                  "label": "id",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "anchor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)19902_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IAllo.sol:IAllo": {
        "src": "contracts/core/interfaces/IAllo.sol:97",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "isCloneableStrategy(address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "getPool(uint256)",
          "getFeeDenominator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IRegistry.sol:IRegistry": {
        "src": "contracts/core/interfaces/IRegistry.sol:92",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/core/interfaces/IStrategy.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "isValidAllocator(address)",
          "isPoolActive()",
          "getPoolAmount()",
          "increasePoolAmount(uint256)",
          "getRecipientStatus(address)",
          "getPayouts(address[],bytes[])",
          "initialize(uint256,bytes)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Clone.sol:Clone": {
        "src": "contracts/core/libraries/Clone.sol:37",
        "version": {
          "withMetadata": "dc16aa1fb9dd6b4b9272483f597c275e352f917973188aaca90f40b506e79608",
          "withoutMetadata": "dc16aa1fb9dd6b4b9272483f597c275e352f917973188aaca90f40b506e79608",
          "linkedWithoutMetadata": "dc16aa1fb9dd6b4b9272483f597c275e352f917973188aaca90f40b506e79608"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Errors.sol:Errors": {
        "src": "contracts/core/libraries/Errors.sol:109",
        "version": {
          "withMetadata": "d91404cd60ead4505935cbf5b373b19bf3c98b89baa8896cadfe2257b26204db",
          "withoutMetadata": "d91404cd60ead4505935cbf5b373b19bf3c98b89baa8896cadfe2257b26204db",
          "linkedWithoutMetadata": "d91404cd60ead4505935cbf5b373b19bf3c98b89baa8896cadfe2257b26204db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Native.sol:Native": {
        "src": "contracts/core/libraries/Native.sol:26",
        "version": {
          "withMetadata": "b6e4cc2ca13982649165b7ada17bd81ca180706fdd8cafb679750bb4736d9bfe",
          "withoutMetadata": "b6e4cc2ca13982649165b7ada17bd81ca180706fdd8cafb679750bb4736d9bfe",
          "linkedWithoutMetadata": "b6e4cc2ca13982649165b7ada17bd81ca180706fdd8cafb679750bb4736d9bfe"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Transfer.sol:Transfer": {
        "src": "contracts/core/libraries/Transfer.sol:95",
        "version": {
          "withMetadata": "4de5b07d1febac4a59ce18e1bcad752c839d638846184ff50052ef88155e4544",
          "withoutMetadata": "4de5b07d1febac4a59ce18e1bcad752c839d638846184ff50052ef88155e4544",
          "linkedWithoutMetadata": "4de5b07d1febac4a59ce18e1bcad752c839d638846184ff50052ef88155e4544"
        },
        "inherit": [
          "contracts/core/libraries/Native.sol:Native"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/factory/ContractFactory.sol:ContractFactory": {
        "src": "contracts/factory/ContractFactory.sol:107",
        "version": {
          "withMetadata": "4fa0e8f5edbc09017385034b30b5b987370bca6fdbed909ee21ca3263f43350b",
          "withoutMetadata": "4fa0e8f5edbc09017385034b30b5b987370bca6fdbed909ee21ca3263f43350b",
          "linkedWithoutMetadata": "4fa0e8f5edbc09017385034b30b5b987370bca6fdbed909ee21ca3263f43350b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "deploy(string,string,bytes)",
          "setDeployer(address,bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ContractFactory",
            "src": "contracts/factory/ContractFactory.sol:119"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "usedSalts",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            },
            {
              "label": "isDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/BaseStrategy.sol:BaseStrategy": {
        "src": "contracts/strategies/BaseStrategy.sol:111",
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "getPoolAmount()",
          "isPoolActive()",
          "getRecipientStatus(address)",
          "increasePoolAmount(uint256)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)",
          "getPayouts(address[],bytes[])",
          "isValidAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseStrategy",
            "src": "contracts/strategies/BaseStrategy.sol:129"
          },
          {
            "kind": "state-variable-immutable",
            "name": "allo",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          },
          {
            "kind": "state-variable-immutable",
            "name": "strategyId",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:DirectGrantsSimpleStrategy": {
        "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:112",
        "version": {
          "withMetadata": "3c0fc2fcd7eb59148926f4cf23d9a0b5097d498e88b79df810ec564a89ada852",
          "withoutMetadata": "3c0fc2fcd7eb59148926f4cf23d9a0b5097d498e88b79df810ec564a89ada852",
          "linkedWithoutMetadata": "3c0fc2fcd7eb59148926f4cf23d9a0b5097d498e88b79df810ec564a89ada852"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getMilestoneStatus(address,uint256)",
          "getMilestones(address)",
          "setMilestones(address,struct DirectGrantsSimpleStrategy.Milestone[])",
          "reviewSetMilestones(address,uint8)",
          "submitMilestone(address,uint256,(uint256,string))",
          "rejectMilestone(address,uint256)",
          "setRecipientStatusToInReview(address[])",
          "setPoolActive(bool)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DirectGrantsSimpleStrategy",
            "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:191"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:161"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:162"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:164"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:166"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:167"
            },
            {
              "label": "_acceptedRecipientIds",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:172"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)5493_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:177"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Milestone)5502_storage)dyn_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:179"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:184"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)5502_storage)dyn_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(Milestone)5502_storage)dyn_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Milestone[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5493_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)5502_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)5493_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "milestonesReviewStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:DonationVotingCustomRegistryStrategy": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51",
        "version": {
          "withMetadata": "5436430857dc9cbd25729b19154f8f2a416e11662c36f73bb0689f1ed88a435a",
          "withoutMetadata": "5436430857dc9cbd25729b19154f8f2a416e11662c36f73bb0689f1ed88a435a",
          "linkedWithoutMetadata": "5436430857dc9cbd25729b19154f8f2a416e11662c36f73bb0689f1ed88a435a"
        },
        "inherit": [
          "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingCustomRegistryStrategy",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7094_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(SimpleProjectRegistry)7065",
              "contract": "DonationVotingCustomRegistryStrategy",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(SimpleProjectRegistry)7065": {
              "label": "contract SimpleProjectRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7094_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4252_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7094_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:SimpleProjectRegistry": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:26",
        "version": {
          "withMetadata": "4872ecc84acced32728eed6343875a4d2bfaa01fdd643e8f15da29efd11e4b66",
          "withoutMetadata": "4872ecc84acced32728eed6343875a4d2bfaa01fdd643e8f15da29efd11e4b66",
          "linkedWithoutMetadata": "4872ecc84acced32728eed6343875a4d2bfaa01fdd643e8f15da29efd11e4b66"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addProject(address)",
          "addProjects(address[])",
          "removeProject(address)",
          "removeProjects(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleProjectRegistry",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "projects",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleProjectRegistry",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy": {
        "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:100",
        "version": {
          "withMetadata": "7dba3a5ab68843aa26556498acde934160834e54fd4f950e08a39ca52bd0c942",
          "withoutMetadata": "7dba3a5ab68843aa26556498acde934160834e54fd4f950e08a39ca52bd0c942",
          "linkedWithoutMetadata": "7dba3a5ab68843aa26556498acde934160834e54fd4f950e08a39ca52bd0c942"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "setPayout(address[],uint256[])",
          "claim(struct DonationVotingStrategy.Claim[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingStrategy",
            "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:198"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7094_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7094_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4252_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7094_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:ProportionalPayoutStrategy": {
        "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:112",
        "version": {
          "withMetadata": "47b6c4732b7532505ee90a002b1c3e4429ef81452c3fc2a193702e9478143163",
          "withoutMetadata": "47b6c4732b7532505ee90a002b1c3e4429ef81452c3fc2a193702e9478143163",
          "linkedWithoutMetadata": "47b6c4732b7532505ee90a002b1c3e4429ef81452c3fc2a193702e9478143163"
        },
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "setAllocationTime(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProportionalPayoutStrategy",
            "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:166"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Recipient)8501_storage)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:151"
            },
            {
              "label": "hasAllocated",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:152"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:153"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ERC721)32389",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "maxRecipientsAllowed",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:157"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:158"
            },
            {
              "label": "totalAllocations",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:159"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)32389": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)8501_storage)": {
              "label": "mapping(address => struct ProportionalPayoutStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)8501_storage": {
              "label": "struct ProportionalPayoutStrategy.Recipient",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:QVGovernanceERC20Votes": {
        "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:89",
        "version": {
          "withMetadata": "fe3039d435566705ba44de0c2bc10dc2f582b488503906316b12e363420046e6",
          "withoutMetadata": "fe3039d435566705ba44de0c2bc10dc2f582b488503906316b12e363420046e6",
          "linkedWithoutMetadata": "fe3039d435566705ba44de0c2bc10dc2f582b488503906316b12e363420046e6"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVGovernanceERC20Votes",
            "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:104"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "govToken",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IVotes)20349",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:97"
            },
            {
              "label": "timestamp",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:98"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IVotes)20349": {
              "label": "contract IVotes",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:HackathonQVStrategy": {
        "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:111",
        "version": {
          "withMetadata": "337c0d03719a5a2d0d2b2d1712cc225a491302e6b6b4646116221ad6796448e4",
          "withoutMetadata": "337c0d03719a5a2d0d2b2d1712cc225a491302e6b6b4646116221ad6796448e4",
          "linkedWithoutMetadata": "337c0d03719a5a2d0d2b2d1712cc225a491302e6b6b4646116221ad6796448e4"
        },
        "inherit": [
          "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver",
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllowedRecipientIds(address[],uint64,bytes)",
          "setPayoutPercentages(uint256[])",
          "getPayouts(address[],bytes[])",
          "getAttestation(bytes32)",
          "getSchema(bytes32)",
          "isPayable()",
          "isAttestationExpired(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HackathonQVStrategy",
            "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:148"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "_eas",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IEAS)19040",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            },
            {
              "label": "payoutPercentages",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:130"
            },
            {
              "label": "votesByRank",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:131"
            },
            {
              "label": "easInfo",
              "offset": 0,
              "slot": "14",
              "type": "t_struct(EASInfo)9390_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "19",
              "type": "t_contract(ERC721)32389",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "recipientIdToUID",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:135"
            },
            {
              "label": "recipientIdToIndex",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:137"
            },
            {
              "label": "indexToRecipientId",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:143"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ERC721)32389": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IEAS)19040": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(ISchemaRegistry)19085": {
              "label": "contract ISchemaRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(EASInfo)9390_storage": {
              "label": "struct HackathonQVStrategy.EASInfo",
              "members": [
                {
                  "label": "eas",
                  "type": "t_contract(IEAS)19040",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "schemaRegistry",
                  "type": "t_contract(ISchemaRegistry)19085",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "schemaUID",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "schema",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "revocable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver": {
        "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:19",
        "inherit": [
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver"
        ],
        "libraries": [],
        "methods": [
          "isPayable()",
          "()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_eas",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IEAS)19040",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            }
          ],
          "types": {
            "t_contract(IEAS)19040": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:QVNftTieredStrategy": {
        "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:96",
        "version": {
          "withMetadata": "8ce2b2d04d2cbc4075c9e192aae0f21ad758c8bf41c6bf9f171411cecbff895b",
          "withoutMetadata": "8ce2b2d04d2cbc4075c9e192aae0f21ad758c8bf41c6bf9f171411cecbff895b",
          "linkedWithoutMetadata": "8ce2b2d04d2cbc4075c9e192aae0f21ad758c8bf41c6bf9f171411cecbff895b"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVNftTieredStrategy",
            "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "nfts",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_contract(ERC721)32389)dyn_storage",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:112"
            },
            {
              "label": "maxVoiceCreditsPerNft",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_contract(ERC721)32389,t_uint256)",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:113"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_contract(ERC721)32389,t_mapping(t_uint256,t_uint256))",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(ERC721)32389)dyn_storage": {
              "label": "contract ERC721[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)32389": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)32389,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(contract ERC721 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)32389,t_uint256)": {
              "label": "mapping(contract ERC721 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:LockupDynamicStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:16",
        "version": {
          "withMetadata": "78a29a28f36ddff7c429a2ee168decae3bf8daa6a77af68ae71724fdafb8ef7f",
          "withoutMetadata": "78a29a28f36ddff7c429a2ee168decae3bf8daa6a77af68ae71724fdafb8ef7f",
          "linkedWithoutMetadata": "78a29a28f36ddff7c429a2ee168decae3bf8daa6a77af68ae71724fdafb8ef7f"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientSegments(address,struct LockupDynamic.SegmentWithDelta[])",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupDynamicStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:42"
            },
            {
              "label": "lockupDynamic",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupDynamic)30800",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)30920_storage",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)11146_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(SegmentWithDelta)31004_storage)dyn_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupDynamic)30800": {
              "label": "contract ISablierV2LockupDynamic",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)11146_storage)": {
              "label": "mapping(address => struct LockupDynamicStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)30920_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)30161",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)11146_storage": {
              "label": "struct LockupDynamicStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "segments",
                  "type": "t_array(t_struct(SegmentWithDelta)31004_storage)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(SegmentWithDelta)31004_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exponent",
                  "type": "t_userDefinedValueType(UD2x18)28357",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "delta",
                  "type": "t_uint40",
                  "offset": 24,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD2x18)28357": {
              "label": "UD2x18",
              "numberOfBytes": "8",
              "underlying": "t_uint64"
            },
            "t_userDefinedValueType(UD60x18)30161": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:LockupLinearStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:16",
        "version": {
          "withMetadata": "bfeeb0651fead05e0c72afae72706b21657fa2de9edf67a1012c76c3864e90d6",
          "withoutMetadata": "bfeeb0651fead05e0c72afae72706b21657fa2de9edf67a1012c76c3864e90d6",
          "linkedWithoutMetadata": "bfeeb0651fead05e0c72afae72706b21657fa2de9edf67a1012c76c3864e90d6"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientDurations(address,(uint40,uint40))",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupLinearStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:42"
            },
            {
              "label": "lockupLinear",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupLinear)30889",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)30920_storage",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)12323_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupLinear)30889": {
              "label": "contract ISablierV2LockupLinear",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12323_storage)": {
              "label": "mapping(address => struct LockupLinearStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)30920_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)30161",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Durations)31072_storage": {
              "label": "struct LockupLinear.Durations",
              "members": [
                {
                  "label": "cliff",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "total",
                  "type": "t_uint40",
                  "offset": 5,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12323_storage": {
              "label": "struct LockupLinearStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durations",
                  "type": "t_struct(Durations)31072_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD60x18)30161": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:NFT": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:8",
        "version": {
          "withMetadata": "1d96dede4e4bf1a487a335c1a7f41b8ceb1dde94a7175cfe1b65a0276db974ef",
          "withoutMetadata": "1d96dede4e4bf1a487a335c1a7f41b8ceb1dde94a7175cfe1b65a0276db974ef",
          "linkedWithoutMetadata": "1d96dede4e4bf1a487a335c1a7f41b8ceb1dde94a7175cfe1b65a0276db974ef"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable",
          "solady/src/tokens/ERC721.sol:ERC721"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)",
          "name()",
          "symbol()",
          "mintTo(address)",
          "tokenURI(uint256)",
          "withdrawPayments(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFT",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTokenId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:16"
            },
            {
              "label": "MINT_PRICE",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:17"
            },
            {
              "label": "__name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:20"
            },
            {
              "label": "__symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:NFTFactory": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:6",
        "version": {
          "withMetadata": "aa5d8ba55d2e9bddefa5d7dd4fead5d7ab79f2686e534557832aa8e5bdbbd445",
          "withoutMetadata": "aa5d8ba55d2e9bddefa5d7dd4fead5d7ab79f2686e534557832aa8e5bdbbd445",
          "linkedWithoutMetadata": "aa5d8ba55d2e9bddefa5d7dd4fead5d7ab79f2686e534557832aa8e5bdbbd445"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createNFTContract(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isNFTContract",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NFTFactory",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:WrappedVotingNftMintStrategy": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:100",
        "version": {
          "withMetadata": "8db4ed40895f39ee1913a60d6fec3f3cd3a6c082b04f191a55b0dd3edd52a030",
          "withoutMetadata": "8db4ed40895f39ee1913a60d6fec3f3cd3a6c082b04f191a55b0dd3edd52a030",
          "linkedWithoutMetadata": "8db4ed40895f39ee1913a60d6fec3f3cd3a6c082b04f191a55b0dd3edd52a030"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllocationTimes(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrappedVotingNftMintStrategy",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:147"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "nftFactory",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(NFTFactory)13537",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:134"
            },
            {
              "label": "allocationStartTime",
              "offset": 20,
              "slot": "4",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "currentWinner",
              "offset": 8,
              "slot": "5",
              "type": "t_address",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "allocations",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(NFTFactory)13537": {
              "label": "contract NFTFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:99",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(struct DonationVotingMerkleDistributionBaseStrategy.ApplicationStatus[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "updateDistribution(bytes32,(uint256,string))",
          "isDistributionSet()",
          "hasBeenDistributed(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionBaseStrategy",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:286"
          },
          {
            "kind": "state-variable-immutable",
            "name": "PERMIT2",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:230"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4531_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)14108_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14108_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14108_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:DonationVotingMerkleDistributionDirectTransferStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76",
        "version": {
          "withMetadata": "e6832de21474c500956967331c1c1fb2e065816bcbc49e6f30ec644620d9367a",
          "withoutMetadata": "e6832de21474c500956967331c1c1fb2e065816bcbc49e6f30ec644620d9367a",
          "linkedWithoutMetadata": "e6832de21474c500956967331c1c1fb2e065816bcbc49e6f30ec644620d9367a"
        },
        "inherit": [
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionDirectTransferStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4531_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)14108_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14108_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14108_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:DonationVotingMerkleDistributionVaultStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:92",
        "version": {
          "withMetadata": "a5219a82b1a79832a2da5b55044857a54cbe9fd0e75d93d6634708ef5895b194",
          "withoutMetadata": "a5219a82b1a79832a2da5b55044857a54cbe9fd0e75d93d6634708ef5895b194",
          "linkedWithoutMetadata": "a5219a82b1a79832a2da5b55044857a54cbe9fd0e75d93d6634708ef5895b194"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)",
          "claim(struct DonationVotingMerkleDistributionVaultStrategy.Claim[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionVaultStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4531_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)14108_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "16",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "16",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "18",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "67",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14108_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14108_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy": {
        "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:89",
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVBaseStrategy",
            "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:258"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-simple/QVSimpleStrategy.sol:QVSimpleStrategy": {
        "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:89",
        "version": {
          "withMetadata": "aacb8075e5bd0625fa1640d479dd384cb2d1a20820fe83aa04e6a7feb520ba2f",
          "withoutMetadata": "aacb8075e5bd0625fa1640d479dd384cb2d1a20820fe83aa04e6a7feb520ba2f",
          "linkedWithoutMetadata": "aacb8075e5bd0625fa1640d479dd384cb2d1a20820fe83aa04e6a7feb520ba2f"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "addAllocator(address)",
          "removeAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVSimpleStrategy",
            "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:121"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:108"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:111"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:RFPCommitteeStrategy": {
        "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:83",
        "version": {
          "withMetadata": "fabb72fa13ca42e8713616a60823dca80a6199879487dd1b3219225aeee674b6",
          "withoutMetadata": "fabb72fa13ca42e8713616a60823dca80a6199879487dd1b3219225aeee674b6",
          "linkedWithoutMetadata": "fabb72fa13ca42e8713616a60823dca80a6199879487dd1b3219225aeee674b6"
        },
        "inherit": [
          "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPCommitteeStrategy",
            "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4234",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)17670_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)17661_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "voteThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:104"
            },
            {
              "label": "votedFor",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:109"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:114"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)17670_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17661_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)17670_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)17661_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy": {
        "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:107",
        "version": {
          "withMetadata": "14c4702620d2a24cf0252e5a06c37de9594d71fe84e9fbf0cff0a775ebab83cc",
          "withoutMetadata": "14c4702620d2a24cf0252e5a06c37de9594d71fe84e9fbf0cff0a775ebab83cc",
          "linkedWithoutMetadata": "14c4702620d2a24cf0252e5a06c37de9594d71fe84e9fbf0cff0a775ebab83cc"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getPayouts(address[],bytes[])",
          "getMilestone(uint256)",
          "getMilestoneStatus(uint256)",
          "setPoolActive(bool)",
          "setMilestones(struct RFPSimpleStrategy.Milestone[])",
          "submitUpcomingMilestone((uint256,string))",
          "increaseMaxBid(uint256)",
          "rejectMilestone(uint256)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPSimpleStrategy",
            "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:199"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4234",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)17670_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)17661_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)17670_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Recipient)17661_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)17670_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)17661_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/IEAS.sol:IEAS": {
        "src": "lib/eas-contracts/contracts/IEAS.sol:82",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSchemaRegistry()",
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))",
          "multiAttest(struct MultiAttestationRequest[])",
          "multiAttestByDelegation(struct MultiDelegatedAttestationRequest[])",
          "revoke((bytes32,(bytes32,uint256)))",
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))",
          "multiRevoke(struct MultiRevocationRequest[])",
          "multiRevokeByDelegation(struct MultiDelegatedRevocationRequest[])",
          "timestamp(bytes32)",
          "multiTimestamp(bytes32[])",
          "revokeOffchain(bytes32)",
          "multiRevokeOffchain(bytes32[])",
          "getAttestation(bytes32)",
          "isAttestationValid(bytes32)",
          "getTimestamp(bytes32)",
          "getRevokeOffchain(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol:ISchemaRegistry": {
        "src": "lib/eas-contracts/contracts/ISchemaRegistry.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "register(string,address,bool)",
          "getSchema(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver": {
        "src": "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:19",
        "version": {
          "withMetadata": "ed16f8429eb254d93d9630c2d2344a49a2a1851803d9bfa0370770923da86197",
          "withoutMetadata": "ed16f8429eb254d93d9630c2d2344a49a2a1851803d9bfa0370770923da86197",
          "linkedWithoutMetadata": "ed16f8429eb254d93d9630c2d2344a49a2a1851803d9bfa0370770923da86197"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "1f8def96aa7a82e95878f61f697fb087b9e4ddfda2277db9d45f856d0a1d4562",
          "withoutMetadata": "1f8def96aa7a82e95878f61f697fb087b9e4ddfda2277db9d45f856d0a1d4562",
          "linkedWithoutMetadata": "1f8def96aa7a82e95878f61f697fb087b9e4ddfda2277db9d45f856d0a1d4562"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:50",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19902_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "0d4cf4baed82839eb852a6f9e82eb53e59cb876e75a90b36d70e45016331267f",
          "withoutMetadata": "0d4cf4baed82839eb852a6f9e82eb53e59cb876e75a90b36d70e45016331267f",
          "linkedWithoutMetadata": "0d4cf4baed82839eb852a6f9e82eb53e59cb876e75a90b36d70e45016331267f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "76b6a2d9fed7655756962087153015babe29bd98f3a08ff2447561fb430faa10",
          "withoutMetadata": "76b6a2d9fed7655756962087153015babe29bd98f3a08ff2447561fb430faa10",
          "linkedWithoutMetadata": "76b6a2d9fed7655756962087153015babe29bd98f3a08ff2447561fb430faa10"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "ab9dde492f795b94a8f7797f8d3a8dcc3d0ed91e55584caeb7c7a0d8aed2514a",
          "withoutMetadata": "ab9dde492f795b94a8f7797f8d3a8dcc3d0ed91e55584caeb7c7a0d8aed2514a",
          "linkedWithoutMetadata": "ab9dde492f795b94a8f7797f8d3a8dcc3d0ed91e55584caeb7c7a0d8aed2514a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "8f85ccd77a8097742925e67e249116e51ca4d73921171937c0e07e4a15f7ecab",
          "withoutMetadata": "8f85ccd77a8097742925e67e249116e51ca4d73921171937c0e07e4a15f7ecab",
          "linkedWithoutMetadata": "8f85ccd77a8097742925e67e249116e51ca4d73921171937c0e07e4a15f7ecab"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "a7ca15121e0b9a05cf300ae7132e86543ccba4d722fce3efeea4df175094c354",
          "withoutMetadata": "a7ca15121e0b9a05cf300ae7132e86543ccba4d722fce3efeea4df175094c354",
          "linkedWithoutMetadata": "a7ca15121e0b9a05cf300ae7132e86543ccba4d722fce3efeea4df175094c354"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "ef4d490b822cc99cbe5f4e65c2c7a533b01f5759c661f7b2c993a5b8f2501ebe",
          "withoutMetadata": "ef4d490b822cc99cbe5f4e65c2c7a533b01f5759c661f7b2c993a5b8f2501ebe",
          "linkedWithoutMetadata": "ef4d490b822cc99cbe5f4e65c2c7a533b01f5759c661f7b2c993a5b8f2501ebe"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/IEIP712.sol:IEIP712": {
        "src": "lib/permit2/src/interfaces/IEIP712.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/ISignatureTransfer.sol:ISignatureTransfer": {
        "src": "lib/permit2/src/interfaces/ISignatureTransfer.sol:9",
        "inherit": [
          "lib/permit2/src/interfaces/IEIP712.sol:IEIP712"
        ],
        "libraries": [],
        "methods": [
          "nonceBitmap(address,uint256)",
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)",
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)",
          "permitTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes)",
          "permitWitnessTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes32,string,bytes)",
          "invalidateUnorderedNonces(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable": {
        "src": "lib/v2-core/src/interfaces/IAdminable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "transferAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Base.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "comptroller()",
          "protocolRevenues(address)",
          "claimProtocolRevenues(address)",
          "setComptroller(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:ISablierV2Comptroller": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "flashFee()",
          "isFlashAsset(address)",
          "protocolFees(address)",
          "setFlashFee(uint256)",
          "setProtocolFee(address,uint256)",
          "toggleFlashAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:13",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getAsset(uint256)",
          "getDepositedAmount(uint256)",
          "getEndTime(uint256)",
          "getRecipient(uint256)",
          "getRefundedAmount(uint256)",
          "getSender(uint256)",
          "getStartTime(uint256)",
          "getWithdrawnAmount(uint256)",
          "isCancelable(uint256)",
          "isCold(uint256)",
          "isDepleted(uint256)",
          "isStream(uint256)",
          "isWarm(uint256)",
          "nextStreamId()",
          "refundableAmountOf(uint256)",
          "statusOf(uint256)",
          "streamedAmountOf(uint256)",
          "wasCanceled(uint256)",
          "withdrawableAmountOf(uint256)",
          "burn(uint256)",
          "cancel(uint256)",
          "cancelMultiple(uint256[])",
          "renounce(uint256)",
          "setNFTDescriptor(address)",
          "withdraw(uint256,address,uint128)",
          "withdrawMax(uint256,address)",
          "withdrawMaxAndTransfer(uint256,address)",
          "withdrawMultiple(uint256[],address,uint128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:ISablierV2LockupDynamic": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_SEGMENT_COUNT()",
          "getRange(uint256)",
          "getSegments(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDeltas((address,bool,address,uint128,address,(address,uint256),struct LockupDynamic.SegmentWithDelta[]))",
          "createWithMilestones((address,uint40,bool,address,uint128,address,(address,uint256),struct LockupDynamic.Segment[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:ISablierV2LockupLinear": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getCliffTime(uint256)",
          "getRange(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))",
          "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:ISablierV2NFTDescriptor": {
        "src": "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:Lockup": {
        "src": "lib/v2-core/src/types/DataTypes.sol:29",
        "version": {
          "withMetadata": "ef8dc1b1fc67ff7ed0bb9c3cc767cf2d8a0deb1a39286158b8016c9d1dc56956",
          "withoutMetadata": "ef8dc1b1fc67ff7ed0bb9c3cc767cf2d8a0deb1a39286158b8016c9d1dc56956",
          "linkedWithoutMetadata": "ef8dc1b1fc67ff7ed0bb9c3cc767cf2d8a0deb1a39286158b8016c9d1dc56956"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupDynamic": {
        "src": "lib/v2-core/src/types/DataTypes.sol:72",
        "version": {
          "withMetadata": "ee2e3b7d2092b3c4e547e5df35693377861bb3b269f1425d0fd93bf07f237125",
          "withoutMetadata": "ee2e3b7d2092b3c4e547e5df35693377861bb3b269f1425d0fd93bf07f237125",
          "linkedWithoutMetadata": "ee2e3b7d2092b3c4e547e5df35693377861bb3b269f1425d0fd93bf07f237125"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupLinear": {
        "src": "lib/v2-core/src/types/DataTypes.sol:180",
        "version": {
          "withMetadata": "555688ae1daca598f547d0a82f93ad62e41d1fc7db3d89b9a435eaa9873b3b6b",
          "withoutMetadata": "555688ae1daca598f547d0a82f93ad62e41d1fc7db3d89b9a435eaa9873b3b6b",
          "linkedWithoutMetadata": "555688ae1daca598f547d0a82f93ad62e41d1fc7db3d89b9a435eaa9873b3b6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/auth/Ownable.sol:Ownable": {
        "src": "solady/src/auth/Ownable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "renounceOwnership()",
          "requestOwnershipHandover()",
          "cancelOwnershipHandover()",
          "completeOwnershipHandover(address)",
          "owner()",
          "ownershipHandoverExpiresAt(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC20.sol:ERC20": {
        "src": "solady/src/tokens/ERC20.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC721.sol:ERC721": {
        "src": "solady/src/tokens/ERC721.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "balanceOf(address)",
          "getApproved(uint256)",
          "approve(address,uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/CREATE3.sol:CREATE3": {
        "src": "solady/src/utils/CREATE3.sol:8",
        "version": {
          "withMetadata": "4eefab8a49edfc43346a3cd34173d22ca90a5cc1524d6842f86e7a459d0130d6",
          "withoutMetadata": "4eefab8a49edfc43346a3cd34173d22ca90a5cc1524d6842f86e7a459d0130d6",
          "linkedWithoutMetadata": "4eefab8a49edfc43346a3cd34173d22ca90a5cc1524d6842f86e7a459d0130d6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/SafeTransferLib.sol:SafeTransferLib": {
        "src": "solady/src/utils/SafeTransferLib.sol:12",
        "version": {
          "withMetadata": "c43e1383ef3d8e1a40d60d83ec455ce207f2c76fd422e4a516d243f0cad20e86",
          "withoutMetadata": "c43e1383ef3d8e1a40d60d83ec455ce207f2c76fd422e4a516d243f0cad20e86",
          "linkedWithoutMetadata": "c43e1383ef3d8e1a40d60d83ec455ce207f2c76fd422e4a516d243f0cad20e86"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "df878802c17702b9939190e59d6a0dd7e7d13e6fcba4edc998868b2ce3d5e161",
          "withoutMetadata": "df878802c17702b9939190e59d6a0dd7e7d13e6fcba4edc998868b2ce3d5e161",
          "linkedWithoutMetadata": "df878802c17702b9939190e59d6a0dd7e7d13e6fcba4edc998868b2ce3d5e161"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "49870c267861c05cd8851a77a18693ff9afc1b813d708a024b11a5fd11e6cbbd",
          "withoutMetadata": "49870c267861c05cd8851a77a18693ff9afc1b813d708a024b11a5fd11e6cbbd",
          "linkedWithoutMetadata": "49870c267861c05cd8851a77a18693ff9afc1b813d708a024b11a5fd11e6cbbd"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "7311e22e67d3e0985e1d9c6412f73bb7143b013bace73c620b759f0b4bded87a",
          "withoutMetadata": "7311e22e67d3e0985e1d9c6412f73bb7143b013bace73c620b759f0b4bded87a",
          "linkedWithoutMetadata": "7311e22e67d3e0985e1d9c6412f73bb7143b013bace73c620b759f0b4bded87a"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "d0614e13d02020e7b61eea4f5b1883c7ea75979b88d26e83deca96797439c019",
          "withoutMetadata": "d0614e13d02020e7b61eea4f5b1883c7ea75979b88d26e83deca96797439c019",
          "linkedWithoutMetadata": "d0614e13d02020e7b61eea4f5b1883c7ea75979b88d26e83deca96797439c019"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "2a71c32e332df633d3ff6bb9d45333666432674b0dc212b28731ca5008d2210f",
          "withoutMetadata": "2a71c32e332df633d3ff6bb9d45333666432674b0dc212b28731ca5008d2210f",
          "linkedWithoutMetadata": "2a71c32e332df633d3ff6bb9d45333666432674b0dc212b28731ca5008d2210f"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "5c2650967379de439d1eb4f4398e9ba0fb06a752ebf5d90dd95a2971e8201749",
          "withoutMetadata": "5c2650967379de439d1eb4f4398e9ba0fb06a752ebf5d90dd95a2971e8201749",
          "linkedWithoutMetadata": "5c2650967379de439d1eb4f4398e9ba0fb06a752ebf5d90dd95a2971e8201749"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "f006eaba308a27f94f0952f78e301b7333f863ae4e1d47cb722291acc4ab9b15",
          "withoutMetadata": "f006eaba308a27f94f0952f78e301b7333f863ae4e1d47cb722291acc4ab9b15",
          "linkedWithoutMetadata": "f006eaba308a27f94f0952f78e301b7333f863ae4e1d47cb722291acc4ab9b15"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Allo.sol:Allo": {
        "src": "contracts/core/Allo.sol:89",
        "version": {
          "withMetadata": "6f13e85c69cd3fe5914d666be2e9b8945bab5edc27adde21c32c235a026a4ce1",
          "withoutMetadata": "6f13e85c69cd3fe5914d666be2e9b8945bab5edc27adde21c32c235a026a4ce1",
          "linkedWithoutMetadata": "6f13e85c69cd3fe5914d666be2e9b8945bab5edc27adde21c32c235a026a4ce1"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "solady/src/auth/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IAllo.sol:IAllo"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "getFeeDenominator()",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "isCloneableStrategy(address)",
          "getPool(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19903_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "percentFee",
              "offset": 0,
              "slot": "52",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:114"
            },
            {
              "label": "baseFee",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:129"
            },
            {
              "label": "_poolIndex",
              "offset": 0,
              "slot": "54",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "55",
              "type": "t_address_payable",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "56",
              "type": "t_contract(IRegistry)4234",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:133"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "57",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:134"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "58",
              "type": "t_mapping(t_uint256,t_struct(Pool)3753_storage)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:135"
            },
            {
              "label": "cloneableStrategies",
              "offset": 0,
              "slot": "59",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)4405": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19903_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)3753_storage)": {
              "label": "mapping(uint256 => struct IAllo.Pool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Pool)3753_storage": {
              "label": "struct IAllo.Pool",
              "members": [
                {
                  "label": "profileId",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "strategy",
                  "type": "t_contract(IStrategy)4405",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "managerRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)19903_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Anchor.sol:Anchor": {
        "src": "contracts/core/Anchor.sol:89",
        "version": {
          "withMetadata": "612d1e183db7e5c51df32dcc5486e0fa72ed8341f9b2db7f95269595c087d4be",
          "withoutMetadata": "612d1e183db7e5c51df32dcc5486e0fa72ed8341f9b2db7f95269595c087d4be",
          "linkedWithoutMetadata": "612d1e183db7e5c51df32dcc5486e0fa72ed8341f9b2db7f95269595c087d4be"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "execute(address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Anchor",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "profileId",
            "src": "contracts/core/Anchor.sol:89"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Registry.sol:Registry": {
        "src": "contracts/core/Registry.sol:103",
        "version": {
          "withMetadata": "62e79c123ebb73199bf97ca06f207368292fe8e246dcb65f1cba0b4b0d240788",
          "withoutMetadata": "62e79c123ebb73199bf97ca06f207368292fe8e246dcb65f1cba0b4b0d240788",
          "linkedWithoutMetadata": "62e79c123ebb73199bf97ca06f207368292fe8e246dcb65f1cba0b4b0d240788"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "contracts/core/libraries/Native.sol:Native",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "contracts/core/interfaces/IRegistry.sol:IRegistry"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19903_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "anchorToProfileId",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:109"
            },
            {
              "label": "profilesById",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_struct(Profile)4061_storage)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:111"
            },
            {
              "label": "profileIdToPendingOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:113"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Profile)4061_storage)": {
              "label": "mapping(bytes32 => struct IRegistry.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19903_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Profile)4061_storage": {
              "label": "struct IRegistry.Profile",
              "members": [
                {
                  "label": "id",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "anchor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)19903_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IAllo.sol:IAllo": {
        "src": "contracts/core/interfaces/IAllo.sol:97",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "isCloneableStrategy(address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "getPool(uint256)",
          "getFeeDenominator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IRegistry.sol:IRegistry": {
        "src": "contracts/core/interfaces/IRegistry.sol:92",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/core/interfaces/IStrategy.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "isValidAllocator(address)",
          "isPoolActive()",
          "getPoolAmount()",
          "increasePoolAmount(uint256)",
          "getRecipientStatus(address)",
          "getPayouts(address[],bytes[])",
          "initialize(uint256,bytes)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Clone.sol:Clone": {
        "src": "contracts/core/libraries/Clone.sol:37",
        "version": {
          "withMetadata": "236d86aa7b15e425a2d1615b014efebda6c6a89dd2f419c478eeae3f06661d04",
          "withoutMetadata": "236d86aa7b15e425a2d1615b014efebda6c6a89dd2f419c478eeae3f06661d04",
          "linkedWithoutMetadata": "236d86aa7b15e425a2d1615b014efebda6c6a89dd2f419c478eeae3f06661d04"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Errors.sol:Errors": {
        "src": "contracts/core/libraries/Errors.sol:109",
        "version": {
          "withMetadata": "1d6a3226826e878ef2f1304b4100c6b2e3ac951584622bbf4c64573ba26b6846",
          "withoutMetadata": "1d6a3226826e878ef2f1304b4100c6b2e3ac951584622bbf4c64573ba26b6846",
          "linkedWithoutMetadata": "1d6a3226826e878ef2f1304b4100c6b2e3ac951584622bbf4c64573ba26b6846"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Native.sol:Native": {
        "src": "contracts/core/libraries/Native.sol:26",
        "version": {
          "withMetadata": "8f49bf8218f6d1dd8f4a2f6bc604a9be7f07fe699d47c5cb0d0ce841c4f60316",
          "withoutMetadata": "8f49bf8218f6d1dd8f4a2f6bc604a9be7f07fe699d47c5cb0d0ce841c4f60316",
          "linkedWithoutMetadata": "8f49bf8218f6d1dd8f4a2f6bc604a9be7f07fe699d47c5cb0d0ce841c4f60316"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Transfer.sol:Transfer": {
        "src": "contracts/core/libraries/Transfer.sol:95",
        "version": {
          "withMetadata": "6d09a50898a120281754a0372b028f52fefcd816bc174b40a393cc9e7efae73c",
          "withoutMetadata": "6d09a50898a120281754a0372b028f52fefcd816bc174b40a393cc9e7efae73c",
          "linkedWithoutMetadata": "6d09a50898a120281754a0372b028f52fefcd816bc174b40a393cc9e7efae73c"
        },
        "inherit": [
          "contracts/core/libraries/Native.sol:Native"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/factory/ContractFactory.sol:ContractFactory": {
        "src": "contracts/factory/ContractFactory.sol:107",
        "version": {
          "withMetadata": "e61e3400478278b7d2d32ebb3d335b710c5998a60e28a56d485183b416058fad",
          "withoutMetadata": "e61e3400478278b7d2d32ebb3d335b710c5998a60e28a56d485183b416058fad",
          "linkedWithoutMetadata": "e61e3400478278b7d2d32ebb3d335b710c5998a60e28a56d485183b416058fad"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "deploy(string,string,bytes)",
          "setDeployer(address,bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ContractFactory",
            "src": "contracts/factory/ContractFactory.sol:119"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "usedSalts",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            },
            {
              "label": "isDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/BaseStrategy.sol:BaseStrategy": {
        "src": "contracts/strategies/BaseStrategy.sol:111",
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "getPoolAmount()",
          "isPoolActive()",
          "getRecipientStatus(address)",
          "increasePoolAmount(uint256)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)",
          "getPayouts(address[],bytes[])",
          "isValidAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseStrategy",
            "src": "contracts/strategies/BaseStrategy.sol:129"
          },
          {
            "kind": "state-variable-immutable",
            "name": "allo",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          },
          {
            "kind": "state-variable-immutable",
            "name": "strategyId",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:DirectGrantsSimpleStrategy": {
        "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:112",
        "version": {
          "withMetadata": "79c1f218d1533286b0ef091aaa0bc6835187e517bc3388fe999d1b881cf40e6d",
          "withoutMetadata": "79c1f218d1533286b0ef091aaa0bc6835187e517bc3388fe999d1b881cf40e6d",
          "linkedWithoutMetadata": "79c1f218d1533286b0ef091aaa0bc6835187e517bc3388fe999d1b881cf40e6d"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getMilestoneStatus(address,uint256)",
          "getMilestones(address)",
          "setMilestones(address,struct DirectGrantsSimpleStrategy.Milestone[])",
          "reviewSetMilestones(address,uint8)",
          "submitMilestone(address,uint256,(uint256,string))",
          "rejectMilestone(address,uint256)",
          "setRecipientStatusToInReview(address[])",
          "setPoolActive(bool)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DirectGrantsSimpleStrategy",
            "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:191"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:161"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:162"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:164"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:166"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:167"
            },
            {
              "label": "_acceptedRecipientIds",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:172"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)5493_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:177"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Milestone)5502_storage)dyn_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:179"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:184"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)5502_storage)dyn_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(Milestone)5502_storage)dyn_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Milestone[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5493_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)5502_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)5493_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "milestonesReviewStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:DonationVotingCustomRegistryStrategy": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51",
        "version": {
          "withMetadata": "a4f72afbf978721c4ed97ae1c04f3df39e723761e27e7b9bc2f619711e1fd2d9",
          "withoutMetadata": "a4f72afbf978721c4ed97ae1c04f3df39e723761e27e7b9bc2f619711e1fd2d9",
          "linkedWithoutMetadata": "a4f72afbf978721c4ed97ae1c04f3df39e723761e27e7b9bc2f619711e1fd2d9"
        },
        "inherit": [
          "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingCustomRegistryStrategy",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7094_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(SimpleProjectRegistry)7065",
              "contract": "DonationVotingCustomRegistryStrategy",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(SimpleProjectRegistry)7065": {
              "label": "contract SimpleProjectRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7094_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4252_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7094_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:SimpleProjectRegistry": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:26",
        "version": {
          "withMetadata": "e42b32c0659ffeb1e27c9bfd4af48169940da8d5fe2846cc4b1512902e44f040",
          "withoutMetadata": "e42b32c0659ffeb1e27c9bfd4af48169940da8d5fe2846cc4b1512902e44f040",
          "linkedWithoutMetadata": "e42b32c0659ffeb1e27c9bfd4af48169940da8d5fe2846cc4b1512902e44f040"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addProject(address)",
          "addProjects(address[])",
          "removeProject(address)",
          "removeProjects(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleProjectRegistry",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "projects",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleProjectRegistry",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy": {
        "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:100",
        "version": {
          "withMetadata": "7cd7e816d080a83f7588d9e04490f99519a059d7bb4d7ffcb19173933f66a327",
          "withoutMetadata": "7cd7e816d080a83f7588d9e04490f99519a059d7bb4d7ffcb19173933f66a327",
          "linkedWithoutMetadata": "7cd7e816d080a83f7588d9e04490f99519a059d7bb4d7ffcb19173933f66a327"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "setPayout(address[],uint256[])",
          "claim(struct DonationVotingStrategy.Claim[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingStrategy",
            "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:198"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7094_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7094_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4252_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7094_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:ProportionalPayoutStrategy": {
        "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:112",
        "version": {
          "withMetadata": "40285487b462cb6caefa040d9b09ab2ce9fed729365f8dbbcbcc0306c6a8a867",
          "withoutMetadata": "40285487b462cb6caefa040d9b09ab2ce9fed729365f8dbbcbcc0306c6a8a867",
          "linkedWithoutMetadata": "40285487b462cb6caefa040d9b09ab2ce9fed729365f8dbbcbcc0306c6a8a867"
        },
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "setAllocationTime(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProportionalPayoutStrategy",
            "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:166"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Recipient)8501_storage)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:151"
            },
            {
              "label": "hasAllocated",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:152"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:153"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ERC721)32390",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "maxRecipientsAllowed",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:157"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:158"
            },
            {
              "label": "totalAllocations",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:159"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)32390": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)8501_storage)": {
              "label": "mapping(address => struct ProportionalPayoutStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)8501_storage": {
              "label": "struct ProportionalPayoutStrategy.Recipient",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:QVGovernanceERC20Votes": {
        "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:89",
        "version": {
          "withMetadata": "13288ad412599359e2221dc690d74eb72f7edb248e60ca921297f4f799aa5e58",
          "withoutMetadata": "13288ad412599359e2221dc690d74eb72f7edb248e60ca921297f4f799aa5e58",
          "linkedWithoutMetadata": "13288ad412599359e2221dc690d74eb72f7edb248e60ca921297f4f799aa5e58"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVGovernanceERC20Votes",
            "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:104"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16161_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16172_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "govToken",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IVotes)20350",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:97"
            },
            {
              "label": "timestamp",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:98"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IVotes)20350": {
              "label": "contract IVotes",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16172_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16161_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16172_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16161_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:HackathonQVStrategy": {
        "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:111",
        "version": {
          "withMetadata": "71a6412e0f062fa637a8fd176f5b594264c9befa635577caf9a5e66f33f85a16",
          "withoutMetadata": "71a6412e0f062fa637a8fd176f5b594264c9befa635577caf9a5e66f33f85a16",
          "linkedWithoutMetadata": "71a6412e0f062fa637a8fd176f5b594264c9befa635577caf9a5e66f33f85a16"
        },
        "inherit": [
          "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver",
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllowedRecipientIds(address[],uint64,bytes)",
          "setPayoutPercentages(uint256[])",
          "getPayouts(address[],bytes[])",
          "getAttestation(bytes32)",
          "getSchema(bytes32)",
          "isPayable()",
          "isAttestationExpired(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HackathonQVStrategy",
            "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:148"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16161_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16172_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "_eas",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IEAS)19041",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            },
            {
              "label": "payoutPercentages",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:130"
            },
            {
              "label": "votesByRank",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:131"
            },
            {
              "label": "easInfo",
              "offset": 0,
              "slot": "14",
              "type": "t_struct(EASInfo)9391_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "19",
              "type": "t_contract(ERC721)32390",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "recipientIdToUID",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:135"
            },
            {
              "label": "recipientIdToIndex",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:137"
            },
            {
              "label": "indexToRecipientId",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:143"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ERC721)32390": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IEAS)19041": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(ISchemaRegistry)19086": {
              "label": "contract ISchemaRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16172_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16161_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16172_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(EASInfo)9391_storage": {
              "label": "struct HackathonQVStrategy.EASInfo",
              "members": [
                {
                  "label": "eas",
                  "type": "t_contract(IEAS)19041",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "schemaRegistry",
                  "type": "t_contract(ISchemaRegistry)19086",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "schemaUID",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "schema",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "revocable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16161_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver": {
        "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:19",
        "inherit": [
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver"
        ],
        "libraries": [],
        "methods": [
          "isPayable()",
          "()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_eas",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IEAS)19041",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            }
          ],
          "types": {
            "t_contract(IEAS)19041": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:QVNftTieredStrategy": {
        "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:96",
        "version": {
          "withMetadata": "f9df2486aebbf977bc72dd9d3c00ac84447b0fa86d9a0895415a4ab5debab5b0",
          "withoutMetadata": "f9df2486aebbf977bc72dd9d3c00ac84447b0fa86d9a0895415a4ab5debab5b0",
          "linkedWithoutMetadata": "f9df2486aebbf977bc72dd9d3c00ac84447b0fa86d9a0895415a4ab5debab5b0"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVNftTieredStrategy",
            "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16161_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16172_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "nfts",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_contract(ERC721)32390)dyn_storage",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:112"
            },
            {
              "label": "maxVoiceCreditsPerNft",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_contract(ERC721)32390,t_uint256)",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:113"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_contract(ERC721)32390,t_mapping(t_uint256,t_uint256))",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(ERC721)32390)dyn_storage": {
              "label": "contract ERC721[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)32390": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16172_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16161_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)32390,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(contract ERC721 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)32390,t_uint256)": {
              "label": "mapping(contract ERC721 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16172_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16161_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:LockupDynamicStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:16",
        "version": {
          "withMetadata": "efd9cbcad460f7ae9c8cb9ee3ff197b23c997eacf8f77f14fa8fdb5a70b1cac0",
          "withoutMetadata": "efd9cbcad460f7ae9c8cb9ee3ff197b23c997eacf8f77f14fa8fdb5a70b1cac0",
          "linkedWithoutMetadata": "efd9cbcad460f7ae9c8cb9ee3ff197b23c997eacf8f77f14fa8fdb5a70b1cac0"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientSegments(address,struct LockupDynamic.SegmentWithDelta[])",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupDynamicStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:42"
            },
            {
              "label": "lockupDynamic",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupDynamic)30801",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)30921_storage",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)11147_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(SegmentWithDelta)31005_storage)dyn_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupDynamic)30801": {
              "label": "contract ISablierV2LockupDynamic",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)11147_storage)": {
              "label": "mapping(address => struct LockupDynamicStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)30921_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)30162",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)11147_storage": {
              "label": "struct LockupDynamicStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "segments",
                  "type": "t_array(t_struct(SegmentWithDelta)31005_storage)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(SegmentWithDelta)31005_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exponent",
                  "type": "t_userDefinedValueType(UD2x18)28358",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "delta",
                  "type": "t_uint40",
                  "offset": 24,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD2x18)28358": {
              "label": "UD2x18",
              "numberOfBytes": "8",
              "underlying": "t_uint64"
            },
            "t_userDefinedValueType(UD60x18)30162": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:LockupLinearStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:16",
        "version": {
          "withMetadata": "747a9a779da0f3cbd2cd4712b382d61dc90a0365cdbd98c4f82b933f6b4b4c39",
          "withoutMetadata": "747a9a779da0f3cbd2cd4712b382d61dc90a0365cdbd98c4f82b933f6b4b4c39",
          "linkedWithoutMetadata": "747a9a779da0f3cbd2cd4712b382d61dc90a0365cdbd98c4f82b933f6b4b4c39"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientDurations(address,(uint40,uint40))",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupLinearStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:42"
            },
            {
              "label": "lockupLinear",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupLinear)30890",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)30921_storage",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)12324_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupLinear)30890": {
              "label": "contract ISablierV2LockupLinear",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12324_storage)": {
              "label": "mapping(address => struct LockupLinearStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)30921_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)30162",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Durations)31073_storage": {
              "label": "struct LockupLinear.Durations",
              "members": [
                {
                  "label": "cliff",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "total",
                  "type": "t_uint40",
                  "offset": 5,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12324_storage": {
              "label": "struct LockupLinearStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durations",
                  "type": "t_struct(Durations)31073_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD60x18)30162": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:NFT": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:8",
        "version": {
          "withMetadata": "a8754be6c96feddefc4b616e8e38a01f945a15053d980111a7672347c0f29a74",
          "withoutMetadata": "a8754be6c96feddefc4b616e8e38a01f945a15053d980111a7672347c0f29a74",
          "linkedWithoutMetadata": "a8754be6c96feddefc4b616e8e38a01f945a15053d980111a7672347c0f29a74"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable",
          "solady/src/tokens/ERC721.sol:ERC721"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)",
          "name()",
          "symbol()",
          "mintTo(address)",
          "tokenURI(uint256)",
          "withdrawPayments(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFT",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTokenId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:16"
            },
            {
              "label": "MINT_PRICE",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:17"
            },
            {
              "label": "__name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:20"
            },
            {
              "label": "__symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:NFTFactory": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:6",
        "version": {
          "withMetadata": "bb4400223a73338e197bb14987e2d53b7d8a4bcfdd6f42e936521de96e39cace",
          "withoutMetadata": "bb4400223a73338e197bb14987e2d53b7d8a4bcfdd6f42e936521de96e39cace",
          "linkedWithoutMetadata": "bb4400223a73338e197bb14987e2d53b7d8a4bcfdd6f42e936521de96e39cace"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createNFTContract(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isNFTContract",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NFTFactory",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:WrappedVotingNftMintStrategy": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:100",
        "version": {
          "withMetadata": "0c3c9f9794d8f716e36e1f6f654720844b350405b81d2dc6d8f2f035242206bd",
          "withoutMetadata": "0c3c9f9794d8f716e36e1f6f654720844b350405b81d2dc6d8f2f035242206bd",
          "linkedWithoutMetadata": "0c3c9f9794d8f716e36e1f6f654720844b350405b81d2dc6d8f2f035242206bd"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllocationTimes(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrappedVotingNftMintStrategy",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:147"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "nftFactory",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(NFTFactory)13538",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:134"
            },
            {
              "label": "allocationStartTime",
              "offset": 20,
              "slot": "4",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "currentWinner",
              "offset": 8,
              "slot": "5",
              "type": "t_address",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "allocations",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(NFTFactory)13538": {
              "label": "contract NFTFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:99",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(struct DonationVotingMerkleDistributionBaseStrategy.ApplicationStatus[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "updateDistribution(bytes32,(uint256,string))",
          "isDistributionSet()",
          "hasBeenDistributed(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionBaseStrategy",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:286"
          },
          {
            "kind": "state-variable-immutable",
            "name": "PERMIT2",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:230"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4531_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)14109_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14109_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14109_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:DonationVotingMerkleDistributionDirectTransferStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76",
        "version": {
          "withMetadata": "b02896c15ccced04c8a3d4050285d525bde8246f4c5148bcedc980d91b2bc1c5",
          "withoutMetadata": "b02896c15ccced04c8a3d4050285d525bde8246f4c5148bcedc980d91b2bc1c5",
          "linkedWithoutMetadata": "b02896c15ccced04c8a3d4050285d525bde8246f4c5148bcedc980d91b2bc1c5"
        },
        "inherit": [
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionDirectTransferStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4531_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)14109_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14109_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14109_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:DonationVotingMerkleDistributionVaultStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:92",
        "version": {
          "withMetadata": "3622a22ab5d17e3cb264b552dd78c8779ebbf20f43c3d50e0622ec045c97037d",
          "withoutMetadata": "3622a22ab5d17e3cb264b552dd78c8779ebbf20f43c3d50e0622ec045c97037d",
          "linkedWithoutMetadata": "3622a22ab5d17e3cb264b552dd78c8779ebbf20f43c3d50e0622ec045c97037d"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)",
          "claim(struct DonationVotingMerkleDistributionVaultStrategy.Claim[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionVaultStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4531_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)14109_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "16",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "16",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "18",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "67",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14109_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14109_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy": {
        "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:89",
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVBaseStrategy",
            "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:258"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16161_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16172_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16172_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16161_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16172_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16161_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-simple/QVSimpleStrategy.sol:QVSimpleStrategy": {
        "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:89",
        "version": {
          "withMetadata": "98a41ce2dfed2ec9dd143212278df4e30fc9b713dfaec4a69b3de2b5db48fb46",
          "withoutMetadata": "98a41ce2dfed2ec9dd143212278df4e30fc9b713dfaec4a69b3de2b5db48fb46",
          "linkedWithoutMetadata": "98a41ce2dfed2ec9dd143212278df4e30fc9b713dfaec4a69b3de2b5db48fb46"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "addAllocator(address)",
          "removeAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVSimpleStrategy",
            "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:121"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16161_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16172_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:108"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:111"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16172_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16161_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16172_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16161_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:RFPCommitteeStrategy": {
        "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:83",
        "version": {
          "withMetadata": "999adc1cb0a2b37ae8c62ba20986d8df4ebb612722f94258bd6cefc81ed119b3",
          "withoutMetadata": "999adc1cb0a2b37ae8c62ba20986d8df4ebb612722f94258bd6cefc81ed119b3",
          "linkedWithoutMetadata": "999adc1cb0a2b37ae8c62ba20986d8df4ebb612722f94258bd6cefc81ed119b3"
        },
        "inherit": [
          "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPCommitteeStrategy",
            "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4234",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)17671_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)17662_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "voteThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:104"
            },
            {
              "label": "votedFor",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:109"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:114"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)17671_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17662_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)17671_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)17662_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy": {
        "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:107",
        "version": {
          "withMetadata": "2a159af57ac20780f3673dd79d486e3ac23c9ee8742635d1f49a80a6bb9735e3",
          "withoutMetadata": "2a159af57ac20780f3673dd79d486e3ac23c9ee8742635d1f49a80a6bb9735e3",
          "linkedWithoutMetadata": "2a159af57ac20780f3673dd79d486e3ac23c9ee8742635d1f49a80a6bb9735e3"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getPayouts(address[],bytes[])",
          "getMilestone(uint256)",
          "getMilestoneStatus(uint256)",
          "setPoolActive(bool)",
          "setMilestones(struct RFPSimpleStrategy.Milestone[])",
          "submitUpcomingMilestone((uint256,string))",
          "increaseMaxBid(uint256)",
          "rejectMilestone(uint256)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPSimpleStrategy",
            "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:199"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4234",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)17671_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)17662_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)17671_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Recipient)17662_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)17671_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)17662_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/IEAS.sol:IEAS": {
        "src": "lib/eas-contracts/contracts/IEAS.sol:82",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSchemaRegistry()",
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))",
          "multiAttest(struct MultiAttestationRequest[])",
          "multiAttestByDelegation(struct MultiDelegatedAttestationRequest[])",
          "revoke((bytes32,(bytes32,uint256)))",
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))",
          "multiRevoke(struct MultiRevocationRequest[])",
          "multiRevokeByDelegation(struct MultiDelegatedRevocationRequest[])",
          "timestamp(bytes32)",
          "multiTimestamp(bytes32[])",
          "revokeOffchain(bytes32)",
          "multiRevokeOffchain(bytes32[])",
          "getAttestation(bytes32)",
          "isAttestationValid(bytes32)",
          "getTimestamp(bytes32)",
          "getRevokeOffchain(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol:ISchemaRegistry": {
        "src": "lib/eas-contracts/contracts/ISchemaRegistry.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "register(string,address,bool)",
          "getSchema(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver": {
        "src": "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:19",
        "version": {
          "withMetadata": "d8605e6a62fb16ecee500cf5e8e23be2b13cf45e7b94a110819c98c983b44962",
          "withoutMetadata": "d8605e6a62fb16ecee500cf5e8e23be2b13cf45e7b94a110819c98c983b44962",
          "linkedWithoutMetadata": "d8605e6a62fb16ecee500cf5e8e23be2b13cf45e7b94a110819c98c983b44962"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "d7300f3f571677d35afe2cd1089da8ecc9ad7f5e5cdae20bce4bf8666c6578b7",
          "withoutMetadata": "d7300f3f571677d35afe2cd1089da8ecc9ad7f5e5cdae20bce4bf8666c6578b7",
          "linkedWithoutMetadata": "d7300f3f571677d35afe2cd1089da8ecc9ad7f5e5cdae20bce4bf8666c6578b7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:50",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19903_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19903_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19903_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "6ece51211cd14fe2ae1b56573ef5c0557b37d702b0c5435857004ab32ffce918",
          "withoutMetadata": "6ece51211cd14fe2ae1b56573ef5c0557b37d702b0c5435857004ab32ffce918",
          "linkedWithoutMetadata": "6ece51211cd14fe2ae1b56573ef5c0557b37d702b0c5435857004ab32ffce918"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "a69c7739cee64ce62295470c5dd8b5590e1e0a0796d87eed8ea9bd1ef407e5e6",
          "withoutMetadata": "a69c7739cee64ce62295470c5dd8b5590e1e0a0796d87eed8ea9bd1ef407e5e6",
          "linkedWithoutMetadata": "a69c7739cee64ce62295470c5dd8b5590e1e0a0796d87eed8ea9bd1ef407e5e6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "8db0d67d151581b903cce52d8209c546f89ef49df512e8301a035808e1443a4b",
          "withoutMetadata": "8db0d67d151581b903cce52d8209c546f89ef49df512e8301a035808e1443a4b",
          "linkedWithoutMetadata": "8db0d67d151581b903cce52d8209c546f89ef49df512e8301a035808e1443a4b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "08e1aba516af812d17e59b79357c20bf98840c02d82f89d87996cb0a0df33b10",
          "withoutMetadata": "08e1aba516af812d17e59b79357c20bf98840c02d82f89d87996cb0a0df33b10",
          "linkedWithoutMetadata": "08e1aba516af812d17e59b79357c20bf98840c02d82f89d87996cb0a0df33b10"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "d69cd1280d30192ee420c76ca95092d79b1cd3479b1c50944cd1335935038b85",
          "withoutMetadata": "d69cd1280d30192ee420c76ca95092d79b1cd3479b1c50944cd1335935038b85",
          "linkedWithoutMetadata": "d69cd1280d30192ee420c76ca95092d79b1cd3479b1c50944cd1335935038b85"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "b7f4ddb84860f8edf3acb174a58668d0479e02842b50728bbcd434ac45b051d1",
          "withoutMetadata": "b7f4ddb84860f8edf3acb174a58668d0479e02842b50728bbcd434ac45b051d1",
          "linkedWithoutMetadata": "b7f4ddb84860f8edf3acb174a58668d0479e02842b50728bbcd434ac45b051d1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/IEIP712.sol:IEIP712": {
        "src": "lib/permit2/src/interfaces/IEIP712.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/ISignatureTransfer.sol:ISignatureTransfer": {
        "src": "lib/permit2/src/interfaces/ISignatureTransfer.sol:9",
        "inherit": [
          "lib/permit2/src/interfaces/IEIP712.sol:IEIP712"
        ],
        "libraries": [],
        "methods": [
          "nonceBitmap(address,uint256)",
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)",
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)",
          "permitTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes)",
          "permitWitnessTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes32,string,bytes)",
          "invalidateUnorderedNonces(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable": {
        "src": "lib/v2-core/src/interfaces/IAdminable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "transferAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Base.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "comptroller()",
          "protocolRevenues(address)",
          "claimProtocolRevenues(address)",
          "setComptroller(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:ISablierV2Comptroller": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "flashFee()",
          "isFlashAsset(address)",
          "protocolFees(address)",
          "setFlashFee(uint256)",
          "setProtocolFee(address,uint256)",
          "toggleFlashAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:13",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getAsset(uint256)",
          "getDepositedAmount(uint256)",
          "getEndTime(uint256)",
          "getRecipient(uint256)",
          "getRefundedAmount(uint256)",
          "getSender(uint256)",
          "getStartTime(uint256)",
          "getWithdrawnAmount(uint256)",
          "isCancelable(uint256)",
          "isCold(uint256)",
          "isDepleted(uint256)",
          "isStream(uint256)",
          "isWarm(uint256)",
          "nextStreamId()",
          "refundableAmountOf(uint256)",
          "statusOf(uint256)",
          "streamedAmountOf(uint256)",
          "wasCanceled(uint256)",
          "withdrawableAmountOf(uint256)",
          "burn(uint256)",
          "cancel(uint256)",
          "cancelMultiple(uint256[])",
          "renounce(uint256)",
          "setNFTDescriptor(address)",
          "withdraw(uint256,address,uint128)",
          "withdrawMax(uint256,address)",
          "withdrawMaxAndTransfer(uint256,address)",
          "withdrawMultiple(uint256[],address,uint128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:ISablierV2LockupDynamic": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_SEGMENT_COUNT()",
          "getRange(uint256)",
          "getSegments(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDeltas((address,bool,address,uint128,address,(address,uint256),struct LockupDynamic.SegmentWithDelta[]))",
          "createWithMilestones((address,uint40,bool,address,uint128,address,(address,uint256),struct LockupDynamic.Segment[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:ISablierV2LockupLinear": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getCliffTime(uint256)",
          "getRange(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))",
          "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:ISablierV2NFTDescriptor": {
        "src": "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:Lockup": {
        "src": "lib/v2-core/src/types/DataTypes.sol:29",
        "version": {
          "withMetadata": "814f821916f4f8cb441a57c6b08b10bc356da8c09515af9d94bedaf45af9e7cb",
          "withoutMetadata": "814f821916f4f8cb441a57c6b08b10bc356da8c09515af9d94bedaf45af9e7cb",
          "linkedWithoutMetadata": "814f821916f4f8cb441a57c6b08b10bc356da8c09515af9d94bedaf45af9e7cb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupDynamic": {
        "src": "lib/v2-core/src/types/DataTypes.sol:72",
        "version": {
          "withMetadata": "82956b4b9689d8008c1c8db1deb17a610b4d06beaa67eff4c83ab0afefc9ccf1",
          "withoutMetadata": "82956b4b9689d8008c1c8db1deb17a610b4d06beaa67eff4c83ab0afefc9ccf1",
          "linkedWithoutMetadata": "82956b4b9689d8008c1c8db1deb17a610b4d06beaa67eff4c83ab0afefc9ccf1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupLinear": {
        "src": "lib/v2-core/src/types/DataTypes.sol:180",
        "version": {
          "withMetadata": "c546d49fb56f805313fd167ca0782de1640b85d363d2ff6152954f1edfffc177",
          "withoutMetadata": "c546d49fb56f805313fd167ca0782de1640b85d363d2ff6152954f1edfffc177",
          "linkedWithoutMetadata": "c546d49fb56f805313fd167ca0782de1640b85d363d2ff6152954f1edfffc177"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/auth/Ownable.sol:Ownable": {
        "src": "solady/src/auth/Ownable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "renounceOwnership()",
          "requestOwnershipHandover()",
          "cancelOwnershipHandover()",
          "completeOwnershipHandover(address)",
          "owner()",
          "ownershipHandoverExpiresAt(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC20.sol:ERC20": {
        "src": "solady/src/tokens/ERC20.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC721.sol:ERC721": {
        "src": "solady/src/tokens/ERC721.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "balanceOf(address)",
          "getApproved(uint256)",
          "approve(address,uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/CREATE3.sol:CREATE3": {
        "src": "solady/src/utils/CREATE3.sol:8",
        "version": {
          "withMetadata": "17ca8ff58519effe895b2ec4b47f37bdedc2fcc2af6598c07a195999b7ef145e",
          "withoutMetadata": "17ca8ff58519effe895b2ec4b47f37bdedc2fcc2af6598c07a195999b7ef145e",
          "linkedWithoutMetadata": "17ca8ff58519effe895b2ec4b47f37bdedc2fcc2af6598c07a195999b7ef145e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/SafeTransferLib.sol:SafeTransferLib": {
        "src": "solady/src/utils/SafeTransferLib.sol:12",
        "version": {
          "withMetadata": "91e25adb79636a77beb2a69214af7d543301c3349d070c18a59060cf4c96b106",
          "withoutMetadata": "91e25adb79636a77beb2a69214af7d543301c3349d070c18a59060cf4c96b106",
          "linkedWithoutMetadata": "91e25adb79636a77beb2a69214af7d543301c3349d070c18a59060cf4c96b106"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      }
    }
  ]
}
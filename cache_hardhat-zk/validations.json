{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "bed313f754091d3877d2ed6b36bdba7bc9c45b68492e0a53795d96f587b78238",
          "withoutMetadata": "bed313f754091d3877d2ed6b36bdba7bc9c45b68492e0a53795d96f587b78238",
          "linkedWithoutMetadata": "bed313f754091d3877d2ed6b36bdba7bc9c45b68492e0a53795d96f587b78238"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "495f0f5c11dad04a45b477124a21ae4fe29f2c5e569745c4c23eac3b29c8422a",
          "withoutMetadata": "495f0f5c11dad04a45b477124a21ae4fe29f2c5e569745c4c23eac3b29c8422a",
          "linkedWithoutMetadata": "495f0f5c11dad04a45b477124a21ae4fe29f2c5e569745c4c23eac3b29c8422a"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "988ab1b62f4b8aa570315292e260c21fd866107c1bd4b29cbbea294a5e1d35a8",
          "withoutMetadata": "988ab1b62f4b8aa570315292e260c21fd866107c1bd4b29cbbea294a5e1d35a8",
          "linkedWithoutMetadata": "988ab1b62f4b8aa570315292e260c21fd866107c1bd4b29cbbea294a5e1d35a8"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "d1f3b594377a588aae86c74bf89dcc2f031243e911358466e6ea4a32c283bfe3",
          "withoutMetadata": "d1f3b594377a588aae86c74bf89dcc2f031243e911358466e6ea4a32c283bfe3",
          "linkedWithoutMetadata": "d1f3b594377a588aae86c74bf89dcc2f031243e911358466e6ea4a32c283bfe3"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "b280eecc8878699beeb0d5d1cffa5c668e353e01dea54538bb32a5ba1429b450",
          "withoutMetadata": "b280eecc8878699beeb0d5d1cffa5c668e353e01dea54538bb32a5ba1429b450",
          "linkedWithoutMetadata": "b280eecc8878699beeb0d5d1cffa5c668e353e01dea54538bb32a5ba1429b450"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "e2ddf0db609ed7880c90125ecc3a422fb561fc774c9e8a9ffbb1502d3bef063c",
          "withoutMetadata": "e2ddf0db609ed7880c90125ecc3a422fb561fc774c9e8a9ffbb1502d3bef063c",
          "linkedWithoutMetadata": "e2ddf0db609ed7880c90125ecc3a422fb561fc774c9e8a9ffbb1502d3bef063c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "e33feef4394da2dc383db5dbd3a700e87c1d3412bc01ff3c9b7b3b0985044afa",
          "withoutMetadata": "e33feef4394da2dc383db5dbd3a700e87c1d3412bc01ff3c9b7b3b0985044afa",
          "linkedWithoutMetadata": "e33feef4394da2dc383db5dbd3a700e87c1d3412bc01ff3c9b7b3b0985044afa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Allo.sol:Allo": {
        "src": "contracts/core/Allo.sol:96",
        "version": {
          "withMetadata": "fc85c815f16b97c256aeca82f78d1a6a6d03002d02d100606fe67c066a1e606b",
          "withoutMetadata": "fc85c815f16b97c256aeca82f78d1a6a6d03002d02d100606fe67c066a1e606b",
          "linkedWithoutMetadata": "fc85c815f16b97c256aeca82f78d1a6a6d03002d02d100606fe67c066a1e606b"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "solady/src/auth/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IAllo.sol:IAllo"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "getFeeDenominator()",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "isCloneableStrategy(address)",
          "getPool(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)20930_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "151",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "percentFee",
              "offset": 0,
              "slot": "201",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:123"
            },
            {
              "label": "baseFee",
              "offset": 0,
              "slot": "202",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:138"
            },
            {
              "label": "_poolIndex",
              "offset": 0,
              "slot": "203",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:141"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "204",
              "type": "t_address_payable",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:141"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(IRegistry)4399",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:142"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "206",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:143"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "207",
              "type": "t_mapping(t_uint256,t_struct(Pool)3918_storage)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:144"
            },
            {
              "label": "cloneableStrategies",
              "offset": 0,
              "slot": "208",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:146"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)4566": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)20930_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)3918_storage)": {
              "label": "mapping(uint256 => struct IAllo.Pool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Pool)3918_storage": {
              "label": "struct IAllo.Pool",
              "members": [
                {
                  "label": "profileId",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "strategy",
                  "type": "t_contract(IStrategy)4566",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "managerRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)20930_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Anchor.sol:Anchor": {
        "src": "contracts/core/Anchor.sol:92",
        "version": {
          "withMetadata": "ea54ad20dc2111d9039d2778733ce31663d08f3e509b66fa8b17211a4cb038e1",
          "withoutMetadata": "ea54ad20dc2111d9039d2778733ce31663d08f3e509b66fa8b17211a4cb038e1",
          "linkedWithoutMetadata": "ea54ad20dc2111d9039d2778733ce31663d08f3e509b66fa8b17211a4cb038e1"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol:ERC1155Holder",
          "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver",
          "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol:ERC721Holder",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,address)",
          "execute(address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Anchor",
            "src": "contracts/core/Anchor.sol:92"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/core/Anchor.sol:92"
          },
          {
            "kind": "state-variable-immutable",
            "name": "profileId",
            "src": "contracts/core/Anchor.sol:92"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Registry.sol:Registry": {
        "src": "contracts/core/Registry.sol:102",
        "version": {
          "withMetadata": "625c81d662df8dd431aeb148f05c2701ae01cc218bbe70d47c69d56336ae0947",
          "withoutMetadata": "625c81d662df8dd431aeb148f05c2701ae01cc218bbe70d47c69d56336ae0947",
          "linkedWithoutMetadata": "625c81d662df8dd431aeb148f05c2701ae01cc218bbe70d47c69d56336ae0947"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "contracts/core/libraries/Native.sol:Native",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/interfaces/IRegistry.sol:IRegistry"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)20930_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "anchorToProfileId",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:108"
            },
            {
              "label": "profilesById",
              "offset": 0,
              "slot": "152",
              "type": "t_mapping(t_bytes32,t_struct(Profile)4226_storage)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:110"
            },
            {
              "label": "profileIdToPendingOwner",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:112"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Profile)4226_storage)": {
              "label": "mapping(bytes32 => struct IRegistry.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)20930_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Profile)4226_storage": {
              "label": "struct IRegistry.Profile",
              "members": [
                {
                  "label": "id",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "anchor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)20930_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IAllo.sol:IAllo": {
        "src": "contracts/core/interfaces/IAllo.sol:97",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "isCloneableStrategy(address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "getPool(uint256)",
          "getFeeDenominator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IRegistry.sol:IRegistry": {
        "src": "contracts/core/interfaces/IRegistry.sol:92",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/core/interfaces/IStrategy.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "isValidAllocator(address)",
          "isPoolActive()",
          "getPoolAmount()",
          "increasePoolAmount(uint256)",
          "getRecipientStatus(address)",
          "getPayouts(address[],bytes[])",
          "initialize(uint256,bytes)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Clone.sol:Clone": {
        "src": "contracts/core/libraries/Clone.sol:37",
        "version": {
          "withMetadata": "99838b238d3c3da36a3177dac420c78e859898b04e944aa54f1f2d886569f301",
          "withoutMetadata": "99838b238d3c3da36a3177dac420c78e859898b04e944aa54f1f2d886569f301",
          "linkedWithoutMetadata": "99838b238d3c3da36a3177dac420c78e859898b04e944aa54f1f2d886569f301"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Errors.sol:Errors": {
        "src": "contracts/core/libraries/Errors.sol:109",
        "version": {
          "withMetadata": "18bdcf5b39fb3fcfb182f3c7f054b262893f147cd9b720742e9bff09e64f3ef2",
          "withoutMetadata": "18bdcf5b39fb3fcfb182f3c7f054b262893f147cd9b720742e9bff09e64f3ef2",
          "linkedWithoutMetadata": "18bdcf5b39fb3fcfb182f3c7f054b262893f147cd9b720742e9bff09e64f3ef2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Native.sol:Native": {
        "src": "contracts/core/libraries/Native.sol:26",
        "version": {
          "withMetadata": "3c3677dcd66ca84e3eef283306cec3213654e4fc5d3f3a9742bc4d9c45943a3b",
          "withoutMetadata": "3c3677dcd66ca84e3eef283306cec3213654e4fc5d3f3a9742bc4d9c45943a3b",
          "linkedWithoutMetadata": "3c3677dcd66ca84e3eef283306cec3213654e4fc5d3f3a9742bc4d9c45943a3b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Transfer.sol:Transfer": {
        "src": "contracts/core/libraries/Transfer.sol:97",
        "version": {
          "withMetadata": "f38fa22c850ee87ad8a5a5dbb65d640cad5af8f40467f9848bd98483dfb24e96",
          "withoutMetadata": "f38fa22c850ee87ad8a5a5dbb65d640cad5af8f40467f9848bd98483dfb24e96",
          "linkedWithoutMetadata": "f38fa22c850ee87ad8a5a5dbb65d640cad5af8f40467f9848bd98483dfb24e96"
        },
        "inherit": [
          "contracts/core/libraries/Native.sol:Native"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/factory/ContractFactory.sol:ContractFactory": {
        "src": "contracts/factory/ContractFactory.sol:107",
        "version": {
          "withMetadata": "e6cf0098d8e03d45c191019c31e24dd646d33f195d96ca610ad6158844844116",
          "withoutMetadata": "e6cf0098d8e03d45c191019c31e24dd646d33f195d96ca610ad6158844844116",
          "linkedWithoutMetadata": "e6cf0098d8e03d45c191019c31e24dd646d33f195d96ca610ad6158844844116"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "deploy(string,string,bytes)",
          "setDeployer(address,bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ContractFactory",
            "src": "contracts/factory/ContractFactory.sol:119"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "usedSalts",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            },
            {
              "label": "isDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/BaseStrategy.sol:BaseStrategy": {
        "src": "contracts/strategies/BaseStrategy.sol:111",
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "getPoolAmount()",
          "isPoolActive()",
          "getRecipientStatus(address)",
          "increasePoolAmount(uint256)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)",
          "getPayouts(address[],bytes[])",
          "isValidAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseStrategy",
            "src": "contracts/strategies/BaseStrategy.sol:129"
          },
          {
            "kind": "state-variable-immutable",
            "name": "allo",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          },
          {
            "kind": "state-variable-immutable",
            "name": "strategyId",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:DirectGrantsSimpleStrategy": {
        "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:110",
        "version": {
          "withMetadata": "378bfd9dc422f44ff6f5cbf49d184cf62990227ac0ddab047ab19a129e06d344",
          "withoutMetadata": "378bfd9dc422f44ff6f5cbf49d184cf62990227ac0ddab047ab19a129e06d344",
          "linkedWithoutMetadata": "378bfd9dc422f44ff6f5cbf49d184cf62990227ac0ddab047ab19a129e06d344"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getMilestoneStatus(address,uint256)",
          "getMilestones(address)",
          "setMilestones(address,struct DirectGrantsSimpleStrategy.Milestone[])",
          "reviewSetMilestones(address,uint8)",
          "submitMilestone(address,uint256,(uint256,string))",
          "rejectMilestone(address,uint256)",
          "setRecipientStatusToInReview(address[])",
          "setPoolActive(bool)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DirectGrantsSimpleStrategy",
            "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:192"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:161"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:163"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:164"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(IRegistry)4399",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:167"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:168"
            },
            {
              "label": "_acceptedRecipientIds",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:172"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)5683_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:177"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Milestone)5692_storage)dyn_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:179"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:184"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)5692_storage)dyn_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(Milestone)5692_storage)dyn_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Milestone[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5683_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)5692_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)5683_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "milestonesReviewStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:DonationVotingCustomRegistryStrategy": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52",
        "version": {
          "withMetadata": "afc1eef52a5aa84d4aa79fe709e2a3d06c9c23b388fd8cfd274b7bf1c3c6178d",
          "withoutMetadata": "afc1eef52a5aa84d4aa79fe709e2a3d06c9c23b388fd8cfd274b7bf1c3c6178d",
          "linkedWithoutMetadata": "afc1eef52a5aa84d4aa79fe709e2a3d06c9c23b388fd8cfd274b7bf1c3c6178d"
        },
        "inherit": [
          "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingCustomRegistryStrategy",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4399",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:162"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7297_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:165"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4417_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:167"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:172"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(SimpleProjectRegistry)7268",
              "contract": "DonationVotingCustomRegistryStrategy",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(SimpleProjectRegistry)7268": {
              "label": "contract SimpleProjectRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4417_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7297_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4417_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7297_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:SimpleProjectRegistry": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:26",
        "version": {
          "withMetadata": "533fc69a174dcdb2a84ac24bced4c5e30a53a6fc7368ad94d8b36934eadaeb65",
          "withoutMetadata": "533fc69a174dcdb2a84ac24bced4c5e30a53a6fc7368ad94d8b36934eadaeb65",
          "linkedWithoutMetadata": "533fc69a174dcdb2a84ac24bced4c5e30a53a6fc7368ad94d8b36934eadaeb65"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addProject(address)",
          "addProjects(address[])",
          "removeProject(address)",
          "removeProjects(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleProjectRegistry",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "projects",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleProjectRegistry",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy": {
        "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:100",
        "version": {
          "withMetadata": "87569aecb3b6e6b06f77706fedbc9f690e4ed5c1b5f0c164e592c30cf81e15cb",
          "withoutMetadata": "87569aecb3b6e6b06f77706fedbc9f690e4ed5c1b5f0c164e592c30cf81e15cb",
          "linkedWithoutMetadata": "87569aecb3b6e6b06f77706fedbc9f690e4ed5c1b5f0c164e592c30cf81e15cb"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "setPayout(address[],uint256[])",
          "claim(struct DonationVotingStrategy.Claim[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingStrategy",
            "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:198"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4399",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:162"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7297_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:165"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4417_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:167"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:172"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4417_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7297_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4417_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7297_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:ProportionalPayoutStrategy": {
        "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:113",
        "version": {
          "withMetadata": "16a65ccd5581f6326f5bcab931edda661995569845077a162eb3f70632fcf12a",
          "withoutMetadata": "16a65ccd5581f6326f5bcab931edda661995569845077a162eb3f70632fcf12a",
          "linkedWithoutMetadata": "16a65ccd5581f6326f5bcab931edda661995569845077a162eb3f70632fcf12a"
        },
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "setAllocationTime(uint64,uint64)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProportionalPayoutStrategy",
            "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:163"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Recipient)8709_storage)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:151"
            },
            {
              "label": "hasAllocated",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:153"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ERC721)35610",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "maxRecipientsAllowed",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:155"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:157"
            },
            {
              "label": "totalAllocations",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:159"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:161"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)35610": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)8709_storage)": {
              "label": "mapping(address => struct ProportionalPayoutStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)8709_storage": {
              "label": "struct ProportionalPayoutStrategy.Recipient",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:QVGovernanceERC20Votes": {
        "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:89",
        "version": {
          "withMetadata": "66f3916014786ee522c64da8659ff44938614a002bdd1c408c4ff0cd0c4198d1",
          "withoutMetadata": "66f3916014786ee522c64da8659ff44938614a002bdd1c408c4ff0cd0c4198d1",
          "linkedWithoutMetadata": "66f3916014786ee522c64da8659ff44938614a002bdd1c408c4ff0cd0c4198d1"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVGovernanceERC20Votes",
            "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:102"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4399",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17740_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17751_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:238"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:241"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:243"
            },
            {
              "label": "govToken",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IVotes)23421",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:96"
            },
            {
              "label": "timestamp",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:98"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IVotes)23421": {
              "label": "contract IVotes",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(Status)4412)": {
              "label": "mapping(address => enum IStrategy.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))": {
              "label": "mapping(address => mapping(address => enum IStrategy.Status))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17751_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17740_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4412,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17751_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17740_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:HackathonQVStrategy": {
        "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:110",
        "version": {
          "withMetadata": "dd02ea9688973da6a033c00db121e7582c8207199ead870fda5291ed59a6a9bb",
          "withoutMetadata": "dd02ea9688973da6a033c00db121e7582c8207199ead870fda5291ed59a6a9bb",
          "linkedWithoutMetadata": "dd02ea9688973da6a033c00db121e7582c8207199ead870fda5291ed59a6a9bb"
        },
        "inherit": [
          "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver",
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllowedRecipientIds(address[],uint64,bytes)",
          "setPayoutPercentages(uint256[])",
          "getPayouts(address[],bytes[])",
          "getAttestation(bytes32)",
          "getSchema(bytes32)",
          "isPayable()",
          "isAttestationExpired(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HackathonQVStrategy",
            "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:148"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4399",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17740_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17751_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:238"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:241"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:243"
            },
            {
              "label": "_eas",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IEAS)20794",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:29"
            },
            {
              "label": "payoutPercentages",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:130"
            },
            {
              "label": "votesByRank",
              "offset": 0,
              "slot": "14",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:131"
            },
            {
              "label": "easInfo",
              "offset": 0,
              "slot": "15",
              "type": "t_struct(EASInfo)9613_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "20",
              "type": "t_contract(ERC721)35610",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:133"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:133"
            },
            {
              "label": "recipientIdToUID",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:135"
            },
            {
              "label": "recipientIdToIndex",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:136"
            },
            {
              "label": "indexToRecipientId",
              "offset": 0,
              "slot": "25",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:143"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ERC721)35610": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IEAS)20794": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(ISchemaRegistry)20839": {
              "label": "contract ISchemaRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(Status)4412)": {
              "label": "mapping(address => enum IStrategy.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))": {
              "label": "mapping(address => mapping(address => enum IStrategy.Status))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17751_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17740_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4412,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17751_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(EASInfo)9613_storage": {
              "label": "struct HackathonQVStrategy.EASInfo",
              "members": [
                {
                  "label": "eas",
                  "type": "t_contract(IEAS)20794",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "schemaRegistry",
                  "type": "t_contract(ISchemaRegistry)20839",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "schemaUID",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "schema",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "revocable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17740_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver": {
        "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:20",
        "inherit": [
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver"
        ],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_eas",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IEAS)20794",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:29"
            }
          ],
          "types": {
            "t_contract(IEAS)20794": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:QVImpactStreamStrategy": {
        "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:89",
        "version": {
          "withMetadata": "79e6692a4aa300da4f054c79df60a9cde0b0be533887be01e271243508017240",
          "withoutMetadata": "79e6692a4aa300da4f054c79df60a9cde0b0be533887be01e271243508017240",
          "linkedWithoutMetadata": "79e6692a4aa300da4f054c79df60a9cde0b0be533887be01e271243508017240"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "updatePoolTimestamps(uint64,uint64)",
          "batchAddAllocator(address[])",
          "addAllocator(address)",
          "batchRemoveAllocator(address[])",
          "removeAllocator(address)",
          "setPayouts(struct QVImpactStreamStrategy.Payout[])",
          "getRecipient(address)",
          "getVoiceCreditsCastByAllocator(address)",
          "getVoiceCreditsCastByAllocatorToRecipient(address,address)",
          "getVotesCastByAllocatorToRecipient(address,address)",
          "recoverFunds(address,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVImpactStreamStrategy",
            "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:218"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "3",
              "type": "t_uint64",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:157"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "3",
              "type": "t_uint64",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:158"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IRegistry)4399",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:161"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:163"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:165"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)11045_storage)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:168"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)11056_storage)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:173"
            },
            {
              "label": "payouts",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:178"
            },
            {
              "label": "payoutSet",
              "offset": 0,
              "slot": "10",
              "type": "t_bool",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:179"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)11056_storage)": {
              "label": "mapping(address => struct QVImpactStreamStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)11045_storage)": {
              "label": "mapping(address => struct QVImpactStreamStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)11056_storage": {
              "label": "struct QVImpactStreamStrategy.Allocator",
              "members": [
                {
                  "label": "usedVoiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)11045_storage": {
              "label": "struct QVImpactStreamStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "requestedAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:QVNftTieredStrategy": {
        "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:94",
        "version": {
          "withMetadata": "e630974c4ddd1e8a3c3880cfdaa336d48c26380d408f1d87f2b73842c34ecc9b",
          "withoutMetadata": "e630974c4ddd1e8a3c3880cfdaa336d48c26380d408f1d87f2b73842c34ecc9b",
          "linkedWithoutMetadata": "e630974c4ddd1e8a3c3880cfdaa336d48c26380d408f1d87f2b73842c34ecc9b"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVNftTieredStrategy",
            "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4399",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17740_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17751_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:238"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:241"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:243"
            },
            {
              "label": "nfts",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_contract(ERC721)35610)dyn_storage",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:111"
            },
            {
              "label": "maxVoiceCreditsPerNft",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_contract(ERC721)35610,t_uint256)",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:113"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_contract(ERC721)35610,t_mapping(t_uint256,t_uint256))",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:115"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(ERC721)35610)dyn_storage": {
              "label": "contract ERC721[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)35610": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(Status)4412)": {
              "label": "mapping(address => enum IStrategy.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))": {
              "label": "mapping(address => mapping(address => enum IStrategy.Status))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17751_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17740_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)35610,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(contract ERC721 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)35610,t_uint256)": {
              "label": "mapping(contract ERC721 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4412,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17751_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17740_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:LockupDynamicStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:16",
        "version": {
          "withMetadata": "9a6351b1c9b5477a9e8cc0bb7e9e1b9e8050f4412d8d466e4224f9459a5ffa74",
          "withoutMetadata": "9a6351b1c9b5477a9e8cc0bb7e9e1b9e8050f4412d8d466e4224f9459a5ffa74",
          "linkedWithoutMetadata": "9a6351b1c9b5477a9e8cc0bb7e9e1b9e8050f4412d8d466e4224f9459a5ffa74"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientSegments(address,struct LockupDynamic.SegmentWithDelta[])",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupDynamicStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:42"
            },
            {
              "label": "lockupDynamic",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupDynamic)34021",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)34141_storage",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)12561_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(SegmentWithDelta)34225_storage)dyn_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupDynamic)34021": {
              "label": "contract ISablierV2LockupDynamic",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12561_storage)": {
              "label": "mapping(address => struct LockupDynamicStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)34141_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)33382",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12561_storage": {
              "label": "struct LockupDynamicStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "segments",
                  "type": "t_array(t_struct(SegmentWithDelta)34225_storage)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(SegmentWithDelta)34225_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exponent",
                  "type": "t_userDefinedValueType(UD2x18)31578",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "delta",
                  "type": "t_uint40",
                  "offset": 24,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD2x18)31578": {
              "label": "UD2x18",
              "numberOfBytes": "8",
              "underlying": "t_uint64"
            },
            "t_userDefinedValueType(UD60x18)33382": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:LockupLinearStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:16",
        "version": {
          "withMetadata": "34e206bbe569cbd05207e968ba277425194842db786e57a155d14816ec3dc3bf",
          "withoutMetadata": "34e206bbe569cbd05207e968ba277425194842db786e57a155d14816ec3dc3bf",
          "linkedWithoutMetadata": "34e206bbe569cbd05207e968ba277425194842db786e57a155d14816ec3dc3bf"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientDurations(address,(uint40,uint40))",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupLinearStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:42"
            },
            {
              "label": "lockupLinear",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupLinear)34110",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)34141_storage",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)13743_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupLinear)34110": {
              "label": "contract ISablierV2LockupLinear",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)13743_storage)": {
              "label": "mapping(address => struct LockupLinearStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)34141_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)33382",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Durations)34293_storage": {
              "label": "struct LockupLinear.Durations",
              "members": [
                {
                  "label": "cliff",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "total",
                  "type": "t_uint40",
                  "offset": 5,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)13743_storage": {
              "label": "struct LockupLinearStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durations",
                  "type": "t_struct(Durations)34293_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD60x18)33382": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:NFT": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:8",
        "version": {
          "withMetadata": "a704779ddc093d86facdf48d604c6db09a8899f967bedb2bc3be2455fad23040",
          "withoutMetadata": "a704779ddc093d86facdf48d604c6db09a8899f967bedb2bc3be2455fad23040",
          "linkedWithoutMetadata": "a704779ddc093d86facdf48d604c6db09a8899f967bedb2bc3be2455fad23040"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable",
          "solady/src/tokens/ERC721.sol:ERC721"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)",
          "name()",
          "symbol()",
          "mintTo(address)",
          "tokenURI(uint256)",
          "withdrawPayments(address payable)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFT",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTokenId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:16"
            },
            {
              "label": "MINT_PRICE",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:17"
            },
            {
              "label": "__name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:20"
            },
            {
              "label": "__symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:NFTFactory": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:6",
        "version": {
          "withMetadata": "2f82b03da384cd22c25a378f94f6133b48387927b5cb95c9ebb16347764402ce",
          "withoutMetadata": "2f82b03da384cd22c25a378f94f6133b48387927b5cb95c9ebb16347764402ce",
          "linkedWithoutMetadata": "2f82b03da384cd22c25a378f94f6133b48387927b5cb95c9ebb16347764402ce"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createNFTContract(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isNFTContract",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NFTFactory",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:WrappedVotingNftMintStrategy": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:101",
        "version": {
          "withMetadata": "d5625715ab6620da68b31123fffe2aea56bdedb421b66c8a663f195a5752c9b7",
          "withoutMetadata": "d5625715ab6620da68b31123fffe2aea56bdedb421b66c8a663f195a5752c9b7",
          "linkedWithoutMetadata": "d5625715ab6620da68b31123fffe2aea56bdedb421b66c8a663f195a5752c9b7"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllocationTimes(uint64,uint64)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrappedVotingNftMintStrategy",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:147"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "nftFactory",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(NFTFactory)14970",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationStartTime",
              "offset": 20,
              "slot": "4",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "currentWinner",
              "offset": 8,
              "slot": "5",
              "type": "t_address",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:137"
            },
            {
              "label": "allocations",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:138"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(NFTFactory)14970": {
              "label": "contract NFTFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:99",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(struct DonationVotingMerkleDistributionBaseStrategy.ApplicationStatus[],uint256)",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(address)",
          "updateDistribution(bytes32,(uint256,string))",
          "isDistributionSet()",
          "hasBeenDistributed(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionBaseStrategy",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:293"
          },
          {
            "kind": "state-variable-assignment",
            "name": "recipientsCounter",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
          },
          {
            "kind": "state-variable-immutable",
            "name": "PERMIT2",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:230"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4692_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:208"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4399",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:235"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:257"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:259"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:265"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)15551_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:267"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)15551_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)15551_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:DonationVotingMerkleDistributionDirectTransferStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:82",
        "version": {
          "withMetadata": "7fcfc5efc23707c8dc8da9f322194f1b0311186f9209d465407a37f5afd086d2",
          "withoutMetadata": "7fcfc5efc23707c8dc8da9f322194f1b0311186f9209d465407a37f5afd086d2",
          "linkedWithoutMetadata": "7fcfc5efc23707c8dc8da9f322194f1b0311186f9209d465407a37f5afd086d2"
        },
        "inherit": [
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionDirectTransferStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4692_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:208"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4399",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:235"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:257"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:259"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:265"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)15551_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:267"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)15551_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)15551_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:DonationVotingMerkleDistributionVaultStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:94",
        "version": {
          "withMetadata": "897fad22f0e91e5fd4df7e1beb6af3ba806e6cc465c6f520849fbd61c48b1683",
          "withoutMetadata": "897fad22f0e91e5fd4df7e1beb6af3ba806e6cc465c6f520849fbd61c48b1683",
          "linkedWithoutMetadata": "897fad22f0e91e5fd4df7e1beb6af3ba806e6cc465c6f520849fbd61c48b1683"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)",
          "claim(struct DonationVotingMerkleDistributionVaultStrategy.Claim[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionVaultStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:128"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4692_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:208"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4399",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:235"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:257"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:259"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:265"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)15551_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:267"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "16",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "16",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "18",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "67",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:117"
            },
            {
              "label": "totalClaimableAmount",
              "offset": 0,
              "slot": "68",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:120"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)15551_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)15551_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy": {
        "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:89",
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVBaseStrategy",
            "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:271"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4399",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17740_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17751_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:238"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:241"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:243"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(Status)4412)": {
              "label": "mapping(address => enum IStrategy.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))": {
              "label": "mapping(address => mapping(address => enum IStrategy.Status))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17751_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17740_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4412,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17751_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17740_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-simple/QVSimpleStrategy.sol:QVSimpleStrategy": {
        "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:90",
        "version": {
          "withMetadata": "493c2c32f0ae5588a7e3214cd07cf265650b1225a1bbebdaaceb7e5673e230fc",
          "withoutMetadata": "493c2c32f0ae5588a7e3214cd07cf265650b1225a1bbebdaaceb7e5673e230fc",
          "linkedWithoutMetadata": "493c2c32f0ae5588a7e3214cd07cf265650b1225a1bbebdaaceb7e5673e230fc"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "addAllocator(address)",
          "removeAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVSimpleStrategy",
            "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4399",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17740_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17751_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:238"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:241"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:243"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:108"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:111"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(Status)4412)": {
              "label": "mapping(address => enum IStrategy.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))": {
              "label": "mapping(address => mapping(address => enum IStrategy.Status))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17751_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17740_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4412,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17751_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17740_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:RFPCommitteeStrategy": {
        "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:84",
        "version": {
          "withMetadata": "441f601432790c641174e5b7d17a0dc3afad78135d2f6969d201c5ce472852db",
          "withoutMetadata": "441f601432790c641174e5b7d17a0dc3afad78135d2f6969d201c5ce472852db",
          "linkedWithoutMetadata": "441f601432790c641174e5b7d17a0dc3afad78135d2f6969d201c5ce472852db"
        },
        "inherit": [
          "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPCommitteeStrategy",
            "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:124"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:174"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:175"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:180"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4399",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:183"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:186"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:190"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)19391_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:192"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)19382_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:193"
            },
            {
              "label": "voteThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:104"
            },
            {
              "label": "votedFor",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:109"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:112"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)19391_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)19382_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)19391_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)19382_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy": {
        "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:106",
        "version": {
          "withMetadata": "dc4c2613d9c05ddac941543611c9377ce9fd84f67316a9b1d1eb09c92d658487",
          "withoutMetadata": "dc4c2613d9c05ddac941543611c9377ce9fd84f67316a9b1d1eb09c92d658487",
          "linkedWithoutMetadata": "dc4c2613d9c05ddac941543611c9377ce9fd84f67316a9b1d1eb09c92d658487"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getPayouts(address[],bytes[])",
          "getMilestone(uint256)",
          "getMilestoneStatus(uint256)",
          "setPoolActive(bool)",
          "setMilestones(struct RFPSimpleStrategy.Milestone[])",
          "submitUpcomingMilestone((uint256,string))",
          "increaseMaxBid(uint256)",
          "rejectMilestone(uint256)",
          "withdraw(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPSimpleStrategy",
            "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:201"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:174"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:175"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:180"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4399",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:183"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:186"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:190"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)19391_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:192"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)19382_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:193"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)19391_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Recipient)19382_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)19391_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)19382_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/IEAS.sol:IEAS": {
        "src": "lib/eas-contracts/contracts/IEAS.sol:82",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSchemaRegistry()",
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))",
          "multiAttest(struct MultiAttestationRequest[])",
          "multiAttestByDelegation(struct MultiDelegatedAttestationRequest[])",
          "revoke((bytes32,(bytes32,uint256)))",
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))",
          "multiRevoke(struct MultiRevocationRequest[])",
          "multiRevokeByDelegation(struct MultiDelegatedRevocationRequest[])",
          "timestamp(bytes32)",
          "multiTimestamp(bytes32[])",
          "revokeOffchain(bytes32)",
          "multiRevokeOffchain(bytes32[])",
          "getAttestation(bytes32)",
          "isAttestationValid(bytes32)",
          "getTimestamp(bytes32)",
          "getRevokeOffchain(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol:ISchemaRegistry": {
        "src": "lib/eas-contracts/contracts/ISchemaRegistry.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "register(string,address,bool)",
          "getSchema(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver": {
        "src": "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:51",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)20930_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:260"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)20930_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)20930_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:19",
        "version": {
          "withMetadata": "b64207f8a51b705e3cd50e15b89592771a6720999e3905d275d10cc9517d4ac6",
          "withoutMetadata": "b64207f8a51b705e3cd50e15b89592771a6720999e3905d275d10cc9517d4ac6",
          "linkedWithoutMetadata": "b64207f8a51b705e3cd50e15b89592771a6720999e3905d275d10cc9517d4ac6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "9ca8e6ca22e97280419662a2137400ff7d25e97a0a83bf634bfcd095659d1ff3",
          "withoutMetadata": "9ca8e6ca22e97280419662a2137400ff7d25e97a0a83bf634bfcd095659d1ff3",
          "linkedWithoutMetadata": "9ca8e6ca22e97280419662a2137400ff7d25e97a0a83bf634bfcd095659d1ff3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol:12",
        "version": {
          "withMetadata": "657567839ad3437ebd92e20a32fb0aa0a4379f8d5fd14ea6cb82db004a88e20d",
          "withoutMetadata": "657567839ad3437ebd92e20a32fb0aa0a4379f8d5fd14ea6cb82db004a88e20d",
          "linkedWithoutMetadata": "657567839ad3437ebd92e20a32fb0aa0a4379f8d5fd14ea6cb82db004a88e20d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "7499a1f177f84633fa4ce6029578d93db5f2087c92a8aebc6bf48ca6facf104d",
          "withoutMetadata": "7499a1f177f84633fa4ce6029578d93db5f2087c92a8aebc6bf48ca6facf104d",
          "linkedWithoutMetadata": "7499a1f177f84633fa4ce6029578d93db5f2087c92a8aebc6bf48ca6facf104d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SignedMathUpgradeable.sol:9",
        "version": {
          "withMetadata": "2261902c6c76994a9f51f19a9f9e35f23cf6dead502e9e75c81ec5137d28b40b",
          "withoutMetadata": "2261902c6c76994a9f51f19a9f9e35f23cf6dead502e9e75c81ec5137d28b40b",
          "linkedWithoutMetadata": "2261902c6c76994a9f51f19a9f9e35f23cf6dead502e9e75c81ec5137d28b40b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol:ERC1155Holder": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol:16",
        "version": {
          "withMetadata": "8a177badf739e3ad1f108d1340eaa7a83027adc0deb9d7e13aca824ec0cb9c1c",
          "withoutMetadata": "8a177badf739e3ad1f108d1340eaa7a83027adc0deb9d7e13aca824ec0cb9c1c",
          "linkedWithoutMetadata": "8a177badf739e3ad1f108d1340eaa7a83027adc0deb9d7e13aca824ec0cb9c1c"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver",
          "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "10abb3a88039b622031ea6625aee40d0c8a90e710dabe38f2ce20b7d9367aba1",
          "withoutMetadata": "10abb3a88039b622031ea6625aee40d0c8a90e710dabe38f2ce20b7d9367aba1",
          "linkedWithoutMetadata": "10abb3a88039b622031ea6625aee40d0c8a90e710dabe38f2ce20b7d9367aba1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol:ERC721Holder": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "55c14519ad28985a184407aa233773db598d1e927e627592bb33ddcb01159540",
          "withoutMetadata": "55c14519ad28985a184407aa233773db598d1e927e627592bb33ddcb01159540",
          "linkedWithoutMetadata": "55c14519ad28985a184407aa233773db598d1e927e627592bb33ddcb01159540"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "a033fb68a13f8604ed2dc076b353eff5e8d25661bd8e05eaf5bb4a04b4f4a33e",
          "withoutMetadata": "a033fb68a13f8604ed2dc076b353eff5e8d25661bd8e05eaf5bb4a04b4f4a33e",
          "linkedWithoutMetadata": "a033fb68a13f8604ed2dc076b353eff5e8d25661bd8e05eaf5bb4a04b4f4a33e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "6717a4e9eef3dede44d9ed02a9d08a6d58e184f5b509930373c5b738be623df2",
          "withoutMetadata": "6717a4e9eef3dede44d9ed02a9d08a6d58e184f5b509930373c5b738be623df2",
          "linkedWithoutMetadata": "6717a4e9eef3dede44d9ed02a9d08a6d58e184f5b509930373c5b738be623df2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "35a9df9b55ead490c38b49887243abbb81b61588fe7828dc7fb466fd878d2cbb",
          "withoutMetadata": "35a9df9b55ead490c38b49887243abbb81b61588fe7828dc7fb466fd878d2cbb",
          "linkedWithoutMetadata": "35a9df9b55ead490c38b49887243abbb81b61588fe7828dc7fb466fd878d2cbb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "fccb984b3787526301d6953ae96cf4ca2fa22ceb939ada81015bdf02ccda1b9a",
          "withoutMetadata": "fccb984b3787526301d6953ae96cf4ca2fa22ceb939ada81015bdf02ccda1b9a",
          "linkedWithoutMetadata": "fccb984b3787526301d6953ae96cf4ca2fa22ceb939ada81015bdf02ccda1b9a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "2b9c5d06875f55894636d9e15977d6fe7e781f129d7355ccc55c5029ed83c44e",
          "withoutMetadata": "2b9c5d06875f55894636d9e15977d6fe7e781f129d7355ccc55c5029ed83c44e",
          "linkedWithoutMetadata": "2b9c5d06875f55894636d9e15977d6fe7e781f129d7355ccc55c5029ed83c44e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/IEIP712.sol:IEIP712": {
        "src": "lib/permit2/src/interfaces/IEIP712.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/ISignatureTransfer.sol:ISignatureTransfer": {
        "src": "lib/permit2/src/interfaces/ISignatureTransfer.sol:9",
        "inherit": [
          "lib/permit2/src/interfaces/IEIP712.sol:IEIP712"
        ],
        "libraries": [],
        "methods": [
          "nonceBitmap(address,uint256)",
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)",
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)",
          "permitTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes)",
          "permitWitnessTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes32,string,bytes)",
          "invalidateUnorderedNonces(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable": {
        "src": "lib/v2-core/src/interfaces/IAdminable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "transferAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Base.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "comptroller()",
          "protocolRevenues(address)",
          "claimProtocolRevenues(address)",
          "setComptroller(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:ISablierV2Comptroller": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "flashFee()",
          "isFlashAsset(address)",
          "protocolFees(address)",
          "setFlashFee(uint256)",
          "setProtocolFee(address,uint256)",
          "toggleFlashAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:13",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getAsset(uint256)",
          "getDepositedAmount(uint256)",
          "getEndTime(uint256)",
          "getRecipient(uint256)",
          "getRefundedAmount(uint256)",
          "getSender(uint256)",
          "getStartTime(uint256)",
          "getWithdrawnAmount(uint256)",
          "isCancelable(uint256)",
          "isCold(uint256)",
          "isDepleted(uint256)",
          "isStream(uint256)",
          "isWarm(uint256)",
          "nextStreamId()",
          "refundableAmountOf(uint256)",
          "statusOf(uint256)",
          "streamedAmountOf(uint256)",
          "wasCanceled(uint256)",
          "withdrawableAmountOf(uint256)",
          "burn(uint256)",
          "cancel(uint256)",
          "cancelMultiple(uint256[])",
          "renounce(uint256)",
          "setNFTDescriptor(address)",
          "withdraw(uint256,address,uint128)",
          "withdrawMax(uint256,address)",
          "withdrawMaxAndTransfer(uint256,address)",
          "withdrawMultiple(uint256[],address,uint128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:ISablierV2LockupDynamic": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_SEGMENT_COUNT()",
          "getRange(uint256)",
          "getSegments(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDeltas((address,bool,address,uint128,address,(address,uint256),struct LockupDynamic.SegmentWithDelta[]))",
          "createWithMilestones((address,uint40,bool,address,uint128,address,(address,uint256),struct LockupDynamic.Segment[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:ISablierV2LockupLinear": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getCliffTime(uint256)",
          "getRange(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))",
          "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:ISablierV2NFTDescriptor": {
        "src": "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:Lockup": {
        "src": "lib/v2-core/src/types/DataTypes.sol:29",
        "version": {
          "withMetadata": "9535d99e914d70e6bcf96cdeefc2830460fdb92c752c749cbacf802289155fe9",
          "withoutMetadata": "9535d99e914d70e6bcf96cdeefc2830460fdb92c752c749cbacf802289155fe9",
          "linkedWithoutMetadata": "9535d99e914d70e6bcf96cdeefc2830460fdb92c752c749cbacf802289155fe9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupDynamic": {
        "src": "lib/v2-core/src/types/DataTypes.sol:72",
        "version": {
          "withMetadata": "b76e191dd4d8588532d942192f524601c0fe92ac90ddcf4500d1ca32643b7971",
          "withoutMetadata": "b76e191dd4d8588532d942192f524601c0fe92ac90ddcf4500d1ca32643b7971",
          "linkedWithoutMetadata": "b76e191dd4d8588532d942192f524601c0fe92ac90ddcf4500d1ca32643b7971"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupLinear": {
        "src": "lib/v2-core/src/types/DataTypes.sol:180",
        "version": {
          "withMetadata": "c258d93d29b20fd5296d0479dbfeef7c83b44b0a60e290df0b2ab1047b271f5e",
          "withoutMetadata": "c258d93d29b20fd5296d0479dbfeef7c83b44b0a60e290df0b2ab1047b271f5e",
          "linkedWithoutMetadata": "c258d93d29b20fd5296d0479dbfeef7c83b44b0a60e290df0b2ab1047b271f5e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/auth/Ownable.sol:Ownable": {
        "src": "solady/src/auth/Ownable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "renounceOwnership()",
          "requestOwnershipHandover()",
          "cancelOwnershipHandover()",
          "completeOwnershipHandover(address)",
          "owner()",
          "ownershipHandoverExpiresAt(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC20.sol:ERC20": {
        "src": "solady/src/tokens/ERC20.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC721.sol:ERC721": {
        "src": "solady/src/tokens/ERC721.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "balanceOf(address)",
          "getApproved(uint256)",
          "approve(address,uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/CREATE3.sol:CREATE3": {
        "src": "solady/src/utils/CREATE3.sol:8",
        "version": {
          "withMetadata": "0f95263a789d0da7b4673d1603bd24fbf248e86563513e6d56bbaaec751b894e",
          "withoutMetadata": "0f95263a789d0da7b4673d1603bd24fbf248e86563513e6d56bbaaec751b894e",
          "linkedWithoutMetadata": "0f95263a789d0da7b4673d1603bd24fbf248e86563513e6d56bbaaec751b894e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/SafeTransferLib.sol:SafeTransferLib": {
        "src": "solady/src/utils/SafeTransferLib.sol:12",
        "version": {
          "withMetadata": "8e338a93339f74ca54d98b01b8b6616fc7b37ec8338a938dc7d45135f60eb8b1",
          "withoutMetadata": "8e338a93339f74ca54d98b01b8b6616fc7b37ec8338a938dc7d45135f60eb8b1",
          "linkedWithoutMetadata": "8e338a93339f74ca54d98b01b8b6616fc7b37ec8338a938dc7d45135f60eb8b1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "98054f022848b921dedb6492b2b32d93e548d73df4ab48fb4b8ec1463ff1224d",
          "withoutMetadata": "98054f022848b921dedb6492b2b32d93e548d73df4ab48fb4b8ec1463ff1224d",
          "linkedWithoutMetadata": "98054f022848b921dedb6492b2b32d93e548d73df4ab48fb4b8ec1463ff1224d"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "8f0f08d14d078dda01d12218a3b6b983dab76285d841f5f49fc393d39101fbf9",
          "withoutMetadata": "8f0f08d14d078dda01d12218a3b6b983dab76285d841f5f49fc393d39101fbf9",
          "linkedWithoutMetadata": "8f0f08d14d078dda01d12218a3b6b983dab76285d841f5f49fc393d39101fbf9"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "de301442fdf738e6bd16fb096ef2c3da41da4c6ceabc9e4148429b15b9bc032a",
          "withoutMetadata": "de301442fdf738e6bd16fb096ef2c3da41da4c6ceabc9e4148429b15b9bc032a",
          "linkedWithoutMetadata": "de301442fdf738e6bd16fb096ef2c3da41da4c6ceabc9e4148429b15b9bc032a"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "c972b6a6b8696e26d7fc7bc8a56e999d944639d24620caf8d2a4d6c58028d10d",
          "withoutMetadata": "c972b6a6b8696e26d7fc7bc8a56e999d944639d24620caf8d2a4d6c58028d10d",
          "linkedWithoutMetadata": "c972b6a6b8696e26d7fc7bc8a56e999d944639d24620caf8d2a4d6c58028d10d"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "29e37733402c6da0a7dedb0609b7d26498025675a699aa93dc9929a5407bebaf",
          "withoutMetadata": "29e37733402c6da0a7dedb0609b7d26498025675a699aa93dc9929a5407bebaf",
          "linkedWithoutMetadata": "29e37733402c6da0a7dedb0609b7d26498025675a699aa93dc9929a5407bebaf"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "c256384a2b396b5eff4801d7f70417e653aae3da1ed51f0eab326c7c226e2d54",
          "withoutMetadata": "c256384a2b396b5eff4801d7f70417e653aae3da1ed51f0eab326c7c226e2d54",
          "linkedWithoutMetadata": "c256384a2b396b5eff4801d7f70417e653aae3da1ed51f0eab326c7c226e2d54"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "e0d9e26543e3d8a6c0f4f531643c41a636a32b53ee14716f583eca8601fcb943",
          "withoutMetadata": "e0d9e26543e3d8a6c0f4f531643c41a636a32b53ee14716f583eca8601fcb943",
          "linkedWithoutMetadata": "e0d9e26543e3d8a6c0f4f531643c41a636a32b53ee14716f583eca8601fcb943"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Allo.sol:Allo": {
        "src": "contracts/core/Allo.sol:96",
        "version": {
          "withMetadata": "c43e58d8405532d31f16a85ceab5b5047de973e37af3dcfc772b14bbad2df4cf",
          "withoutMetadata": "c43e58d8405532d31f16a85ceab5b5047de973e37af3dcfc772b14bbad2df4cf",
          "linkedWithoutMetadata": "c43e58d8405532d31f16a85ceab5b5047de973e37af3dcfc772b14bbad2df4cf"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "solady/src/auth/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IAllo.sol:IAllo"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "getFeeDenominator()",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "isCloneableStrategy(address)",
          "getPool(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)20930_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "151",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "percentFee",
              "offset": 0,
              "slot": "201",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:123"
            },
            {
              "label": "baseFee",
              "offset": 0,
              "slot": "202",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:138"
            },
            {
              "label": "_poolIndex",
              "offset": 0,
              "slot": "203",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:141"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "204",
              "type": "t_address_payable",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:141"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(IRegistry)4399",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:142"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "206",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:143"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "207",
              "type": "t_mapping(t_uint256,t_struct(Pool)3918_storage)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:144"
            },
            {
              "label": "cloneableStrategies",
              "offset": 0,
              "slot": "208",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:146"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)4566": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)20930_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)3918_storage)": {
              "label": "mapping(uint256 => struct IAllo.Pool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Pool)3918_storage": {
              "label": "struct IAllo.Pool",
              "members": [
                {
                  "label": "profileId",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "strategy",
                  "type": "t_contract(IStrategy)4566",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "managerRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)20930_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Anchor.sol:Anchor": {
        "src": "contracts/core/Anchor.sol:92",
        "version": {
          "withMetadata": "59c438260bb8601cd7ada31647e43dd216c8ed951132c5fc6d7ba744cb5962e0",
          "withoutMetadata": "59c438260bb8601cd7ada31647e43dd216c8ed951132c5fc6d7ba744cb5962e0",
          "linkedWithoutMetadata": "59c438260bb8601cd7ada31647e43dd216c8ed951132c5fc6d7ba744cb5962e0"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol:ERC1155Holder",
          "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver",
          "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol:ERC721Holder",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,address)",
          "execute(address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Anchor",
            "src": "contracts/core/Anchor.sol:92"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/core/Anchor.sol:92"
          },
          {
            "kind": "state-variable-immutable",
            "name": "profileId",
            "src": "contracts/core/Anchor.sol:92"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Registry.sol:Registry": {
        "src": "contracts/core/Registry.sol:102",
        "version": {
          "withMetadata": "3f335995bc82c1e327f4f9a5e4c7045fe766cbacacf625b66da3b316d6fc5c2b",
          "withoutMetadata": "3f335995bc82c1e327f4f9a5e4c7045fe766cbacacf625b66da3b316d6fc5c2b",
          "linkedWithoutMetadata": "3f335995bc82c1e327f4f9a5e4c7045fe766cbacacf625b66da3b316d6fc5c2b"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "contracts/core/libraries/Native.sol:Native",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/interfaces/IRegistry.sol:IRegistry"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)20930_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "anchorToProfileId",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:108"
            },
            {
              "label": "profilesById",
              "offset": 0,
              "slot": "152",
              "type": "t_mapping(t_bytes32,t_struct(Profile)4226_storage)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:110"
            },
            {
              "label": "profileIdToPendingOwner",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:112"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Profile)4226_storage)": {
              "label": "mapping(bytes32 => struct IRegistry.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)20930_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Profile)4226_storage": {
              "label": "struct IRegistry.Profile",
              "members": [
                {
                  "label": "id",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "anchor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)20930_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IAllo.sol:IAllo": {
        "src": "contracts/core/interfaces/IAllo.sol:97",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "isCloneableStrategy(address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "getPool(uint256)",
          "getFeeDenominator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IRegistry.sol:IRegistry": {
        "src": "contracts/core/interfaces/IRegistry.sol:92",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/core/interfaces/IStrategy.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "isValidAllocator(address)",
          "isPoolActive()",
          "getPoolAmount()",
          "increasePoolAmount(uint256)",
          "getRecipientStatus(address)",
          "getPayouts(address[],bytes[])",
          "initialize(uint256,bytes)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Clone.sol:Clone": {
        "src": "contracts/core/libraries/Clone.sol:37",
        "version": {
          "withMetadata": "3b4d9773d075db5524a6fd74f050916b0df818ef2dfa983377933f143d70178b",
          "withoutMetadata": "3b4d9773d075db5524a6fd74f050916b0df818ef2dfa983377933f143d70178b",
          "linkedWithoutMetadata": "3b4d9773d075db5524a6fd74f050916b0df818ef2dfa983377933f143d70178b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Errors.sol:Errors": {
        "src": "contracts/core/libraries/Errors.sol:109",
        "version": {
          "withMetadata": "98304f324e4dcad7ef00aa18ceef829afbc9e3063f3b9ef17e8cd84c57a4bc4c",
          "withoutMetadata": "98304f324e4dcad7ef00aa18ceef829afbc9e3063f3b9ef17e8cd84c57a4bc4c",
          "linkedWithoutMetadata": "98304f324e4dcad7ef00aa18ceef829afbc9e3063f3b9ef17e8cd84c57a4bc4c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Native.sol:Native": {
        "src": "contracts/core/libraries/Native.sol:26",
        "version": {
          "withMetadata": "6d4888fcccc881f3b1be3df47bc64134c9a0cfe8e47648dd0144750baa6be6a0",
          "withoutMetadata": "6d4888fcccc881f3b1be3df47bc64134c9a0cfe8e47648dd0144750baa6be6a0",
          "linkedWithoutMetadata": "6d4888fcccc881f3b1be3df47bc64134c9a0cfe8e47648dd0144750baa6be6a0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Transfer.sol:Transfer": {
        "src": "contracts/core/libraries/Transfer.sol:97",
        "version": {
          "withMetadata": "e5b41d3d3d27bb217d8f7f47aadcd48fbd232132aef460bbc356d547b124d818",
          "withoutMetadata": "e5b41d3d3d27bb217d8f7f47aadcd48fbd232132aef460bbc356d547b124d818",
          "linkedWithoutMetadata": "e5b41d3d3d27bb217d8f7f47aadcd48fbd232132aef460bbc356d547b124d818"
        },
        "inherit": [
          "contracts/core/libraries/Native.sol:Native"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/factory/ContractFactory.sol:ContractFactory": {
        "src": "contracts/factory/ContractFactory.sol:107",
        "version": {
          "withMetadata": "9b31af5867907f9dfb64f070d5d4fdf32aafc0a33bcf2a4681b850b62b754d0d",
          "withoutMetadata": "9b31af5867907f9dfb64f070d5d4fdf32aafc0a33bcf2a4681b850b62b754d0d",
          "linkedWithoutMetadata": "9b31af5867907f9dfb64f070d5d4fdf32aafc0a33bcf2a4681b850b62b754d0d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "deploy(string,string,bytes)",
          "setDeployer(address,bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ContractFactory",
            "src": "contracts/factory/ContractFactory.sol:119"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "usedSalts",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            },
            {
              "label": "isDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/BaseStrategy.sol:BaseStrategy": {
        "src": "contracts/strategies/BaseStrategy.sol:111",
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "getPoolAmount()",
          "isPoolActive()",
          "getRecipientStatus(address)",
          "increasePoolAmount(uint256)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)",
          "getPayouts(address[],bytes[])",
          "isValidAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseStrategy",
            "src": "contracts/strategies/BaseStrategy.sol:129"
          },
          {
            "kind": "state-variable-immutable",
            "name": "allo",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          },
          {
            "kind": "state-variable-immutable",
            "name": "strategyId",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:DirectGrantsSimpleStrategy": {
        "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:110",
        "version": {
          "withMetadata": "7ad373251e2cda186ed4fa54d66d1809cabc3ef38ecfe34717774dbb026e7b20",
          "withoutMetadata": "7ad373251e2cda186ed4fa54d66d1809cabc3ef38ecfe34717774dbb026e7b20",
          "linkedWithoutMetadata": "7ad373251e2cda186ed4fa54d66d1809cabc3ef38ecfe34717774dbb026e7b20"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getMilestoneStatus(address,uint256)",
          "getMilestones(address)",
          "setMilestones(address,struct DirectGrantsSimpleStrategy.Milestone[])",
          "reviewSetMilestones(address,uint8)",
          "submitMilestone(address,uint256,(uint256,string))",
          "rejectMilestone(address,uint256)",
          "setRecipientStatusToInReview(address[])",
          "setPoolActive(bool)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DirectGrantsSimpleStrategy",
            "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:192"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:161"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:163"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:164"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(IRegistry)4399",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:167"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:168"
            },
            {
              "label": "_acceptedRecipientIds",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:172"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)5683_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:177"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Milestone)5692_storage)dyn_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:179"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:184"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)5692_storage)dyn_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(Milestone)5692_storage)dyn_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Milestone[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5683_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)5692_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)5683_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "milestonesReviewStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:DonationVotingCustomRegistryStrategy": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52",
        "version": {
          "withMetadata": "83035564a3449c9e9b573a89840d3c1f2fc2aa3abf771fae60647a42342cd4e9",
          "withoutMetadata": "83035564a3449c9e9b573a89840d3c1f2fc2aa3abf771fae60647a42342cd4e9",
          "linkedWithoutMetadata": "83035564a3449c9e9b573a89840d3c1f2fc2aa3abf771fae60647a42342cd4e9"
        },
        "inherit": [
          "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingCustomRegistryStrategy",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4399",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:162"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7297_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:165"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4417_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:167"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:172"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(SimpleProjectRegistry)7268",
              "contract": "DonationVotingCustomRegistryStrategy",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(SimpleProjectRegistry)7268": {
              "label": "contract SimpleProjectRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4417_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7297_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4417_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7297_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:SimpleProjectRegistry": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:26",
        "version": {
          "withMetadata": "47857f3f881a7091fd67de6eb86667df27890e225bd70a7581efa96d126369c2",
          "withoutMetadata": "47857f3f881a7091fd67de6eb86667df27890e225bd70a7581efa96d126369c2",
          "linkedWithoutMetadata": "47857f3f881a7091fd67de6eb86667df27890e225bd70a7581efa96d126369c2"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addProject(address)",
          "addProjects(address[])",
          "removeProject(address)",
          "removeProjects(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleProjectRegistry",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "projects",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleProjectRegistry",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy": {
        "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:100",
        "version": {
          "withMetadata": "353f816dabf8ff5278143282543af2a00a458a1fbc2f36bae6e624618f1344a1",
          "withoutMetadata": "353f816dabf8ff5278143282543af2a00a458a1fbc2f36bae6e624618f1344a1",
          "linkedWithoutMetadata": "353f816dabf8ff5278143282543af2a00a458a1fbc2f36bae6e624618f1344a1"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "setPayout(address[],uint256[])",
          "claim(struct DonationVotingStrategy.Claim[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingStrategy",
            "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:198"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4399",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:162"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7297_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:165"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4417_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:167"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:172"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4417_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7297_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4417_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7297_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:ProportionalPayoutStrategy": {
        "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:113",
        "version": {
          "withMetadata": "884226506f4a259897e573487a02ae8b4661233b0b8354e23f2094273d627f95",
          "withoutMetadata": "884226506f4a259897e573487a02ae8b4661233b0b8354e23f2094273d627f95",
          "linkedWithoutMetadata": "884226506f4a259897e573487a02ae8b4661233b0b8354e23f2094273d627f95"
        },
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "setAllocationTime(uint64,uint64)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProportionalPayoutStrategy",
            "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:163"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Recipient)8709_storage)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:151"
            },
            {
              "label": "hasAllocated",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:153"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ERC721)35610",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "maxRecipientsAllowed",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:155"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:157"
            },
            {
              "label": "totalAllocations",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:159"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:161"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)35610": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)8709_storage)": {
              "label": "mapping(address => struct ProportionalPayoutStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)8709_storage": {
              "label": "struct ProportionalPayoutStrategy.Recipient",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:QVGovernanceERC20Votes": {
        "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:89",
        "version": {
          "withMetadata": "f4c6282875a0fad7c569aa96e242ee95a2f301446097f8b90c61605e3f3029c9",
          "withoutMetadata": "f4c6282875a0fad7c569aa96e242ee95a2f301446097f8b90c61605e3f3029c9",
          "linkedWithoutMetadata": "f4c6282875a0fad7c569aa96e242ee95a2f301446097f8b90c61605e3f3029c9"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVGovernanceERC20Votes",
            "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:102"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4399",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17740_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17751_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:238"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:241"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:243"
            },
            {
              "label": "govToken",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IVotes)23421",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:96"
            },
            {
              "label": "timestamp",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:98"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IVotes)23421": {
              "label": "contract IVotes",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(Status)4412)": {
              "label": "mapping(address => enum IStrategy.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))": {
              "label": "mapping(address => mapping(address => enum IStrategy.Status))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17751_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17740_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4412,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17751_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17740_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:HackathonQVStrategy": {
        "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:110",
        "version": {
          "withMetadata": "d2392b3d44b757af9f9c615b0c1033652a16f89b02667705518221209af82747",
          "withoutMetadata": "d2392b3d44b757af9f9c615b0c1033652a16f89b02667705518221209af82747",
          "linkedWithoutMetadata": "d2392b3d44b757af9f9c615b0c1033652a16f89b02667705518221209af82747"
        },
        "inherit": [
          "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver",
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllowedRecipientIds(address[],uint64,bytes)",
          "setPayoutPercentages(uint256[])",
          "getPayouts(address[],bytes[])",
          "getAttestation(bytes32)",
          "getSchema(bytes32)",
          "isPayable()",
          "isAttestationExpired(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HackathonQVStrategy",
            "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:148"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4399",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17740_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17751_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:238"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:241"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:243"
            },
            {
              "label": "_eas",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IEAS)20794",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:29"
            },
            {
              "label": "payoutPercentages",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:130"
            },
            {
              "label": "votesByRank",
              "offset": 0,
              "slot": "14",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:131"
            },
            {
              "label": "easInfo",
              "offset": 0,
              "slot": "15",
              "type": "t_struct(EASInfo)9613_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "20",
              "type": "t_contract(ERC721)35610",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:133"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:133"
            },
            {
              "label": "recipientIdToUID",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:135"
            },
            {
              "label": "recipientIdToIndex",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:136"
            },
            {
              "label": "indexToRecipientId",
              "offset": 0,
              "slot": "25",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:143"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ERC721)35610": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IEAS)20794": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(ISchemaRegistry)20839": {
              "label": "contract ISchemaRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(Status)4412)": {
              "label": "mapping(address => enum IStrategy.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))": {
              "label": "mapping(address => mapping(address => enum IStrategy.Status))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17751_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17740_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4412,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17751_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(EASInfo)9613_storage": {
              "label": "struct HackathonQVStrategy.EASInfo",
              "members": [
                {
                  "label": "eas",
                  "type": "t_contract(IEAS)20794",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "schemaRegistry",
                  "type": "t_contract(ISchemaRegistry)20839",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "schemaUID",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "schema",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "revocable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17740_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver": {
        "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:20",
        "inherit": [
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver"
        ],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_eas",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IEAS)20794",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:29"
            }
          ],
          "types": {
            "t_contract(IEAS)20794": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:QVImpactStreamStrategy": {
        "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:89",
        "version": {
          "withMetadata": "2c3a97e58b8865afaff5bb67388db3fa254fbfc133f7ce6d8ccb1842274a54b0",
          "withoutMetadata": "2c3a97e58b8865afaff5bb67388db3fa254fbfc133f7ce6d8ccb1842274a54b0",
          "linkedWithoutMetadata": "2c3a97e58b8865afaff5bb67388db3fa254fbfc133f7ce6d8ccb1842274a54b0"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "updatePoolTimestamps(uint64,uint64)",
          "batchAddAllocator(address[])",
          "addAllocator(address)",
          "batchRemoveAllocator(address[])",
          "removeAllocator(address)",
          "setPayouts(struct QVImpactStreamStrategy.Payout[])",
          "getRecipient(address)",
          "getVoiceCreditsCastByAllocator(address)",
          "getVoiceCreditsCastByAllocatorToRecipient(address,address)",
          "getVotesCastByAllocatorToRecipient(address,address)",
          "recoverFunds(address,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVImpactStreamStrategy",
            "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:218"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "3",
              "type": "t_uint64",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:157"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "3",
              "type": "t_uint64",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:158"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IRegistry)4399",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:161"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:163"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:165"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)11045_storage)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:168"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)11056_storage)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:173"
            },
            {
              "label": "payouts",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:178"
            },
            {
              "label": "payoutSet",
              "offset": 0,
              "slot": "10",
              "type": "t_bool",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:179"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)11056_storage)": {
              "label": "mapping(address => struct QVImpactStreamStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)11045_storage)": {
              "label": "mapping(address => struct QVImpactStreamStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)11056_storage": {
              "label": "struct QVImpactStreamStrategy.Allocator",
              "members": [
                {
                  "label": "usedVoiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)11045_storage": {
              "label": "struct QVImpactStreamStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "requestedAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:QVNftTieredStrategy": {
        "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:94",
        "version": {
          "withMetadata": "9fe39519ca7843ea1bd9049986c338f8f80baa4d787877c6b2a8eb20454862dd",
          "withoutMetadata": "9fe39519ca7843ea1bd9049986c338f8f80baa4d787877c6b2a8eb20454862dd",
          "linkedWithoutMetadata": "9fe39519ca7843ea1bd9049986c338f8f80baa4d787877c6b2a8eb20454862dd"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVNftTieredStrategy",
            "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4399",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17740_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17751_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:238"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:241"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:243"
            },
            {
              "label": "nfts",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_contract(ERC721)35610)dyn_storage",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:111"
            },
            {
              "label": "maxVoiceCreditsPerNft",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_contract(ERC721)35610,t_uint256)",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:113"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_contract(ERC721)35610,t_mapping(t_uint256,t_uint256))",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:115"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(ERC721)35610)dyn_storage": {
              "label": "contract ERC721[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)35610": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(Status)4412)": {
              "label": "mapping(address => enum IStrategy.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))": {
              "label": "mapping(address => mapping(address => enum IStrategy.Status))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17751_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17740_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)35610,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(contract ERC721 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)35610,t_uint256)": {
              "label": "mapping(contract ERC721 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4412,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17751_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17740_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:LockupDynamicStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:16",
        "version": {
          "withMetadata": "2cb71e52a3006a1bb409bd2f588c26a1b8c0c4a1397a7efa39ee1848b3401a92",
          "withoutMetadata": "2cb71e52a3006a1bb409bd2f588c26a1b8c0c4a1397a7efa39ee1848b3401a92",
          "linkedWithoutMetadata": "2cb71e52a3006a1bb409bd2f588c26a1b8c0c4a1397a7efa39ee1848b3401a92"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientSegments(address,struct LockupDynamic.SegmentWithDelta[])",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupDynamicStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:42"
            },
            {
              "label": "lockupDynamic",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupDynamic)34021",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)34141_storage",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)12561_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(SegmentWithDelta)34225_storage)dyn_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupDynamic)34021": {
              "label": "contract ISablierV2LockupDynamic",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12561_storage)": {
              "label": "mapping(address => struct LockupDynamicStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)34141_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)33382",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12561_storage": {
              "label": "struct LockupDynamicStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "segments",
                  "type": "t_array(t_struct(SegmentWithDelta)34225_storage)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(SegmentWithDelta)34225_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exponent",
                  "type": "t_userDefinedValueType(UD2x18)31578",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "delta",
                  "type": "t_uint40",
                  "offset": 24,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD2x18)31578": {
              "label": "UD2x18",
              "numberOfBytes": "8",
              "underlying": "t_uint64"
            },
            "t_userDefinedValueType(UD60x18)33382": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:LockupLinearStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:16",
        "version": {
          "withMetadata": "e415533bef21db041f4a52f16465ae484740b8bec5aa463f2de15b6eea4a5650",
          "withoutMetadata": "e415533bef21db041f4a52f16465ae484740b8bec5aa463f2de15b6eea4a5650",
          "linkedWithoutMetadata": "e415533bef21db041f4a52f16465ae484740b8bec5aa463f2de15b6eea4a5650"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientDurations(address,(uint40,uint40))",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupLinearStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:42"
            },
            {
              "label": "lockupLinear",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupLinear)34110",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)34141_storage",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)13743_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupLinear)34110": {
              "label": "contract ISablierV2LockupLinear",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)13743_storage)": {
              "label": "mapping(address => struct LockupLinearStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)34141_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)33382",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Durations)34293_storage": {
              "label": "struct LockupLinear.Durations",
              "members": [
                {
                  "label": "cliff",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "total",
                  "type": "t_uint40",
                  "offset": 5,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)13743_storage": {
              "label": "struct LockupLinearStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durations",
                  "type": "t_struct(Durations)34293_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD60x18)33382": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:NFT": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:8",
        "version": {
          "withMetadata": "d6d8e24e880309697775d9c93445aa244c61ae5e15cbce95b377b6fc63c3c3bc",
          "withoutMetadata": "d6d8e24e880309697775d9c93445aa244c61ae5e15cbce95b377b6fc63c3c3bc",
          "linkedWithoutMetadata": "d6d8e24e880309697775d9c93445aa244c61ae5e15cbce95b377b6fc63c3c3bc"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable",
          "solady/src/tokens/ERC721.sol:ERC721"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)",
          "name()",
          "symbol()",
          "mintTo(address)",
          "tokenURI(uint256)",
          "withdrawPayments(address payable)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFT",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTokenId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:16"
            },
            {
              "label": "MINT_PRICE",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:17"
            },
            {
              "label": "__name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:20"
            },
            {
              "label": "__symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:NFTFactory": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:6",
        "version": {
          "withMetadata": "b0f22177e16f764521f2cf4ad93427558dea6449e983e9d5a5abf4df5b8ae8b2",
          "withoutMetadata": "b0f22177e16f764521f2cf4ad93427558dea6449e983e9d5a5abf4df5b8ae8b2",
          "linkedWithoutMetadata": "b0f22177e16f764521f2cf4ad93427558dea6449e983e9d5a5abf4df5b8ae8b2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createNFTContract(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isNFTContract",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NFTFactory",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:WrappedVotingNftMintStrategy": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:101",
        "version": {
          "withMetadata": "98578a2238a7ef7e3e6fa8f23a919d34ba38808a6f7569a553648709a2300a31",
          "withoutMetadata": "98578a2238a7ef7e3e6fa8f23a919d34ba38808a6f7569a553648709a2300a31",
          "linkedWithoutMetadata": "98578a2238a7ef7e3e6fa8f23a919d34ba38808a6f7569a553648709a2300a31"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllocationTimes(uint64,uint64)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrappedVotingNftMintStrategy",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:147"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "nftFactory",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(NFTFactory)14970",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationStartTime",
              "offset": 20,
              "slot": "4",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "currentWinner",
              "offset": 8,
              "slot": "5",
              "type": "t_address",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:137"
            },
            {
              "label": "allocations",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:138"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(NFTFactory)14970": {
              "label": "contract NFTFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:99",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(struct DonationVotingMerkleDistributionBaseStrategy.ApplicationStatus[],uint256)",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(address)",
          "updateDistribution(bytes32,(uint256,string))",
          "isDistributionSet()",
          "hasBeenDistributed(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionBaseStrategy",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:293"
          },
          {
            "kind": "state-variable-assignment",
            "name": "recipientsCounter",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
          },
          {
            "kind": "state-variable-immutable",
            "name": "PERMIT2",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:230"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4692_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:208"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4399",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:235"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:257"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:259"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:265"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)15551_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:267"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)15551_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)15551_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:DonationVotingMerkleDistributionDirectTransferStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:82",
        "version": {
          "withMetadata": "3ce1371a30f66a82c1575d30c8c19863cc8e76f4981edd188295e8e83135aceb",
          "withoutMetadata": "3ce1371a30f66a82c1575d30c8c19863cc8e76f4981edd188295e8e83135aceb",
          "linkedWithoutMetadata": "3ce1371a30f66a82c1575d30c8c19863cc8e76f4981edd188295e8e83135aceb"
        },
        "inherit": [
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionDirectTransferStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4692_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:208"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4399",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:235"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:257"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:259"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:265"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)15551_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:267"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)15551_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)15551_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:DonationVotingMerkleDistributionVaultStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:94",
        "version": {
          "withMetadata": "c56b148e316921efaf5cd82505ff79324fea281ab643159d201dc2078d79e83f",
          "withoutMetadata": "c56b148e316921efaf5cd82505ff79324fea281ab643159d201dc2078d79e83f",
          "linkedWithoutMetadata": "c56b148e316921efaf5cd82505ff79324fea281ab643159d201dc2078d79e83f"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)",
          "claim(struct DonationVotingMerkleDistributionVaultStrategy.Claim[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionVaultStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:128"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4692_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:208"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4399",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:235"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:257"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:259"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:265"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)15551_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:267"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "16",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "16",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "18",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "67",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:117"
            },
            {
              "label": "totalClaimableAmount",
              "offset": 0,
              "slot": "68",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:120"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)15551_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)15551_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy": {
        "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:89",
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVBaseStrategy",
            "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:271"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4399",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17740_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17751_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:238"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:241"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:243"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(Status)4412)": {
              "label": "mapping(address => enum IStrategy.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))": {
              "label": "mapping(address => mapping(address => enum IStrategy.Status))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17751_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17740_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4412,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17751_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17740_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-simple/QVSimpleStrategy.sol:QVSimpleStrategy": {
        "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:90",
        "version": {
          "withMetadata": "ee15374165c92bde53449982458685564a3a69527ed97982700ddfb3538a263e",
          "withoutMetadata": "ee15374165c92bde53449982458685564a3a69527ed97982700ddfb3538a263e",
          "linkedWithoutMetadata": "ee15374165c92bde53449982458685564a3a69527ed97982700ddfb3538a263e"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "addAllocator(address)",
          "removeAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVSimpleStrategy",
            "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4399",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17740_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17751_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:238"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:241"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:243"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:108"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:111"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(Status)4412)": {
              "label": "mapping(address => enum IStrategy.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))": {
              "label": "mapping(address => mapping(address => enum IStrategy.Status))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17751_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17740_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4412,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17751_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17740_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:RFPCommitteeStrategy": {
        "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:84",
        "version": {
          "withMetadata": "a2b71affd5c998501ec693ed740ad3ca43156221b577916d7731161c0e90e174",
          "withoutMetadata": "a2b71affd5c998501ec693ed740ad3ca43156221b577916d7731161c0e90e174",
          "linkedWithoutMetadata": "a2b71affd5c998501ec693ed740ad3ca43156221b577916d7731161c0e90e174"
        },
        "inherit": [
          "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPCommitteeStrategy",
            "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:124"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:174"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:175"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:180"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4399",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:183"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:186"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:190"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)19391_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:192"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)19382_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:193"
            },
            {
              "label": "voteThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:104"
            },
            {
              "label": "votedFor",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:109"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:112"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)19391_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)19382_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)19391_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)19382_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy": {
        "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:106",
        "version": {
          "withMetadata": "008459d71785d79f38c7b49334296ac2feba53e65b02c4e5af597413ec076dc1",
          "withoutMetadata": "008459d71785d79f38c7b49334296ac2feba53e65b02c4e5af597413ec076dc1",
          "linkedWithoutMetadata": "008459d71785d79f38c7b49334296ac2feba53e65b02c4e5af597413ec076dc1"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getPayouts(address[],bytes[])",
          "getMilestone(uint256)",
          "getMilestoneStatus(uint256)",
          "setPoolActive(bool)",
          "setMilestones(struct RFPSimpleStrategy.Milestone[])",
          "submitUpcomingMilestone((uint256,string))",
          "increaseMaxBid(uint256)",
          "rejectMilestone(uint256)",
          "withdraw(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPSimpleStrategy",
            "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:201"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:174"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:175"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:180"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4399",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:183"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:186"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:190"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)19391_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:192"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)19382_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:193"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)19391_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Recipient)19382_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)19391_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)19382_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/IEAS.sol:IEAS": {
        "src": "lib/eas-contracts/contracts/IEAS.sol:82",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSchemaRegistry()",
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))",
          "multiAttest(struct MultiAttestationRequest[])",
          "multiAttestByDelegation(struct MultiDelegatedAttestationRequest[])",
          "revoke((bytes32,(bytes32,uint256)))",
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))",
          "multiRevoke(struct MultiRevocationRequest[])",
          "multiRevokeByDelegation(struct MultiDelegatedRevocationRequest[])",
          "timestamp(bytes32)",
          "multiTimestamp(bytes32[])",
          "revokeOffchain(bytes32)",
          "multiRevokeOffchain(bytes32[])",
          "getAttestation(bytes32)",
          "isAttestationValid(bytes32)",
          "getTimestamp(bytes32)",
          "getRevokeOffchain(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol:ISchemaRegistry": {
        "src": "lib/eas-contracts/contracts/ISchemaRegistry.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "register(string,address,bool)",
          "getSchema(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver": {
        "src": "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:51",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)20930_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:260"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)20930_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)20930_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:19",
        "version": {
          "withMetadata": "d91b72af9968af15a54a9c9d6cbf9d2cdd548447974228ed909982ac7efccaa5",
          "withoutMetadata": "d91b72af9968af15a54a9c9d6cbf9d2cdd548447974228ed909982ac7efccaa5",
          "linkedWithoutMetadata": "d91b72af9968af15a54a9c9d6cbf9d2cdd548447974228ed909982ac7efccaa5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "fb364aa418afdc6d847fd43edf3501564722b834b75997012cd6588bf6d9a97d",
          "withoutMetadata": "fb364aa418afdc6d847fd43edf3501564722b834b75997012cd6588bf6d9a97d",
          "linkedWithoutMetadata": "fb364aa418afdc6d847fd43edf3501564722b834b75997012cd6588bf6d9a97d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol:12",
        "version": {
          "withMetadata": "6c76f5b3411ad6135b8438708c224ddbec651005292024ce342d1b1f2be8b752",
          "withoutMetadata": "6c76f5b3411ad6135b8438708c224ddbec651005292024ce342d1b1f2be8b752",
          "linkedWithoutMetadata": "6c76f5b3411ad6135b8438708c224ddbec651005292024ce342d1b1f2be8b752"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "b09aa358c3c0db5e80c29bc616e8f8d4ec33bd5f728d49435a70cbd78616ab5d",
          "withoutMetadata": "b09aa358c3c0db5e80c29bc616e8f8d4ec33bd5f728d49435a70cbd78616ab5d",
          "linkedWithoutMetadata": "b09aa358c3c0db5e80c29bc616e8f8d4ec33bd5f728d49435a70cbd78616ab5d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SignedMathUpgradeable.sol:9",
        "version": {
          "withMetadata": "bf1adf7346dcdca502ef3f1ee5fdfce76f2cc8532cbdec8cbfc9287b50c00d5d",
          "withoutMetadata": "bf1adf7346dcdca502ef3f1ee5fdfce76f2cc8532cbdec8cbfc9287b50c00d5d",
          "linkedWithoutMetadata": "bf1adf7346dcdca502ef3f1ee5fdfce76f2cc8532cbdec8cbfc9287b50c00d5d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol:ERC1155Holder": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol:16",
        "version": {
          "withMetadata": "b93b8fb52628308316865ba7c5e55d7ebf39b1a620964688d1803d8ac204ab95",
          "withoutMetadata": "b93b8fb52628308316865ba7c5e55d7ebf39b1a620964688d1803d8ac204ab95",
          "linkedWithoutMetadata": "b93b8fb52628308316865ba7c5e55d7ebf39b1a620964688d1803d8ac204ab95"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver",
          "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "2d6ddbd8341b06f42caa6482454f116f2ade4f16eac9db9c1852d277aa6f079b",
          "withoutMetadata": "2d6ddbd8341b06f42caa6482454f116f2ade4f16eac9db9c1852d277aa6f079b",
          "linkedWithoutMetadata": "2d6ddbd8341b06f42caa6482454f116f2ade4f16eac9db9c1852d277aa6f079b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol:ERC721Holder": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "6e945c7555b62f7e2ed24f7ff8b375812a92df1a4109066c8c03c76bb2d85b5d",
          "withoutMetadata": "6e945c7555b62f7e2ed24f7ff8b375812a92df1a4109066c8c03c76bb2d85b5d",
          "linkedWithoutMetadata": "6e945c7555b62f7e2ed24f7ff8b375812a92df1a4109066c8c03c76bb2d85b5d"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b7d056ed3afb10199f8e3671f1137ecbf74413ee56ed61c6c5976b279c158a1d",
          "withoutMetadata": "b7d056ed3afb10199f8e3671f1137ecbf74413ee56ed61c6c5976b279c158a1d",
          "linkedWithoutMetadata": "b7d056ed3afb10199f8e3671f1137ecbf74413ee56ed61c6c5976b279c158a1d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "a64617bb514dc8083cd2f84dbcd7f5d68f747155729646e3c9567ead6be8bc99",
          "withoutMetadata": "a64617bb514dc8083cd2f84dbcd7f5d68f747155729646e3c9567ead6be8bc99",
          "linkedWithoutMetadata": "a64617bb514dc8083cd2f84dbcd7f5d68f747155729646e3c9567ead6be8bc99"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "2161144fb3a493dfcfb042e67ae146f382695c5d36c218137d7243ad59de28cc",
          "withoutMetadata": "2161144fb3a493dfcfb042e67ae146f382695c5d36c218137d7243ad59de28cc",
          "linkedWithoutMetadata": "2161144fb3a493dfcfb042e67ae146f382695c5d36c218137d7243ad59de28cc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "8ba904d6d499563304b3593ee197dc0b13720620cf3a37950daa4debc5f1ece4",
          "withoutMetadata": "8ba904d6d499563304b3593ee197dc0b13720620cf3a37950daa4debc5f1ece4",
          "linkedWithoutMetadata": "8ba904d6d499563304b3593ee197dc0b13720620cf3a37950daa4debc5f1ece4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "28766c251d98fbc0f78c6b5ed31a67aab95121536f8e9bd9135a5963896300a9",
          "withoutMetadata": "28766c251d98fbc0f78c6b5ed31a67aab95121536f8e9bd9135a5963896300a9",
          "linkedWithoutMetadata": "28766c251d98fbc0f78c6b5ed31a67aab95121536f8e9bd9135a5963896300a9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/IEIP712.sol:IEIP712": {
        "src": "lib/permit2/src/interfaces/IEIP712.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/ISignatureTransfer.sol:ISignatureTransfer": {
        "src": "lib/permit2/src/interfaces/ISignatureTransfer.sol:9",
        "inherit": [
          "lib/permit2/src/interfaces/IEIP712.sol:IEIP712"
        ],
        "libraries": [],
        "methods": [
          "nonceBitmap(address,uint256)",
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)",
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)",
          "permitTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes)",
          "permitWitnessTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes32,string,bytes)",
          "invalidateUnorderedNonces(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable": {
        "src": "lib/v2-core/src/interfaces/IAdminable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "transferAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Base.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "comptroller()",
          "protocolRevenues(address)",
          "claimProtocolRevenues(address)",
          "setComptroller(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:ISablierV2Comptroller": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "flashFee()",
          "isFlashAsset(address)",
          "protocolFees(address)",
          "setFlashFee(uint256)",
          "setProtocolFee(address,uint256)",
          "toggleFlashAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:13",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getAsset(uint256)",
          "getDepositedAmount(uint256)",
          "getEndTime(uint256)",
          "getRecipient(uint256)",
          "getRefundedAmount(uint256)",
          "getSender(uint256)",
          "getStartTime(uint256)",
          "getWithdrawnAmount(uint256)",
          "isCancelable(uint256)",
          "isCold(uint256)",
          "isDepleted(uint256)",
          "isStream(uint256)",
          "isWarm(uint256)",
          "nextStreamId()",
          "refundableAmountOf(uint256)",
          "statusOf(uint256)",
          "streamedAmountOf(uint256)",
          "wasCanceled(uint256)",
          "withdrawableAmountOf(uint256)",
          "burn(uint256)",
          "cancel(uint256)",
          "cancelMultiple(uint256[])",
          "renounce(uint256)",
          "setNFTDescriptor(address)",
          "withdraw(uint256,address,uint128)",
          "withdrawMax(uint256,address)",
          "withdrawMaxAndTransfer(uint256,address)",
          "withdrawMultiple(uint256[],address,uint128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:ISablierV2LockupDynamic": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_SEGMENT_COUNT()",
          "getRange(uint256)",
          "getSegments(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDeltas((address,bool,address,uint128,address,(address,uint256),struct LockupDynamic.SegmentWithDelta[]))",
          "createWithMilestones((address,uint40,bool,address,uint128,address,(address,uint256),struct LockupDynamic.Segment[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:ISablierV2LockupLinear": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getCliffTime(uint256)",
          "getRange(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))",
          "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:ISablierV2NFTDescriptor": {
        "src": "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:Lockup": {
        "src": "lib/v2-core/src/types/DataTypes.sol:29",
        "version": {
          "withMetadata": "d7cc97d070e06cc2982a275455640ad4b152155ba1941876290c482a439bf04a",
          "withoutMetadata": "d7cc97d070e06cc2982a275455640ad4b152155ba1941876290c482a439bf04a",
          "linkedWithoutMetadata": "d7cc97d070e06cc2982a275455640ad4b152155ba1941876290c482a439bf04a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupDynamic": {
        "src": "lib/v2-core/src/types/DataTypes.sol:72",
        "version": {
          "withMetadata": "988d2079fa900e9d06ac460251029d6ffdfec318ba28e86cbef017bf79d3d73b",
          "withoutMetadata": "988d2079fa900e9d06ac460251029d6ffdfec318ba28e86cbef017bf79d3d73b",
          "linkedWithoutMetadata": "988d2079fa900e9d06ac460251029d6ffdfec318ba28e86cbef017bf79d3d73b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupLinear": {
        "src": "lib/v2-core/src/types/DataTypes.sol:180",
        "version": {
          "withMetadata": "ec12ad0f81149f61d35e45ec0c71e49bce46d4335204ecd956b65a52d01ee7db",
          "withoutMetadata": "ec12ad0f81149f61d35e45ec0c71e49bce46d4335204ecd956b65a52d01ee7db",
          "linkedWithoutMetadata": "ec12ad0f81149f61d35e45ec0c71e49bce46d4335204ecd956b65a52d01ee7db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/auth/Ownable.sol:Ownable": {
        "src": "solady/src/auth/Ownable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "renounceOwnership()",
          "requestOwnershipHandover()",
          "cancelOwnershipHandover()",
          "completeOwnershipHandover(address)",
          "owner()",
          "ownershipHandoverExpiresAt(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC20.sol:ERC20": {
        "src": "solady/src/tokens/ERC20.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC721.sol:ERC721": {
        "src": "solady/src/tokens/ERC721.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "balanceOf(address)",
          "getApproved(uint256)",
          "approve(address,uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/CREATE3.sol:CREATE3": {
        "src": "solady/src/utils/CREATE3.sol:8",
        "version": {
          "withMetadata": "cebcdc0853c85c3a4e9395d8d9a12af41e1c8683372b893e8e8fe24154010242",
          "withoutMetadata": "cebcdc0853c85c3a4e9395d8d9a12af41e1c8683372b893e8e8fe24154010242",
          "linkedWithoutMetadata": "cebcdc0853c85c3a4e9395d8d9a12af41e1c8683372b893e8e8fe24154010242"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/SafeTransferLib.sol:SafeTransferLib": {
        "src": "solady/src/utils/SafeTransferLib.sol:12",
        "version": {
          "withMetadata": "704ba67dcd39afd3d344c48ae5dc7c3f067e37aa9e58f477203b9478b6d68cd1",
          "withoutMetadata": "704ba67dcd39afd3d344c48ae5dc7c3f067e37aa9e58f477203b9478b6d68cd1",
          "linkedWithoutMetadata": "704ba67dcd39afd3d344c48ae5dc7c3f067e37aa9e58f477203b9478b6d68cd1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "5bd742f5aab52b6e28bc191b5c7ee1e85dec57eeb2e7ff34afa968e48b7e0c94",
          "withoutMetadata": "5bd742f5aab52b6e28bc191b5c7ee1e85dec57eeb2e7ff34afa968e48b7e0c94",
          "linkedWithoutMetadata": "5bd742f5aab52b6e28bc191b5c7ee1e85dec57eeb2e7ff34afa968e48b7e0c94"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "58280cb0e7df660e7b555a62eefc8074761db58de9830e2e8ffdde12f8772b57",
          "withoutMetadata": "58280cb0e7df660e7b555a62eefc8074761db58de9830e2e8ffdde12f8772b57",
          "linkedWithoutMetadata": "58280cb0e7df660e7b555a62eefc8074761db58de9830e2e8ffdde12f8772b57"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "d8edee2b33cbb6317051611902ece31bc1b536086dce5d00dcd5678f3198cb9f",
          "withoutMetadata": "d8edee2b33cbb6317051611902ece31bc1b536086dce5d00dcd5678f3198cb9f",
          "linkedWithoutMetadata": "d8edee2b33cbb6317051611902ece31bc1b536086dce5d00dcd5678f3198cb9f"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "c8db1771a2f19c9dfa0e1e141f02fc4c0083d18491691d9fdbdcbdf7728acc5a",
          "withoutMetadata": "c8db1771a2f19c9dfa0e1e141f02fc4c0083d18491691d9fdbdcbdf7728acc5a",
          "linkedWithoutMetadata": "c8db1771a2f19c9dfa0e1e141f02fc4c0083d18491691d9fdbdcbdf7728acc5a"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "21a3bb8ac9bf32163e3c9239e17408e6a2f174081312f09996442af711c0cc27",
          "withoutMetadata": "21a3bb8ac9bf32163e3c9239e17408e6a2f174081312f09996442af711c0cc27",
          "linkedWithoutMetadata": "21a3bb8ac9bf32163e3c9239e17408e6a2f174081312f09996442af711c0cc27"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "279e441d1216567a25b909ba2126f8abbb2cc9eaa00d1cab979ff0cf9dd85025",
          "withoutMetadata": "279e441d1216567a25b909ba2126f8abbb2cc9eaa00d1cab979ff0cf9dd85025",
          "linkedWithoutMetadata": "279e441d1216567a25b909ba2126f8abbb2cc9eaa00d1cab979ff0cf9dd85025"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "e167a87b902a0117f7488bf439219071a6959886f6ddb75ecc4f507223cc2389",
          "withoutMetadata": "e167a87b902a0117f7488bf439219071a6959886f6ddb75ecc4f507223cc2389",
          "linkedWithoutMetadata": "e167a87b902a0117f7488bf439219071a6959886f6ddb75ecc4f507223cc2389"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Allo.sol:Allo": {
        "src": "contracts/core/Allo.sol:96",
        "version": {
          "withMetadata": "3886657e3b8feb71b93fdcb5b7abd71e93a54b2412fe9006f24948f403462015",
          "withoutMetadata": "3886657e3b8feb71b93fdcb5b7abd71e93a54b2412fe9006f24948f403462015",
          "linkedWithoutMetadata": "3886657e3b8feb71b93fdcb5b7abd71e93a54b2412fe9006f24948f403462015"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "solady/src/auth/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IAllo.sol:IAllo"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "getFeeDenominator()",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "isCloneableStrategy(address)",
          "getPool(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)20930_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "151",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "percentFee",
              "offset": 0,
              "slot": "201",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:123"
            },
            {
              "label": "baseFee",
              "offset": 0,
              "slot": "202",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:138"
            },
            {
              "label": "_poolIndex",
              "offset": 0,
              "slot": "203",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:141"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "204",
              "type": "t_address_payable",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:141"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(IRegistry)4399",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:142"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "206",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:143"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "207",
              "type": "t_mapping(t_uint256,t_struct(Pool)3918_storage)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:144"
            },
            {
              "label": "cloneableStrategies",
              "offset": 0,
              "slot": "208",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:146"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)4566": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)20930_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)3918_storage)": {
              "label": "mapping(uint256 => struct IAllo.Pool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Pool)3918_storage": {
              "label": "struct IAllo.Pool",
              "members": [
                {
                  "label": "profileId",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "strategy",
                  "type": "t_contract(IStrategy)4566",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "managerRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)20930_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Anchor.sol:Anchor": {
        "src": "contracts/core/Anchor.sol:92",
        "version": {
          "withMetadata": "488556a6edfa00f7728c1dfb0d25dd2c0bb9f5eac057181758b47099f724b0c3",
          "withoutMetadata": "488556a6edfa00f7728c1dfb0d25dd2c0bb9f5eac057181758b47099f724b0c3",
          "linkedWithoutMetadata": "488556a6edfa00f7728c1dfb0d25dd2c0bb9f5eac057181758b47099f724b0c3"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol:ERC1155Holder",
          "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver",
          "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol:ERC721Holder",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,address)",
          "execute(address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Anchor",
            "src": "contracts/core/Anchor.sol:92"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/core/Anchor.sol:92"
          },
          {
            "kind": "state-variable-immutable",
            "name": "profileId",
            "src": "contracts/core/Anchor.sol:92"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Registry.sol:Registry": {
        "src": "contracts/core/Registry.sol:102",
        "version": {
          "withMetadata": "a50d66ce9eddc620b9b7dde43e20c4d00fe262d2048627e8adcbef7f79ed2676",
          "withoutMetadata": "a50d66ce9eddc620b9b7dde43e20c4d00fe262d2048627e8adcbef7f79ed2676",
          "linkedWithoutMetadata": "a50d66ce9eddc620b9b7dde43e20c4d00fe262d2048627e8adcbef7f79ed2676"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "contracts/core/libraries/Native.sol:Native",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/interfaces/IRegistry.sol:IRegistry"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)20930_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "anchorToProfileId",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:108"
            },
            {
              "label": "profilesById",
              "offset": 0,
              "slot": "152",
              "type": "t_mapping(t_bytes32,t_struct(Profile)4226_storage)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:110"
            },
            {
              "label": "profileIdToPendingOwner",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:112"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Profile)4226_storage)": {
              "label": "mapping(bytes32 => struct IRegistry.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)20930_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Profile)4226_storage": {
              "label": "struct IRegistry.Profile",
              "members": [
                {
                  "label": "id",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "anchor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)20930_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IAllo.sol:IAllo": {
        "src": "contracts/core/interfaces/IAllo.sol:97",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "isCloneableStrategy(address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "getPool(uint256)",
          "getFeeDenominator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IRegistry.sol:IRegistry": {
        "src": "contracts/core/interfaces/IRegistry.sol:92",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/core/interfaces/IStrategy.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "isValidAllocator(address)",
          "isPoolActive()",
          "getPoolAmount()",
          "increasePoolAmount(uint256)",
          "getRecipientStatus(address)",
          "getPayouts(address[],bytes[])",
          "initialize(uint256,bytes)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Clone.sol:Clone": {
        "src": "contracts/core/libraries/Clone.sol:37",
        "version": {
          "withMetadata": "6caef65d1b22589607b8f4231de18af737eb32ef454f116ef9d7a694e8681ce0",
          "withoutMetadata": "6caef65d1b22589607b8f4231de18af737eb32ef454f116ef9d7a694e8681ce0",
          "linkedWithoutMetadata": "6caef65d1b22589607b8f4231de18af737eb32ef454f116ef9d7a694e8681ce0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Errors.sol:Errors": {
        "src": "contracts/core/libraries/Errors.sol:109",
        "version": {
          "withMetadata": "9a88a3ce339d3451ff04b29cfca8d4721f4e3400caa9747afca84b8f418194be",
          "withoutMetadata": "9a88a3ce339d3451ff04b29cfca8d4721f4e3400caa9747afca84b8f418194be",
          "linkedWithoutMetadata": "9a88a3ce339d3451ff04b29cfca8d4721f4e3400caa9747afca84b8f418194be"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Native.sol:Native": {
        "src": "contracts/core/libraries/Native.sol:26",
        "version": {
          "withMetadata": "6677a5b940694fb8a12b979003182e4241da2086503e2b6bf67c4209050260ec",
          "withoutMetadata": "6677a5b940694fb8a12b979003182e4241da2086503e2b6bf67c4209050260ec",
          "linkedWithoutMetadata": "6677a5b940694fb8a12b979003182e4241da2086503e2b6bf67c4209050260ec"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Transfer.sol:Transfer": {
        "src": "contracts/core/libraries/Transfer.sol:97",
        "version": {
          "withMetadata": "62c197d769879c01b785fb7ed65bfbd408b14e1c4fbd61ca7b35d04c5211a553",
          "withoutMetadata": "62c197d769879c01b785fb7ed65bfbd408b14e1c4fbd61ca7b35d04c5211a553",
          "linkedWithoutMetadata": "62c197d769879c01b785fb7ed65bfbd408b14e1c4fbd61ca7b35d04c5211a553"
        },
        "inherit": [
          "contracts/core/libraries/Native.sol:Native"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/factory/ContractFactory.sol:ContractFactory": {
        "src": "contracts/factory/ContractFactory.sol:107",
        "version": {
          "withMetadata": "70354703399ceb09dd08f9bf07c5b84c4eef5655ce984e322dbb0a553e1dda47",
          "withoutMetadata": "70354703399ceb09dd08f9bf07c5b84c4eef5655ce984e322dbb0a553e1dda47",
          "linkedWithoutMetadata": "70354703399ceb09dd08f9bf07c5b84c4eef5655ce984e322dbb0a553e1dda47"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "deploy(string,string,bytes)",
          "setDeployer(address,bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ContractFactory",
            "src": "contracts/factory/ContractFactory.sol:119"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "usedSalts",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            },
            {
              "label": "isDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/BaseStrategy.sol:BaseStrategy": {
        "src": "contracts/strategies/BaseStrategy.sol:111",
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "getPoolAmount()",
          "isPoolActive()",
          "getRecipientStatus(address)",
          "increasePoolAmount(uint256)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)",
          "getPayouts(address[],bytes[])",
          "isValidAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseStrategy",
            "src": "contracts/strategies/BaseStrategy.sol:129"
          },
          {
            "kind": "state-variable-immutable",
            "name": "allo",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          },
          {
            "kind": "state-variable-immutable",
            "name": "strategyId",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:DirectGrantsSimpleStrategy": {
        "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:110",
        "version": {
          "withMetadata": "b377576b5e688b0efec168f4cfcc5e86ca9a0838242caaae123a90a2c7f34cc3",
          "withoutMetadata": "b377576b5e688b0efec168f4cfcc5e86ca9a0838242caaae123a90a2c7f34cc3",
          "linkedWithoutMetadata": "b377576b5e688b0efec168f4cfcc5e86ca9a0838242caaae123a90a2c7f34cc3"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getMilestoneStatus(address,uint256)",
          "getMilestones(address)",
          "setMilestones(address,struct DirectGrantsSimpleStrategy.Milestone[])",
          "reviewSetMilestones(address,uint8)",
          "submitMilestone(address,uint256,(uint256,string))",
          "rejectMilestone(address,uint256)",
          "setRecipientStatusToInReview(address[])",
          "setPoolActive(bool)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DirectGrantsSimpleStrategy",
            "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:192"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:161"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:163"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:164"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(IRegistry)4399",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:167"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:168"
            },
            {
              "label": "_acceptedRecipientIds",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:172"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)5683_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:177"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Milestone)5692_storage)dyn_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:179"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:184"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)5692_storage)dyn_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(Milestone)5692_storage)dyn_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Milestone[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5683_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)5692_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)5683_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "milestonesReviewStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:DonationVotingCustomRegistryStrategy": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52",
        "version": {
          "withMetadata": "bd9193ecc53ff1f55256ebfed72bc0a36e006f7c361e0c51b079fa8e04ccecb7",
          "withoutMetadata": "bd9193ecc53ff1f55256ebfed72bc0a36e006f7c361e0c51b079fa8e04ccecb7",
          "linkedWithoutMetadata": "bd9193ecc53ff1f55256ebfed72bc0a36e006f7c361e0c51b079fa8e04ccecb7"
        },
        "inherit": [
          "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingCustomRegistryStrategy",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4399",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:162"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7297_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:165"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4417_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:167"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:172"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(SimpleProjectRegistry)7268",
              "contract": "DonationVotingCustomRegistryStrategy",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(SimpleProjectRegistry)7268": {
              "label": "contract SimpleProjectRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4417_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7297_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4417_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7297_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:SimpleProjectRegistry": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:26",
        "version": {
          "withMetadata": "3b5deb41451ee916cb490eba3badcab8dc9e1acdbf165c9cdeac6e298e6191f0",
          "withoutMetadata": "3b5deb41451ee916cb490eba3badcab8dc9e1acdbf165c9cdeac6e298e6191f0",
          "linkedWithoutMetadata": "3b5deb41451ee916cb490eba3badcab8dc9e1acdbf165c9cdeac6e298e6191f0"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addProject(address)",
          "addProjects(address[])",
          "removeProject(address)",
          "removeProjects(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleProjectRegistry",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "projects",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleProjectRegistry",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy": {
        "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:100",
        "version": {
          "withMetadata": "12dc6813a9163b245c66328849366698543501ddee2ac83d3edc7292658f500d",
          "withoutMetadata": "12dc6813a9163b245c66328849366698543501ddee2ac83d3edc7292658f500d",
          "linkedWithoutMetadata": "12dc6813a9163b245c66328849366698543501ddee2ac83d3edc7292658f500d"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "setPayout(address[],uint256[])",
          "claim(struct DonationVotingStrategy.Claim[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingStrategy",
            "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:198"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4399",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:162"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7297_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:165"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4417_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:167"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:172"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4417_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7297_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4417_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7297_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:ProportionalPayoutStrategy": {
        "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:113",
        "version": {
          "withMetadata": "82f6cb0d5a178a31115c902a22cc7e3f28622bddf55197dfda11d318fb8d03e4",
          "withoutMetadata": "82f6cb0d5a178a31115c902a22cc7e3f28622bddf55197dfda11d318fb8d03e4",
          "linkedWithoutMetadata": "82f6cb0d5a178a31115c902a22cc7e3f28622bddf55197dfda11d318fb8d03e4"
        },
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "setAllocationTime(uint64,uint64)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProportionalPayoutStrategy",
            "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:163"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Recipient)8709_storage)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:151"
            },
            {
              "label": "hasAllocated",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:153"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ERC721)35610",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "maxRecipientsAllowed",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:155"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:157"
            },
            {
              "label": "totalAllocations",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:159"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:161"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)35610": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)8709_storage)": {
              "label": "mapping(address => struct ProportionalPayoutStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)8709_storage": {
              "label": "struct ProportionalPayoutStrategy.Recipient",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:QVGovernanceERC20Votes": {
        "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:89",
        "version": {
          "withMetadata": "55ed75c7dca07663e1db7d33b374c4df827854ab9efe8e6052527add12bb2541",
          "withoutMetadata": "55ed75c7dca07663e1db7d33b374c4df827854ab9efe8e6052527add12bb2541",
          "linkedWithoutMetadata": "55ed75c7dca07663e1db7d33b374c4df827854ab9efe8e6052527add12bb2541"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVGovernanceERC20Votes",
            "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:102"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4399",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17740_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17751_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:238"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:241"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:243"
            },
            {
              "label": "govToken",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IVotes)23421",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:96"
            },
            {
              "label": "timestamp",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:98"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IVotes)23421": {
              "label": "contract IVotes",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(Status)4412)": {
              "label": "mapping(address => enum IStrategy.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))": {
              "label": "mapping(address => mapping(address => enum IStrategy.Status))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17751_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17740_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4412,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17751_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17740_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:HackathonQVStrategy": {
        "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:110",
        "version": {
          "withMetadata": "5c3561d93edd81a5340cb379a2b0fa8b48eb68f768b14053ed09def7d44ddcbc",
          "withoutMetadata": "5c3561d93edd81a5340cb379a2b0fa8b48eb68f768b14053ed09def7d44ddcbc",
          "linkedWithoutMetadata": "5c3561d93edd81a5340cb379a2b0fa8b48eb68f768b14053ed09def7d44ddcbc"
        },
        "inherit": [
          "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver",
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllowedRecipientIds(address[],uint64,bytes)",
          "setPayoutPercentages(uint256[])",
          "getPayouts(address[],bytes[])",
          "getAttestation(bytes32)",
          "getSchema(bytes32)",
          "isPayable()",
          "isAttestationExpired(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HackathonQVStrategy",
            "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:148"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4399",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17740_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17751_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:238"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:241"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:243"
            },
            {
              "label": "_eas",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IEAS)20794",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:29"
            },
            {
              "label": "payoutPercentages",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:130"
            },
            {
              "label": "votesByRank",
              "offset": 0,
              "slot": "14",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:131"
            },
            {
              "label": "easInfo",
              "offset": 0,
              "slot": "15",
              "type": "t_struct(EASInfo)9613_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "20",
              "type": "t_contract(ERC721)35610",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:133"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:133"
            },
            {
              "label": "recipientIdToUID",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:135"
            },
            {
              "label": "recipientIdToIndex",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:136"
            },
            {
              "label": "indexToRecipientId",
              "offset": 0,
              "slot": "25",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:143"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ERC721)35610": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IEAS)20794": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(ISchemaRegistry)20839": {
              "label": "contract ISchemaRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(Status)4412)": {
              "label": "mapping(address => enum IStrategy.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))": {
              "label": "mapping(address => mapping(address => enum IStrategy.Status))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17751_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17740_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4412,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17751_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(EASInfo)9613_storage": {
              "label": "struct HackathonQVStrategy.EASInfo",
              "members": [
                {
                  "label": "eas",
                  "type": "t_contract(IEAS)20794",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "schemaRegistry",
                  "type": "t_contract(ISchemaRegistry)20839",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "schemaUID",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "schema",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "revocable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17740_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver": {
        "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:20",
        "inherit": [
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver"
        ],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_eas",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IEAS)20794",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:29"
            }
          ],
          "types": {
            "t_contract(IEAS)20794": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:QVImpactStreamStrategy": {
        "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:89",
        "version": {
          "withMetadata": "6d96443df7ff7fcf8d40e918be1f40e5a36850dcc91bf887988c2f15ce478b0c",
          "withoutMetadata": "6d96443df7ff7fcf8d40e918be1f40e5a36850dcc91bf887988c2f15ce478b0c",
          "linkedWithoutMetadata": "6d96443df7ff7fcf8d40e918be1f40e5a36850dcc91bf887988c2f15ce478b0c"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "updatePoolTimestamps(uint64,uint64)",
          "batchAddAllocator(address[])",
          "addAllocator(address)",
          "batchRemoveAllocator(address[])",
          "removeAllocator(address)",
          "setPayouts(struct QVImpactStreamStrategy.Payout[])",
          "getRecipient(address)",
          "getVoiceCreditsCastByAllocator(address)",
          "getVoiceCreditsCastByAllocatorToRecipient(address,address)",
          "getVotesCastByAllocatorToRecipient(address,address)",
          "recoverFunds(address,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVImpactStreamStrategy",
            "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:218"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "3",
              "type": "t_uint64",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:157"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "3",
              "type": "t_uint64",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:158"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IRegistry)4399",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:161"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:163"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:165"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)11045_storage)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:168"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)11056_storage)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:173"
            },
            {
              "label": "payouts",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:178"
            },
            {
              "label": "payoutSet",
              "offset": 0,
              "slot": "10",
              "type": "t_bool",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:179"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)11056_storage)": {
              "label": "mapping(address => struct QVImpactStreamStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)11045_storage)": {
              "label": "mapping(address => struct QVImpactStreamStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)11056_storage": {
              "label": "struct QVImpactStreamStrategy.Allocator",
              "members": [
                {
                  "label": "usedVoiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)11045_storage": {
              "label": "struct QVImpactStreamStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "requestedAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:QVNftTieredStrategy": {
        "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:94",
        "version": {
          "withMetadata": "49a9c340d7e6254579c822c671b46432fb86b3c049d0043562ad46b14bfa73ad",
          "withoutMetadata": "49a9c340d7e6254579c822c671b46432fb86b3c049d0043562ad46b14bfa73ad",
          "linkedWithoutMetadata": "49a9c340d7e6254579c822c671b46432fb86b3c049d0043562ad46b14bfa73ad"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVNftTieredStrategy",
            "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4399",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17740_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17751_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:238"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:241"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:243"
            },
            {
              "label": "nfts",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_contract(ERC721)35610)dyn_storage",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:111"
            },
            {
              "label": "maxVoiceCreditsPerNft",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_contract(ERC721)35610,t_uint256)",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:113"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_contract(ERC721)35610,t_mapping(t_uint256,t_uint256))",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:115"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(ERC721)35610)dyn_storage": {
              "label": "contract ERC721[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)35610": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(Status)4412)": {
              "label": "mapping(address => enum IStrategy.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))": {
              "label": "mapping(address => mapping(address => enum IStrategy.Status))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17751_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17740_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)35610,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(contract ERC721 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)35610,t_uint256)": {
              "label": "mapping(contract ERC721 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4412,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17751_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17740_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:LockupDynamicStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:16",
        "version": {
          "withMetadata": "32213cfd8847163eb519b6f2e753bc8b1d24406ffd0e5b1e89ecbf545de1371e",
          "withoutMetadata": "32213cfd8847163eb519b6f2e753bc8b1d24406ffd0e5b1e89ecbf545de1371e",
          "linkedWithoutMetadata": "32213cfd8847163eb519b6f2e753bc8b1d24406ffd0e5b1e89ecbf545de1371e"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientSegments(address,struct LockupDynamic.SegmentWithDelta[])",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupDynamicStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:42"
            },
            {
              "label": "lockupDynamic",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupDynamic)34021",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)34141_storage",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)12561_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(SegmentWithDelta)34225_storage)dyn_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupDynamic)34021": {
              "label": "contract ISablierV2LockupDynamic",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12561_storage)": {
              "label": "mapping(address => struct LockupDynamicStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)34141_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)33382",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12561_storage": {
              "label": "struct LockupDynamicStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "segments",
                  "type": "t_array(t_struct(SegmentWithDelta)34225_storage)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(SegmentWithDelta)34225_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exponent",
                  "type": "t_userDefinedValueType(UD2x18)31578",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "delta",
                  "type": "t_uint40",
                  "offset": 24,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD2x18)31578": {
              "label": "UD2x18",
              "numberOfBytes": "8",
              "underlying": "t_uint64"
            },
            "t_userDefinedValueType(UD60x18)33382": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:LockupLinearStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:16",
        "version": {
          "withMetadata": "d706533cb7ba828b323e7d4ace0046fc6b7156a04406a1c5fbc35a453a73eea7",
          "withoutMetadata": "d706533cb7ba828b323e7d4ace0046fc6b7156a04406a1c5fbc35a453a73eea7",
          "linkedWithoutMetadata": "d706533cb7ba828b323e7d4ace0046fc6b7156a04406a1c5fbc35a453a73eea7"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientDurations(address,(uint40,uint40))",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupLinearStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:42"
            },
            {
              "label": "lockupLinear",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupLinear)34110",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)34141_storage",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)13743_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupLinear)34110": {
              "label": "contract ISablierV2LockupLinear",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)13743_storage)": {
              "label": "mapping(address => struct LockupLinearStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)34141_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)33382",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Durations)34293_storage": {
              "label": "struct LockupLinear.Durations",
              "members": [
                {
                  "label": "cliff",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "total",
                  "type": "t_uint40",
                  "offset": 5,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)13743_storage": {
              "label": "struct LockupLinearStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durations",
                  "type": "t_struct(Durations)34293_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD60x18)33382": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:NFT": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:8",
        "version": {
          "withMetadata": "fceec0c5cb0a58bc508b350635d942bbfd84be4ab93fb977c22a692c59aafd37",
          "withoutMetadata": "fceec0c5cb0a58bc508b350635d942bbfd84be4ab93fb977c22a692c59aafd37",
          "linkedWithoutMetadata": "fceec0c5cb0a58bc508b350635d942bbfd84be4ab93fb977c22a692c59aafd37"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable",
          "solady/src/tokens/ERC721.sol:ERC721"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)",
          "name()",
          "symbol()",
          "mintTo(address)",
          "tokenURI(uint256)",
          "withdrawPayments(address payable)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFT",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTokenId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:16"
            },
            {
              "label": "MINT_PRICE",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:17"
            },
            {
              "label": "__name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:20"
            },
            {
              "label": "__symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:NFTFactory": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:6",
        "version": {
          "withMetadata": "d119a63ee0a2f3503fbd23545aebf14815250ddec434d3fca40a624c8ddfb612",
          "withoutMetadata": "d119a63ee0a2f3503fbd23545aebf14815250ddec434d3fca40a624c8ddfb612",
          "linkedWithoutMetadata": "d119a63ee0a2f3503fbd23545aebf14815250ddec434d3fca40a624c8ddfb612"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createNFTContract(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isNFTContract",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NFTFactory",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:WrappedVotingNftMintStrategy": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:101",
        "version": {
          "withMetadata": "6f67b5ed1d995363e3d3827f2a971c63cb5d2926da566a2f8e7acf977937a543",
          "withoutMetadata": "6f67b5ed1d995363e3d3827f2a971c63cb5d2926da566a2f8e7acf977937a543",
          "linkedWithoutMetadata": "6f67b5ed1d995363e3d3827f2a971c63cb5d2926da566a2f8e7acf977937a543"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllocationTimes(uint64,uint64)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrappedVotingNftMintStrategy",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:147"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "nftFactory",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(NFTFactory)14970",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationStartTime",
              "offset": 20,
              "slot": "4",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "currentWinner",
              "offset": 8,
              "slot": "5",
              "type": "t_address",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:137"
            },
            {
              "label": "allocations",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:138"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(NFTFactory)14970": {
              "label": "contract NFTFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:99",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(struct DonationVotingMerkleDistributionBaseStrategy.ApplicationStatus[],uint256)",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(address)",
          "updateDistribution(bytes32,(uint256,string))",
          "isDistributionSet()",
          "hasBeenDistributed(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionBaseStrategy",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:293"
          },
          {
            "kind": "state-variable-assignment",
            "name": "recipientsCounter",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
          },
          {
            "kind": "state-variable-immutable",
            "name": "PERMIT2",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:230"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4692_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:208"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4399",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:235"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:257"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:259"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:265"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)15551_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:267"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)15551_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)15551_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:DonationVotingMerkleDistributionDirectTransferStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:82",
        "version": {
          "withMetadata": "677a54f5daf85a12bfffe64897a109933caa11620ba9c18b36336759668cc8a8",
          "withoutMetadata": "677a54f5daf85a12bfffe64897a109933caa11620ba9c18b36336759668cc8a8",
          "linkedWithoutMetadata": "677a54f5daf85a12bfffe64897a109933caa11620ba9c18b36336759668cc8a8"
        },
        "inherit": [
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionDirectTransferStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4692_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:208"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4399",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:235"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:257"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:259"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:265"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)15551_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:267"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)15551_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)15551_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:DonationVotingMerkleDistributionVaultStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:94",
        "version": {
          "withMetadata": "7d0bf2f5549b68c121f67baa12b4bfeb6dc55749b1094179986bc5fd345be096",
          "withoutMetadata": "7d0bf2f5549b68c121f67baa12b4bfeb6dc55749b1094179986bc5fd345be096",
          "linkedWithoutMetadata": "7d0bf2f5549b68c121f67baa12b4bfeb6dc55749b1094179986bc5fd345be096"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)",
          "claim(struct DonationVotingMerkleDistributionVaultStrategy.Claim[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionVaultStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:128"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4692_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:208"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4399",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:235"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:257"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:259"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:265"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)15551_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:267"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "16",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "16",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "18",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "67",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:117"
            },
            {
              "label": "totalClaimableAmount",
              "offset": 0,
              "slot": "68",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:120"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)15551_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)15551_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy": {
        "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:89",
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVBaseStrategy",
            "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:271"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4399",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17740_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17751_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:238"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:241"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:243"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(Status)4412)": {
              "label": "mapping(address => enum IStrategy.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))": {
              "label": "mapping(address => mapping(address => enum IStrategy.Status))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17751_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17740_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4412,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17751_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17740_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-simple/QVSimpleStrategy.sol:QVSimpleStrategy": {
        "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:90",
        "version": {
          "withMetadata": "f36afad3c7a494a21bf8e6b243cc5b4591a5cf4e0b78fecf3df73355e0424598",
          "withoutMetadata": "f36afad3c7a494a21bf8e6b243cc5b4591a5cf4e0b78fecf3df73355e0424598",
          "linkedWithoutMetadata": "f36afad3c7a494a21bf8e6b243cc5b4591a5cf4e0b78fecf3df73355e0424598"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "addAllocator(address)",
          "removeAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVSimpleStrategy",
            "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4399",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17740_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17751_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:238"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:241"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:243"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:108"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:111"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(Status)4412)": {
              "label": "mapping(address => enum IStrategy.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))": {
              "label": "mapping(address => mapping(address => enum IStrategy.Status))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17751_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17740_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4412,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17751_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17740_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:RFPCommitteeStrategy": {
        "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:84",
        "version": {
          "withMetadata": "f257eb2c7eb428f3b034c2d7c555b98598867f682e7cdde755e01e16ce569f3c",
          "withoutMetadata": "f257eb2c7eb428f3b034c2d7c555b98598867f682e7cdde755e01e16ce569f3c",
          "linkedWithoutMetadata": "f257eb2c7eb428f3b034c2d7c555b98598867f682e7cdde755e01e16ce569f3c"
        },
        "inherit": [
          "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPCommitteeStrategy",
            "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:124"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:174"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:175"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:180"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4399",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:183"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:186"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:190"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)19391_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:192"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)19382_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:193"
            },
            {
              "label": "voteThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:104"
            },
            {
              "label": "votedFor",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:109"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:112"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)19391_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)19382_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)19391_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)19382_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy": {
        "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:106",
        "version": {
          "withMetadata": "597d24c5f351c32a50a1bb14684044c2db5951d75e85221c2cbb67b2fba16744",
          "withoutMetadata": "597d24c5f351c32a50a1bb14684044c2db5951d75e85221c2cbb67b2fba16744",
          "linkedWithoutMetadata": "597d24c5f351c32a50a1bb14684044c2db5951d75e85221c2cbb67b2fba16744"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getPayouts(address[],bytes[])",
          "getMilestone(uint256)",
          "getMilestoneStatus(uint256)",
          "setPoolActive(bool)",
          "setMilestones(struct RFPSimpleStrategy.Milestone[])",
          "submitUpcomingMilestone((uint256,string))",
          "increaseMaxBid(uint256)",
          "rejectMilestone(uint256)",
          "withdraw(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPSimpleStrategy",
            "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:201"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:174"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:175"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:180"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4399",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:183"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:186"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:190"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)19391_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:192"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)19382_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:193"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)19391_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Recipient)19382_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)19391_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)19382_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/IEAS.sol:IEAS": {
        "src": "lib/eas-contracts/contracts/IEAS.sol:82",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSchemaRegistry()",
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))",
          "multiAttest(struct MultiAttestationRequest[])",
          "multiAttestByDelegation(struct MultiDelegatedAttestationRequest[])",
          "revoke((bytes32,(bytes32,uint256)))",
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))",
          "multiRevoke(struct MultiRevocationRequest[])",
          "multiRevokeByDelegation(struct MultiDelegatedRevocationRequest[])",
          "timestamp(bytes32)",
          "multiTimestamp(bytes32[])",
          "revokeOffchain(bytes32)",
          "multiRevokeOffchain(bytes32[])",
          "getAttestation(bytes32)",
          "isAttestationValid(bytes32)",
          "getTimestamp(bytes32)",
          "getRevokeOffchain(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol:ISchemaRegistry": {
        "src": "lib/eas-contracts/contracts/ISchemaRegistry.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "register(string,address,bool)",
          "getSchema(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver": {
        "src": "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:51",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)20930_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:260"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)20930_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)20930_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:19",
        "version": {
          "withMetadata": "99d23825103c23d57f0f24c3e085f6e298fc022524aba65bb4b5ea2f82b1e2fa",
          "withoutMetadata": "99d23825103c23d57f0f24c3e085f6e298fc022524aba65bb4b5ea2f82b1e2fa",
          "linkedWithoutMetadata": "99d23825103c23d57f0f24c3e085f6e298fc022524aba65bb4b5ea2f82b1e2fa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "7debb638e2911ef52920d8552cee26a1c07c7db669a57a7dfafb174c1adc40e2",
          "withoutMetadata": "7debb638e2911ef52920d8552cee26a1c07c7db669a57a7dfafb174c1adc40e2",
          "linkedWithoutMetadata": "7debb638e2911ef52920d8552cee26a1c07c7db669a57a7dfafb174c1adc40e2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol:12",
        "version": {
          "withMetadata": "75b00ceeab833e06ef7c217552f3ba57b35a910584f627b8ae340621acb5cc67",
          "withoutMetadata": "75b00ceeab833e06ef7c217552f3ba57b35a910584f627b8ae340621acb5cc67",
          "linkedWithoutMetadata": "75b00ceeab833e06ef7c217552f3ba57b35a910584f627b8ae340621acb5cc67"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "1282de31a4b07caddc131eb325ba289213291b29ab16bfc69e0978833c6b9366",
          "withoutMetadata": "1282de31a4b07caddc131eb325ba289213291b29ab16bfc69e0978833c6b9366",
          "linkedWithoutMetadata": "1282de31a4b07caddc131eb325ba289213291b29ab16bfc69e0978833c6b9366"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SignedMathUpgradeable.sol:9",
        "version": {
          "withMetadata": "3e9140f44aae28908a42620ffae9cb48b2a2de31461d03da7c26c24385ea6491",
          "withoutMetadata": "3e9140f44aae28908a42620ffae9cb48b2a2de31461d03da7c26c24385ea6491",
          "linkedWithoutMetadata": "3e9140f44aae28908a42620ffae9cb48b2a2de31461d03da7c26c24385ea6491"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol:ERC1155Holder": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol:16",
        "version": {
          "withMetadata": "3cf620036676350dfded82ce1db24b3c6a87938f869b4793e67b8778c22d08f2",
          "withoutMetadata": "3cf620036676350dfded82ce1db24b3c6a87938f869b4793e67b8778c22d08f2",
          "linkedWithoutMetadata": "3cf620036676350dfded82ce1db24b3c6a87938f869b4793e67b8778c22d08f2"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver",
          "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "739832ece5fa2629d67134a50fa65f6fb7ff5540da12590a214dba6eb65ef714",
          "withoutMetadata": "739832ece5fa2629d67134a50fa65f6fb7ff5540da12590a214dba6eb65ef714",
          "linkedWithoutMetadata": "739832ece5fa2629d67134a50fa65f6fb7ff5540da12590a214dba6eb65ef714"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol:ERC721Holder": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "0db774eb01ed55a08367ec34a0c398f035e24a3e6a0d33e0e23d2d0118c404e8",
          "withoutMetadata": "0db774eb01ed55a08367ec34a0c398f035e24a3e6a0d33e0e23d2d0118c404e8",
          "linkedWithoutMetadata": "0db774eb01ed55a08367ec34a0c398f035e24a3e6a0d33e0e23d2d0118c404e8"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "a91155acd392cb4e12276386b3e0b841bb40085f077e9732844290fcb241c52d",
          "withoutMetadata": "a91155acd392cb4e12276386b3e0b841bb40085f077e9732844290fcb241c52d",
          "linkedWithoutMetadata": "a91155acd392cb4e12276386b3e0b841bb40085f077e9732844290fcb241c52d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "d70ea25cc400394fc1af945e801eb33b016ba229d7a0e20cc454ecc3e152e295",
          "withoutMetadata": "d70ea25cc400394fc1af945e801eb33b016ba229d7a0e20cc454ecc3e152e295",
          "linkedWithoutMetadata": "d70ea25cc400394fc1af945e801eb33b016ba229d7a0e20cc454ecc3e152e295"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "e61eadf69c95e7470d13fa62e7564dc8c52317c7199e1b9590c7423b16d2cced",
          "withoutMetadata": "e61eadf69c95e7470d13fa62e7564dc8c52317c7199e1b9590c7423b16d2cced",
          "linkedWithoutMetadata": "e61eadf69c95e7470d13fa62e7564dc8c52317c7199e1b9590c7423b16d2cced"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "bdeeef480bf263bcc7b51d1b123cdb213c1aa77863da9950af2ec6c5e764da33",
          "withoutMetadata": "bdeeef480bf263bcc7b51d1b123cdb213c1aa77863da9950af2ec6c5e764da33",
          "linkedWithoutMetadata": "bdeeef480bf263bcc7b51d1b123cdb213c1aa77863da9950af2ec6c5e764da33"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "79351df50bc89ac9e56f9e2dff51f8673080089b0deade85d266c30ec9337268",
          "withoutMetadata": "79351df50bc89ac9e56f9e2dff51f8673080089b0deade85d266c30ec9337268",
          "linkedWithoutMetadata": "79351df50bc89ac9e56f9e2dff51f8673080089b0deade85d266c30ec9337268"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/IEIP712.sol:IEIP712": {
        "src": "lib/permit2/src/interfaces/IEIP712.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/ISignatureTransfer.sol:ISignatureTransfer": {
        "src": "lib/permit2/src/interfaces/ISignatureTransfer.sol:9",
        "inherit": [
          "lib/permit2/src/interfaces/IEIP712.sol:IEIP712"
        ],
        "libraries": [],
        "methods": [
          "nonceBitmap(address,uint256)",
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)",
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)",
          "permitTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes)",
          "permitWitnessTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes32,string,bytes)",
          "invalidateUnorderedNonces(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable": {
        "src": "lib/v2-core/src/interfaces/IAdminable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "transferAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Base.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "comptroller()",
          "protocolRevenues(address)",
          "claimProtocolRevenues(address)",
          "setComptroller(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:ISablierV2Comptroller": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "flashFee()",
          "isFlashAsset(address)",
          "protocolFees(address)",
          "setFlashFee(uint256)",
          "setProtocolFee(address,uint256)",
          "toggleFlashAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:13",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getAsset(uint256)",
          "getDepositedAmount(uint256)",
          "getEndTime(uint256)",
          "getRecipient(uint256)",
          "getRefundedAmount(uint256)",
          "getSender(uint256)",
          "getStartTime(uint256)",
          "getWithdrawnAmount(uint256)",
          "isCancelable(uint256)",
          "isCold(uint256)",
          "isDepleted(uint256)",
          "isStream(uint256)",
          "isWarm(uint256)",
          "nextStreamId()",
          "refundableAmountOf(uint256)",
          "statusOf(uint256)",
          "streamedAmountOf(uint256)",
          "wasCanceled(uint256)",
          "withdrawableAmountOf(uint256)",
          "burn(uint256)",
          "cancel(uint256)",
          "cancelMultiple(uint256[])",
          "renounce(uint256)",
          "setNFTDescriptor(address)",
          "withdraw(uint256,address,uint128)",
          "withdrawMax(uint256,address)",
          "withdrawMaxAndTransfer(uint256,address)",
          "withdrawMultiple(uint256[],address,uint128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:ISablierV2LockupDynamic": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_SEGMENT_COUNT()",
          "getRange(uint256)",
          "getSegments(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDeltas((address,bool,address,uint128,address,(address,uint256),struct LockupDynamic.SegmentWithDelta[]))",
          "createWithMilestones((address,uint40,bool,address,uint128,address,(address,uint256),struct LockupDynamic.Segment[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:ISablierV2LockupLinear": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getCliffTime(uint256)",
          "getRange(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))",
          "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:ISablierV2NFTDescriptor": {
        "src": "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:Lockup": {
        "src": "lib/v2-core/src/types/DataTypes.sol:29",
        "version": {
          "withMetadata": "367641dfc13f286f9860078fd08cec177ef11a69e6cb7b3634a5288c984abc51",
          "withoutMetadata": "367641dfc13f286f9860078fd08cec177ef11a69e6cb7b3634a5288c984abc51",
          "linkedWithoutMetadata": "367641dfc13f286f9860078fd08cec177ef11a69e6cb7b3634a5288c984abc51"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupDynamic": {
        "src": "lib/v2-core/src/types/DataTypes.sol:72",
        "version": {
          "withMetadata": "433f5598d55078a7b34b35b9f2754627eaf3077d376720215611e21c36053c6b",
          "withoutMetadata": "433f5598d55078a7b34b35b9f2754627eaf3077d376720215611e21c36053c6b",
          "linkedWithoutMetadata": "433f5598d55078a7b34b35b9f2754627eaf3077d376720215611e21c36053c6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupLinear": {
        "src": "lib/v2-core/src/types/DataTypes.sol:180",
        "version": {
          "withMetadata": "7161ec52bc32c8085a8dbcf260f37425c696ece3ece5ed6ab1c357b24c2a0277",
          "withoutMetadata": "7161ec52bc32c8085a8dbcf260f37425c696ece3ece5ed6ab1c357b24c2a0277",
          "linkedWithoutMetadata": "7161ec52bc32c8085a8dbcf260f37425c696ece3ece5ed6ab1c357b24c2a0277"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/auth/Ownable.sol:Ownable": {
        "src": "solady/src/auth/Ownable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "renounceOwnership()",
          "requestOwnershipHandover()",
          "cancelOwnershipHandover()",
          "completeOwnershipHandover(address)",
          "owner()",
          "ownershipHandoverExpiresAt(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC20.sol:ERC20": {
        "src": "solady/src/tokens/ERC20.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC721.sol:ERC721": {
        "src": "solady/src/tokens/ERC721.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "balanceOf(address)",
          "getApproved(uint256)",
          "approve(address,uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/CREATE3.sol:CREATE3": {
        "src": "solady/src/utils/CREATE3.sol:8",
        "version": {
          "withMetadata": "6b5ebce42e52634f580f0c45f8d9dd45745f5e3579f9a2ac976a067f5d6cc620",
          "withoutMetadata": "6b5ebce42e52634f580f0c45f8d9dd45745f5e3579f9a2ac976a067f5d6cc620",
          "linkedWithoutMetadata": "6b5ebce42e52634f580f0c45f8d9dd45745f5e3579f9a2ac976a067f5d6cc620"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/SafeTransferLib.sol:SafeTransferLib": {
        "src": "solady/src/utils/SafeTransferLib.sol:12",
        "version": {
          "withMetadata": "9c3d46874b9ad60cd4158ce77b62f97377de16accc25971906e5aee3e8afad53",
          "withoutMetadata": "9c3d46874b9ad60cd4158ce77b62f97377de16accc25971906e5aee3e8afad53",
          "linkedWithoutMetadata": "9c3d46874b9ad60cd4158ce77b62f97377de16accc25971906e5aee3e8afad53"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "b6aa1af7c29436953f4c8bbd3b2e046faa61e0d6761ce03c4f7caa9eb7d60024",
          "withoutMetadata": "b6aa1af7c29436953f4c8bbd3b2e046faa61e0d6761ce03c4f7caa9eb7d60024",
          "linkedWithoutMetadata": "b6aa1af7c29436953f4c8bbd3b2e046faa61e0d6761ce03c4f7caa9eb7d60024"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "67b401d833081658df3971ab2b54653c3a76ea8596b490fcf5294a1c7c6172c3",
          "withoutMetadata": "67b401d833081658df3971ab2b54653c3a76ea8596b490fcf5294a1c7c6172c3",
          "linkedWithoutMetadata": "67b401d833081658df3971ab2b54653c3a76ea8596b490fcf5294a1c7c6172c3"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "b31bb17a46f24712c1306a771ccb01da81bd13018a3a56e101593de65c75812b",
          "withoutMetadata": "b31bb17a46f24712c1306a771ccb01da81bd13018a3a56e101593de65c75812b",
          "linkedWithoutMetadata": "b31bb17a46f24712c1306a771ccb01da81bd13018a3a56e101593de65c75812b"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "caa6bc34dec90c9d77de302d1ea06d4c0be8788caff98591c325d584b8c72cd9",
          "withoutMetadata": "caa6bc34dec90c9d77de302d1ea06d4c0be8788caff98591c325d584b8c72cd9",
          "linkedWithoutMetadata": "caa6bc34dec90c9d77de302d1ea06d4c0be8788caff98591c325d584b8c72cd9"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "bd013cf13aaf87340a8edaf13d82f20327d765e457634601a27f3fdec772ab17",
          "withoutMetadata": "bd013cf13aaf87340a8edaf13d82f20327d765e457634601a27f3fdec772ab17",
          "linkedWithoutMetadata": "bd013cf13aaf87340a8edaf13d82f20327d765e457634601a27f3fdec772ab17"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "f041c01f12f5428125035764ce4caaa40c171798894bb2c25a0695d4ef5cc7be",
          "withoutMetadata": "f041c01f12f5428125035764ce4caaa40c171798894bb2c25a0695d4ef5cc7be",
          "linkedWithoutMetadata": "f041c01f12f5428125035764ce4caaa40c171798894bb2c25a0695d4ef5cc7be"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "72fda0ed44992f4cd4ad6cd7a26778e86767e516a72d58fc1929428a2aac73e3",
          "withoutMetadata": "72fda0ed44992f4cd4ad6cd7a26778e86767e516a72d58fc1929428a2aac73e3",
          "linkedWithoutMetadata": "72fda0ed44992f4cd4ad6cd7a26778e86767e516a72d58fc1929428a2aac73e3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Allo.sol:Allo": {
        "src": "contracts/core/Allo.sol:96",
        "version": {
          "withMetadata": "ef56c585afa0fbbbb8c3631ad9055b409399732adcb2c5f75cb74a2d174fc36d",
          "withoutMetadata": "ef56c585afa0fbbbb8c3631ad9055b409399732adcb2c5f75cb74a2d174fc36d",
          "linkedWithoutMetadata": "ef56c585afa0fbbbb8c3631ad9055b409399732adcb2c5f75cb74a2d174fc36d"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "solady/src/auth/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IAllo.sol:IAllo"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "getFeeDenominator()",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "isCloneableStrategy(address)",
          "getPool(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)20930_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "151",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "percentFee",
              "offset": 0,
              "slot": "201",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:123"
            },
            {
              "label": "baseFee",
              "offset": 0,
              "slot": "202",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:138"
            },
            {
              "label": "_poolIndex",
              "offset": 0,
              "slot": "203",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:141"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "204",
              "type": "t_address_payable",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:141"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(IRegistry)4399",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:142"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "206",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:143"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "207",
              "type": "t_mapping(t_uint256,t_struct(Pool)3918_storage)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:144"
            },
            {
              "label": "cloneableStrategies",
              "offset": 0,
              "slot": "208",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:146"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)4566": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)20930_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)3918_storage)": {
              "label": "mapping(uint256 => struct IAllo.Pool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Pool)3918_storage": {
              "label": "struct IAllo.Pool",
              "members": [
                {
                  "label": "profileId",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "strategy",
                  "type": "t_contract(IStrategy)4566",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "managerRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)20930_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Anchor.sol:Anchor": {
        "src": "contracts/core/Anchor.sol:92",
        "version": {
          "withMetadata": "d873437a1714f7c6b7503d9fc979e2b7c7db75d5ebf918246db507e81d1303bf",
          "withoutMetadata": "d873437a1714f7c6b7503d9fc979e2b7c7db75d5ebf918246db507e81d1303bf",
          "linkedWithoutMetadata": "d873437a1714f7c6b7503d9fc979e2b7c7db75d5ebf918246db507e81d1303bf"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol:ERC1155Holder",
          "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver",
          "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol:ERC721Holder",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,address)",
          "execute(address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Anchor",
            "src": "contracts/core/Anchor.sol:92"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/core/Anchor.sol:92"
          },
          {
            "kind": "state-variable-immutable",
            "name": "profileId",
            "src": "contracts/core/Anchor.sol:92"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Registry.sol:Registry": {
        "src": "contracts/core/Registry.sol:102",
        "version": {
          "withMetadata": "81d6652857a3046a51a8d060c855fb49f6e3214cb0398f2cec435ff0965c2887",
          "withoutMetadata": "81d6652857a3046a51a8d060c855fb49f6e3214cb0398f2cec435ff0965c2887",
          "linkedWithoutMetadata": "81d6652857a3046a51a8d060c855fb49f6e3214cb0398f2cec435ff0965c2887"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "contracts/core/libraries/Native.sol:Native",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/interfaces/IRegistry.sol:IRegistry"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)20930_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "anchorToProfileId",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:108"
            },
            {
              "label": "profilesById",
              "offset": 0,
              "slot": "152",
              "type": "t_mapping(t_bytes32,t_struct(Profile)4226_storage)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:110"
            },
            {
              "label": "profileIdToPendingOwner",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:112"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Profile)4226_storage)": {
              "label": "mapping(bytes32 => struct IRegistry.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)20930_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Profile)4226_storage": {
              "label": "struct IRegistry.Profile",
              "members": [
                {
                  "label": "id",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "anchor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)20930_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IAllo.sol:IAllo": {
        "src": "contracts/core/interfaces/IAllo.sol:97",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "isCloneableStrategy(address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "getPool(uint256)",
          "getFeeDenominator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IRegistry.sol:IRegistry": {
        "src": "contracts/core/interfaces/IRegistry.sol:92",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/core/interfaces/IStrategy.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "isValidAllocator(address)",
          "isPoolActive()",
          "getPoolAmount()",
          "increasePoolAmount(uint256)",
          "getRecipientStatus(address)",
          "getPayouts(address[],bytes[])",
          "initialize(uint256,bytes)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Clone.sol:Clone": {
        "src": "contracts/core/libraries/Clone.sol:37",
        "version": {
          "withMetadata": "a894b13d5514c3680b83089132aed85d9e9b1899e651e71c7ad4f39abd11f3ef",
          "withoutMetadata": "a894b13d5514c3680b83089132aed85d9e9b1899e651e71c7ad4f39abd11f3ef",
          "linkedWithoutMetadata": "a894b13d5514c3680b83089132aed85d9e9b1899e651e71c7ad4f39abd11f3ef"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Errors.sol:Errors": {
        "src": "contracts/core/libraries/Errors.sol:109",
        "version": {
          "withMetadata": "4998504bb03b8907d7f9eabd524b42019b45a4c2e2e7d4ee1547ed740a4216a5",
          "withoutMetadata": "4998504bb03b8907d7f9eabd524b42019b45a4c2e2e7d4ee1547ed740a4216a5",
          "linkedWithoutMetadata": "4998504bb03b8907d7f9eabd524b42019b45a4c2e2e7d4ee1547ed740a4216a5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Native.sol:Native": {
        "src": "contracts/core/libraries/Native.sol:26",
        "version": {
          "withMetadata": "4b534558e3034b9384106261bf48cfb898295fc7efb4a4270aa70dc5aaaa0d30",
          "withoutMetadata": "4b534558e3034b9384106261bf48cfb898295fc7efb4a4270aa70dc5aaaa0d30",
          "linkedWithoutMetadata": "4b534558e3034b9384106261bf48cfb898295fc7efb4a4270aa70dc5aaaa0d30"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Transfer.sol:Transfer": {
        "src": "contracts/core/libraries/Transfer.sol:97",
        "version": {
          "withMetadata": "5e77ab29019ceaeb1d15fbec42fa652dc6d3e0ae4be28cbf59bc3eee4f22c9f5",
          "withoutMetadata": "5e77ab29019ceaeb1d15fbec42fa652dc6d3e0ae4be28cbf59bc3eee4f22c9f5",
          "linkedWithoutMetadata": "5e77ab29019ceaeb1d15fbec42fa652dc6d3e0ae4be28cbf59bc3eee4f22c9f5"
        },
        "inherit": [
          "contracts/core/libraries/Native.sol:Native"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/factory/ContractFactory.sol:ContractFactory": {
        "src": "contracts/factory/ContractFactory.sol:107",
        "version": {
          "withMetadata": "d84bf7749fae769da227f44dafcfa7ce77cea0fb48b80454fca15ad92cba5fd0",
          "withoutMetadata": "d84bf7749fae769da227f44dafcfa7ce77cea0fb48b80454fca15ad92cba5fd0",
          "linkedWithoutMetadata": "d84bf7749fae769da227f44dafcfa7ce77cea0fb48b80454fca15ad92cba5fd0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "deploy(string,string,bytes)",
          "setDeployer(address,bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ContractFactory",
            "src": "contracts/factory/ContractFactory.sol:119"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "usedSalts",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            },
            {
              "label": "isDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/BaseStrategy.sol:BaseStrategy": {
        "src": "contracts/strategies/BaseStrategy.sol:111",
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "getPoolAmount()",
          "isPoolActive()",
          "getRecipientStatus(address)",
          "increasePoolAmount(uint256)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)",
          "getPayouts(address[],bytes[])",
          "isValidAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseStrategy",
            "src": "contracts/strategies/BaseStrategy.sol:129"
          },
          {
            "kind": "state-variable-immutable",
            "name": "allo",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          },
          {
            "kind": "state-variable-immutable",
            "name": "strategyId",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:DirectGrantsSimpleStrategy": {
        "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:110",
        "version": {
          "withMetadata": "eadfccf7550e73ca045529762a2070fda30d6eaea7ea230fd0e32c909a0666bc",
          "withoutMetadata": "eadfccf7550e73ca045529762a2070fda30d6eaea7ea230fd0e32c909a0666bc",
          "linkedWithoutMetadata": "eadfccf7550e73ca045529762a2070fda30d6eaea7ea230fd0e32c909a0666bc"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getMilestoneStatus(address,uint256)",
          "getMilestones(address)",
          "setMilestones(address,struct DirectGrantsSimpleStrategy.Milestone[])",
          "reviewSetMilestones(address,uint8)",
          "submitMilestone(address,uint256,(uint256,string))",
          "rejectMilestone(address,uint256)",
          "setRecipientStatusToInReview(address[])",
          "setPoolActive(bool)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DirectGrantsSimpleStrategy",
            "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:192"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:161"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:163"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:164"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(IRegistry)4399",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:167"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:168"
            },
            {
              "label": "_acceptedRecipientIds",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:172"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)5683_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:177"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Milestone)5692_storage)dyn_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:179"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:184"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)5692_storage)dyn_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(Milestone)5692_storage)dyn_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Milestone[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5683_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)5692_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)5683_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "milestonesReviewStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:DonationVotingCustomRegistryStrategy": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52",
        "version": {
          "withMetadata": "7ac609812f7bb5647b86fb05467a2e71d05476ae3e204735ebdd7417646f9c72",
          "withoutMetadata": "7ac609812f7bb5647b86fb05467a2e71d05476ae3e204735ebdd7417646f9c72",
          "linkedWithoutMetadata": "7ac609812f7bb5647b86fb05467a2e71d05476ae3e204735ebdd7417646f9c72"
        },
        "inherit": [
          "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingCustomRegistryStrategy",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4399",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:162"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7297_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:165"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4417_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:167"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:172"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(SimpleProjectRegistry)7268",
              "contract": "DonationVotingCustomRegistryStrategy",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(SimpleProjectRegistry)7268": {
              "label": "contract SimpleProjectRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4417_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7297_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4417_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7297_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:SimpleProjectRegistry": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:26",
        "version": {
          "withMetadata": "9b60eac3bfb6094c6f1dccf2edf132177bc0ed1f71d555e4e464b86454bd45f2",
          "withoutMetadata": "9b60eac3bfb6094c6f1dccf2edf132177bc0ed1f71d555e4e464b86454bd45f2",
          "linkedWithoutMetadata": "9b60eac3bfb6094c6f1dccf2edf132177bc0ed1f71d555e4e464b86454bd45f2"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addProject(address)",
          "addProjects(address[])",
          "removeProject(address)",
          "removeProjects(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleProjectRegistry",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "projects",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleProjectRegistry",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy": {
        "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:100",
        "version": {
          "withMetadata": "45d0feceb31e462ee75f072b32692d0baf51fb33146a3b3f9750c2693b1f684b",
          "withoutMetadata": "45d0feceb31e462ee75f072b32692d0baf51fb33146a3b3f9750c2693b1f684b",
          "linkedWithoutMetadata": "45d0feceb31e462ee75f072b32692d0baf51fb33146a3b3f9750c2693b1f684b"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "setPayout(address[],uint256[])",
          "claim(struct DonationVotingStrategy.Claim[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingStrategy",
            "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:198"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4399",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:162"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7297_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:165"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4417_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:167"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:172"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4417_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7297_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4417_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7297_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:ProportionalPayoutStrategy": {
        "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:113",
        "version": {
          "withMetadata": "79b5c1a27dc0c093bf827d92ba002d8de0ebd6d4e5ed22f57c5d4e30886627be",
          "withoutMetadata": "79b5c1a27dc0c093bf827d92ba002d8de0ebd6d4e5ed22f57c5d4e30886627be",
          "linkedWithoutMetadata": "79b5c1a27dc0c093bf827d92ba002d8de0ebd6d4e5ed22f57c5d4e30886627be"
        },
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "setAllocationTime(uint64,uint64)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProportionalPayoutStrategy",
            "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:163"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Recipient)8709_storage)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:151"
            },
            {
              "label": "hasAllocated",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:153"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ERC721)35610",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "maxRecipientsAllowed",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:155"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:157"
            },
            {
              "label": "totalAllocations",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:159"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:161"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)35610": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)8709_storage)": {
              "label": "mapping(address => struct ProportionalPayoutStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)8709_storage": {
              "label": "struct ProportionalPayoutStrategy.Recipient",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:QVGovernanceERC20Votes": {
        "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:89",
        "version": {
          "withMetadata": "b804f85e0d2dbfa24d92f4a162d7b81abf69fc95efff9293fd4cb16315b2faea",
          "withoutMetadata": "b804f85e0d2dbfa24d92f4a162d7b81abf69fc95efff9293fd4cb16315b2faea",
          "linkedWithoutMetadata": "b804f85e0d2dbfa24d92f4a162d7b81abf69fc95efff9293fd4cb16315b2faea"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVGovernanceERC20Votes",
            "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:102"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4399",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17740_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17751_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:238"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:241"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:243"
            },
            {
              "label": "govToken",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IVotes)23421",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:96"
            },
            {
              "label": "timestamp",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:98"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IVotes)23421": {
              "label": "contract IVotes",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(Status)4412)": {
              "label": "mapping(address => enum IStrategy.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))": {
              "label": "mapping(address => mapping(address => enum IStrategy.Status))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17751_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17740_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4412,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17751_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17740_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:HackathonQVStrategy": {
        "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:110",
        "version": {
          "withMetadata": "4e57ec8d54fe0b5a74da35b639021d83e4474b588e23eb764e474a5cbaab7cd2",
          "withoutMetadata": "4e57ec8d54fe0b5a74da35b639021d83e4474b588e23eb764e474a5cbaab7cd2",
          "linkedWithoutMetadata": "4e57ec8d54fe0b5a74da35b639021d83e4474b588e23eb764e474a5cbaab7cd2"
        },
        "inherit": [
          "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver",
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllowedRecipientIds(address[],uint64,bytes)",
          "setPayoutPercentages(uint256[])",
          "getPayouts(address[],bytes[])",
          "getAttestation(bytes32)",
          "getSchema(bytes32)",
          "isPayable()",
          "isAttestationExpired(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HackathonQVStrategy",
            "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:148"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4399",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17740_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17751_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:238"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:241"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:243"
            },
            {
              "label": "_eas",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IEAS)20794",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:29"
            },
            {
              "label": "payoutPercentages",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:130"
            },
            {
              "label": "votesByRank",
              "offset": 0,
              "slot": "14",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:131"
            },
            {
              "label": "easInfo",
              "offset": 0,
              "slot": "15",
              "type": "t_struct(EASInfo)9613_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "20",
              "type": "t_contract(ERC721)35610",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:133"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:133"
            },
            {
              "label": "recipientIdToUID",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:135"
            },
            {
              "label": "recipientIdToIndex",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:136"
            },
            {
              "label": "indexToRecipientId",
              "offset": 0,
              "slot": "25",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:143"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ERC721)35610": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IEAS)20794": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(ISchemaRegistry)20839": {
              "label": "contract ISchemaRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(Status)4412)": {
              "label": "mapping(address => enum IStrategy.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))": {
              "label": "mapping(address => mapping(address => enum IStrategy.Status))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17751_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17740_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4412,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17751_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(EASInfo)9613_storage": {
              "label": "struct HackathonQVStrategy.EASInfo",
              "members": [
                {
                  "label": "eas",
                  "type": "t_contract(IEAS)20794",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "schemaRegistry",
                  "type": "t_contract(ISchemaRegistry)20839",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "schemaUID",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "schema",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "revocable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17740_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver": {
        "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:20",
        "inherit": [
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver"
        ],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_eas",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IEAS)20794",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:29"
            }
          ],
          "types": {
            "t_contract(IEAS)20794": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:QVImpactStreamStrategy": {
        "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:89",
        "version": {
          "withMetadata": "fff521b769f830fbaa2ef6573334a24e8a4d4fee0846ae66e7b7b413f59286c3",
          "withoutMetadata": "fff521b769f830fbaa2ef6573334a24e8a4d4fee0846ae66e7b7b413f59286c3",
          "linkedWithoutMetadata": "fff521b769f830fbaa2ef6573334a24e8a4d4fee0846ae66e7b7b413f59286c3"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "updatePoolTimestamps(uint64,uint64)",
          "batchAddAllocator(address[])",
          "addAllocator(address)",
          "batchRemoveAllocator(address[])",
          "removeAllocator(address)",
          "setPayouts(struct QVImpactStreamStrategy.Payout[])",
          "getRecipient(address)",
          "getVoiceCreditsCastByAllocator(address)",
          "getVoiceCreditsCastByAllocatorToRecipient(address,address)",
          "getVotesCastByAllocatorToRecipient(address,address)",
          "recoverFunds(address,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVImpactStreamStrategy",
            "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:218"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "3",
              "type": "t_uint64",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:157"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "3",
              "type": "t_uint64",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:158"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IRegistry)4399",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:161"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:163"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:165"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)11045_storage)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:168"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)11056_storage)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:173"
            },
            {
              "label": "payouts",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:178"
            },
            {
              "label": "payoutSet",
              "offset": 0,
              "slot": "10",
              "type": "t_bool",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:179"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)11056_storage)": {
              "label": "mapping(address => struct QVImpactStreamStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)11045_storage)": {
              "label": "mapping(address => struct QVImpactStreamStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)11056_storage": {
              "label": "struct QVImpactStreamStrategy.Allocator",
              "members": [
                {
                  "label": "usedVoiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)11045_storage": {
              "label": "struct QVImpactStreamStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "requestedAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:QVNftTieredStrategy": {
        "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:94",
        "version": {
          "withMetadata": "8f6a5429479601bd196418a41ecb6cd51b0481e283fede12c011577e2240c966",
          "withoutMetadata": "8f6a5429479601bd196418a41ecb6cd51b0481e283fede12c011577e2240c966",
          "linkedWithoutMetadata": "8f6a5429479601bd196418a41ecb6cd51b0481e283fede12c011577e2240c966"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVNftTieredStrategy",
            "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4399",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17740_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17751_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:238"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:241"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:243"
            },
            {
              "label": "nfts",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_contract(ERC721)35610)dyn_storage",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:111"
            },
            {
              "label": "maxVoiceCreditsPerNft",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_contract(ERC721)35610,t_uint256)",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:113"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_contract(ERC721)35610,t_mapping(t_uint256,t_uint256))",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:115"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(ERC721)35610)dyn_storage": {
              "label": "contract ERC721[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)35610": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(Status)4412)": {
              "label": "mapping(address => enum IStrategy.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))": {
              "label": "mapping(address => mapping(address => enum IStrategy.Status))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17751_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17740_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)35610,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(contract ERC721 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)35610,t_uint256)": {
              "label": "mapping(contract ERC721 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4412,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17751_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17740_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:LockupDynamicStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:16",
        "version": {
          "withMetadata": "1606bb743e4e79ab54e12f28c8cf2ba12f204d39f18348de6f87c1b4b078ab6a",
          "withoutMetadata": "1606bb743e4e79ab54e12f28c8cf2ba12f204d39f18348de6f87c1b4b078ab6a",
          "linkedWithoutMetadata": "1606bb743e4e79ab54e12f28c8cf2ba12f204d39f18348de6f87c1b4b078ab6a"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientSegments(address,struct LockupDynamic.SegmentWithDelta[])",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupDynamicStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:42"
            },
            {
              "label": "lockupDynamic",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupDynamic)34021",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)34141_storage",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)12561_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(SegmentWithDelta)34225_storage)dyn_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupDynamic)34021": {
              "label": "contract ISablierV2LockupDynamic",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12561_storage)": {
              "label": "mapping(address => struct LockupDynamicStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)34141_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)33382",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12561_storage": {
              "label": "struct LockupDynamicStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "segments",
                  "type": "t_array(t_struct(SegmentWithDelta)34225_storage)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(SegmentWithDelta)34225_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exponent",
                  "type": "t_userDefinedValueType(UD2x18)31578",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "delta",
                  "type": "t_uint40",
                  "offset": 24,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD2x18)31578": {
              "label": "UD2x18",
              "numberOfBytes": "8",
              "underlying": "t_uint64"
            },
            "t_userDefinedValueType(UD60x18)33382": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:LockupLinearStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:16",
        "version": {
          "withMetadata": "dde45f90679543bc349e10d9d2272aea4be99542733714d0ab6d671e4d725a71",
          "withoutMetadata": "dde45f90679543bc349e10d9d2272aea4be99542733714d0ab6d671e4d725a71",
          "linkedWithoutMetadata": "dde45f90679543bc349e10d9d2272aea4be99542733714d0ab6d671e4d725a71"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientDurations(address,(uint40,uint40))",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupLinearStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:42"
            },
            {
              "label": "lockupLinear",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupLinear)34110",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)34141_storage",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)13743_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupLinear)34110": {
              "label": "contract ISablierV2LockupLinear",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)13743_storage)": {
              "label": "mapping(address => struct LockupLinearStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)34141_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)33382",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Durations)34293_storage": {
              "label": "struct LockupLinear.Durations",
              "members": [
                {
                  "label": "cliff",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "total",
                  "type": "t_uint40",
                  "offset": 5,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)13743_storage": {
              "label": "struct LockupLinearStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durations",
                  "type": "t_struct(Durations)34293_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD60x18)33382": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:NFT": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:8",
        "version": {
          "withMetadata": "0d54af4e96556a057c037540cd40a137a786ea505214f14a2bb6f5c892e02e39",
          "withoutMetadata": "0d54af4e96556a057c037540cd40a137a786ea505214f14a2bb6f5c892e02e39",
          "linkedWithoutMetadata": "0d54af4e96556a057c037540cd40a137a786ea505214f14a2bb6f5c892e02e39"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable",
          "solady/src/tokens/ERC721.sol:ERC721"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)",
          "name()",
          "symbol()",
          "mintTo(address)",
          "tokenURI(uint256)",
          "withdrawPayments(address payable)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFT",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTokenId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:16"
            },
            {
              "label": "MINT_PRICE",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:17"
            },
            {
              "label": "__name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:20"
            },
            {
              "label": "__symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:NFTFactory": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:6",
        "version": {
          "withMetadata": "021e78b33958b3a8b844d7d1bf175cef5a38e3dbb8208565aa26710988ca367f",
          "withoutMetadata": "021e78b33958b3a8b844d7d1bf175cef5a38e3dbb8208565aa26710988ca367f",
          "linkedWithoutMetadata": "021e78b33958b3a8b844d7d1bf175cef5a38e3dbb8208565aa26710988ca367f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createNFTContract(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isNFTContract",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NFTFactory",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:WrappedVotingNftMintStrategy": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:101",
        "version": {
          "withMetadata": "fa6a1daea95b0f6dbcce3ecced67c7792a386600873a0c32575e402c66232e29",
          "withoutMetadata": "fa6a1daea95b0f6dbcce3ecced67c7792a386600873a0c32575e402c66232e29",
          "linkedWithoutMetadata": "fa6a1daea95b0f6dbcce3ecced67c7792a386600873a0c32575e402c66232e29"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllocationTimes(uint64,uint64)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrappedVotingNftMintStrategy",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:147"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "nftFactory",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(NFTFactory)14970",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationStartTime",
              "offset": 20,
              "slot": "4",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "currentWinner",
              "offset": 8,
              "slot": "5",
              "type": "t_address",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:137"
            },
            {
              "label": "allocations",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:138"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(NFTFactory)14970": {
              "label": "contract NFTFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:99",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(struct DonationVotingMerkleDistributionBaseStrategy.ApplicationStatus[],uint256)",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(address)",
          "updateDistribution(bytes32,(uint256,string))",
          "isDistributionSet()",
          "hasBeenDistributed(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionBaseStrategy",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:293"
          },
          {
            "kind": "state-variable-assignment",
            "name": "recipientsCounter",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
          },
          {
            "kind": "state-variable-immutable",
            "name": "PERMIT2",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:230"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4692_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:208"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4399",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:235"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:257"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:259"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:265"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)15551_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:267"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)15551_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)15551_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:DonationVotingMerkleDistributionDirectTransferStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:82",
        "version": {
          "withMetadata": "64ff36400aeb49ec84da3790266a28b89c5d8ff32db2456eeebf78d3cde99676",
          "withoutMetadata": "64ff36400aeb49ec84da3790266a28b89c5d8ff32db2456eeebf78d3cde99676",
          "linkedWithoutMetadata": "64ff36400aeb49ec84da3790266a28b89c5d8ff32db2456eeebf78d3cde99676"
        },
        "inherit": [
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionDirectTransferStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4692_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:208"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4399",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:235"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:257"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:259"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:265"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)15551_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:267"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)15551_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)15551_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:DonationVotingMerkleDistributionVaultStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:94",
        "version": {
          "withMetadata": "b344ddd608cddbab8a3cb3c10a64da9ffc7001d53949f7b78ea94140a0e49f99",
          "withoutMetadata": "b344ddd608cddbab8a3cb3c10a64da9ffc7001d53949f7b78ea94140a0e49f99",
          "linkedWithoutMetadata": "b344ddd608cddbab8a3cb3c10a64da9ffc7001d53949f7b78ea94140a0e49f99"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)",
          "claim(struct DonationVotingMerkleDistributionVaultStrategy.Claim[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionVaultStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:128"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4692_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:208"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4399",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:235"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:257"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:259"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:265"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)15551_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:267"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "16",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "16",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "18",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "67",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:117"
            },
            {
              "label": "totalClaimableAmount",
              "offset": 0,
              "slot": "68",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:120"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)15551_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)15551_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy": {
        "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:89",
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVBaseStrategy",
            "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:271"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4399",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17740_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17751_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:238"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:241"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:243"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(Status)4412)": {
              "label": "mapping(address => enum IStrategy.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))": {
              "label": "mapping(address => mapping(address => enum IStrategy.Status))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17751_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17740_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4412,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17751_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17740_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-simple/QVSimpleStrategy.sol:QVSimpleStrategy": {
        "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:90",
        "version": {
          "withMetadata": "73fd90964c185a520b3f3f85d925940e55f35c5cedc5afffb2e5b8c49753f356",
          "withoutMetadata": "73fd90964c185a520b3f3f85d925940e55f35c5cedc5afffb2e5b8c49753f356",
          "linkedWithoutMetadata": "73fd90964c185a520b3f3f85d925940e55f35c5cedc5afffb2e5b8c49753f356"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "addAllocator(address)",
          "removeAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVSimpleStrategy",
            "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4399",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17740_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17751_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:238"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:241"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:243"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:108"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:111"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(Status)4412)": {
              "label": "mapping(address => enum IStrategy.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))": {
              "label": "mapping(address => mapping(address => enum IStrategy.Status))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17751_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17740_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4412,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17751_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17740_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:RFPCommitteeStrategy": {
        "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:84",
        "version": {
          "withMetadata": "28ecee5c841bc5c008d08c9f5df4a9021a7b8667b112695f4b86f1b5f343c4f2",
          "withoutMetadata": "28ecee5c841bc5c008d08c9f5df4a9021a7b8667b112695f4b86f1b5f343c4f2",
          "linkedWithoutMetadata": "28ecee5c841bc5c008d08c9f5df4a9021a7b8667b112695f4b86f1b5f343c4f2"
        },
        "inherit": [
          "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPCommitteeStrategy",
            "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:124"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:174"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:175"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:180"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4399",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:183"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:186"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:190"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)19391_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:192"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)19382_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:193"
            },
            {
              "label": "voteThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:104"
            },
            {
              "label": "votedFor",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:109"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:112"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)19391_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)19382_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)19391_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)19382_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy": {
        "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:106",
        "version": {
          "withMetadata": "79cc0da6acffd8293ef16fe0198ef914bec82d5ebf2248bb5bd5ff3409b12064",
          "withoutMetadata": "79cc0da6acffd8293ef16fe0198ef914bec82d5ebf2248bb5bd5ff3409b12064",
          "linkedWithoutMetadata": "79cc0da6acffd8293ef16fe0198ef914bec82d5ebf2248bb5bd5ff3409b12064"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getPayouts(address[],bytes[])",
          "getMilestone(uint256)",
          "getMilestoneStatus(uint256)",
          "setPoolActive(bool)",
          "setMilestones(struct RFPSimpleStrategy.Milestone[])",
          "submitUpcomingMilestone((uint256,string))",
          "increaseMaxBid(uint256)",
          "rejectMilestone(uint256)",
          "withdraw(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPSimpleStrategy",
            "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:201"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:174"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:175"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:180"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4399",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:183"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:186"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:190"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)19391_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:192"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)19382_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:193"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)19391_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Recipient)19382_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)19391_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)19382_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/IEAS.sol:IEAS": {
        "src": "lib/eas-contracts/contracts/IEAS.sol:82",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSchemaRegistry()",
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))",
          "multiAttest(struct MultiAttestationRequest[])",
          "multiAttestByDelegation(struct MultiDelegatedAttestationRequest[])",
          "revoke((bytes32,(bytes32,uint256)))",
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))",
          "multiRevoke(struct MultiRevocationRequest[])",
          "multiRevokeByDelegation(struct MultiDelegatedRevocationRequest[])",
          "timestamp(bytes32)",
          "multiTimestamp(bytes32[])",
          "revokeOffchain(bytes32)",
          "multiRevokeOffchain(bytes32[])",
          "getAttestation(bytes32)",
          "isAttestationValid(bytes32)",
          "getTimestamp(bytes32)",
          "getRevokeOffchain(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol:ISchemaRegistry": {
        "src": "lib/eas-contracts/contracts/ISchemaRegistry.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "register(string,address,bool)",
          "getSchema(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver": {
        "src": "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:51",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)20930_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:260"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)20930_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)20930_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:19",
        "version": {
          "withMetadata": "f2d6a1a6ecc218df63f6c7fef5ff2952bbdf38f3ca04a52824fd87677273f146",
          "withoutMetadata": "f2d6a1a6ecc218df63f6c7fef5ff2952bbdf38f3ca04a52824fd87677273f146",
          "linkedWithoutMetadata": "f2d6a1a6ecc218df63f6c7fef5ff2952bbdf38f3ca04a52824fd87677273f146"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "189fbddb5204251ffc8753c7ffc6969b786667fd89663907b30fad7934c38852",
          "withoutMetadata": "189fbddb5204251ffc8753c7ffc6969b786667fd89663907b30fad7934c38852",
          "linkedWithoutMetadata": "189fbddb5204251ffc8753c7ffc6969b786667fd89663907b30fad7934c38852"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol:12",
        "version": {
          "withMetadata": "b8cb826944f226db539ffda80a2e3f2f6906ffbafde786dc5e6f4237c8e20767",
          "withoutMetadata": "b8cb826944f226db539ffda80a2e3f2f6906ffbafde786dc5e6f4237c8e20767",
          "linkedWithoutMetadata": "b8cb826944f226db539ffda80a2e3f2f6906ffbafde786dc5e6f4237c8e20767"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "1a5b9679f20a1818ce7edd5fa941da56770c31593defe0870561d998a5359c88",
          "withoutMetadata": "1a5b9679f20a1818ce7edd5fa941da56770c31593defe0870561d998a5359c88",
          "linkedWithoutMetadata": "1a5b9679f20a1818ce7edd5fa941da56770c31593defe0870561d998a5359c88"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SignedMathUpgradeable.sol:9",
        "version": {
          "withMetadata": "4e377d0a322b6023abd028a2b314ab308f35d7c67630a8818a33a9c3457391be",
          "withoutMetadata": "4e377d0a322b6023abd028a2b314ab308f35d7c67630a8818a33a9c3457391be",
          "linkedWithoutMetadata": "4e377d0a322b6023abd028a2b314ab308f35d7c67630a8818a33a9c3457391be"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol:ERC1155Holder": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol:16",
        "version": {
          "withMetadata": "23a02b6321450130a49acd634f1bb507037f44705bb739c02f13a72e8b3330b4",
          "withoutMetadata": "23a02b6321450130a49acd634f1bb507037f44705bb739c02f13a72e8b3330b4",
          "linkedWithoutMetadata": "23a02b6321450130a49acd634f1bb507037f44705bb739c02f13a72e8b3330b4"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver",
          "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "5383be0cbe35409b55a1605a2aaa609ec092d6469a329fe2182dab7e2d43095d",
          "withoutMetadata": "5383be0cbe35409b55a1605a2aaa609ec092d6469a329fe2182dab7e2d43095d",
          "linkedWithoutMetadata": "5383be0cbe35409b55a1605a2aaa609ec092d6469a329fe2182dab7e2d43095d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol:ERC721Holder": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "7386183dc09b2c7efb17988d45a32a50fc8e839d4f818201c48ea78d1e077354",
          "withoutMetadata": "7386183dc09b2c7efb17988d45a32a50fc8e839d4f818201c48ea78d1e077354",
          "linkedWithoutMetadata": "7386183dc09b2c7efb17988d45a32a50fc8e839d4f818201c48ea78d1e077354"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "ddcdc30a0f1c7b48d8dbe5c03acb91a0473ac72120c4db3ce5c41766cb892374",
          "withoutMetadata": "ddcdc30a0f1c7b48d8dbe5c03acb91a0473ac72120c4db3ce5c41766cb892374",
          "linkedWithoutMetadata": "ddcdc30a0f1c7b48d8dbe5c03acb91a0473ac72120c4db3ce5c41766cb892374"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c1851883487c9ee2a5594454f385da55115c69885ae3bde525dfbc204cd20fdc",
          "withoutMetadata": "c1851883487c9ee2a5594454f385da55115c69885ae3bde525dfbc204cd20fdc",
          "linkedWithoutMetadata": "c1851883487c9ee2a5594454f385da55115c69885ae3bde525dfbc204cd20fdc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "93b625c0d786433f45bef6b38e690bfdd77180a2193ae1b30fd7482049789dbc",
          "withoutMetadata": "93b625c0d786433f45bef6b38e690bfdd77180a2193ae1b30fd7482049789dbc",
          "linkedWithoutMetadata": "93b625c0d786433f45bef6b38e690bfdd77180a2193ae1b30fd7482049789dbc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "0db339a495c26023bab1714a70d750dc9c0a8835d2754a8dd6496814beb09ea4",
          "withoutMetadata": "0db339a495c26023bab1714a70d750dc9c0a8835d2754a8dd6496814beb09ea4",
          "linkedWithoutMetadata": "0db339a495c26023bab1714a70d750dc9c0a8835d2754a8dd6496814beb09ea4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "637998400a6df03af270689caeaef08f2afe2dd73a40c1979caefa8676c234b1",
          "withoutMetadata": "637998400a6df03af270689caeaef08f2afe2dd73a40c1979caefa8676c234b1",
          "linkedWithoutMetadata": "637998400a6df03af270689caeaef08f2afe2dd73a40c1979caefa8676c234b1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/IEIP712.sol:IEIP712": {
        "src": "lib/permit2/src/interfaces/IEIP712.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/ISignatureTransfer.sol:ISignatureTransfer": {
        "src": "lib/permit2/src/interfaces/ISignatureTransfer.sol:9",
        "inherit": [
          "lib/permit2/src/interfaces/IEIP712.sol:IEIP712"
        ],
        "libraries": [],
        "methods": [
          "nonceBitmap(address,uint256)",
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)",
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)",
          "permitTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes)",
          "permitWitnessTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes32,string,bytes)",
          "invalidateUnorderedNonces(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable": {
        "src": "lib/v2-core/src/interfaces/IAdminable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "transferAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Base.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "comptroller()",
          "protocolRevenues(address)",
          "claimProtocolRevenues(address)",
          "setComptroller(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:ISablierV2Comptroller": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "flashFee()",
          "isFlashAsset(address)",
          "protocolFees(address)",
          "setFlashFee(uint256)",
          "setProtocolFee(address,uint256)",
          "toggleFlashAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:13",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getAsset(uint256)",
          "getDepositedAmount(uint256)",
          "getEndTime(uint256)",
          "getRecipient(uint256)",
          "getRefundedAmount(uint256)",
          "getSender(uint256)",
          "getStartTime(uint256)",
          "getWithdrawnAmount(uint256)",
          "isCancelable(uint256)",
          "isCold(uint256)",
          "isDepleted(uint256)",
          "isStream(uint256)",
          "isWarm(uint256)",
          "nextStreamId()",
          "refundableAmountOf(uint256)",
          "statusOf(uint256)",
          "streamedAmountOf(uint256)",
          "wasCanceled(uint256)",
          "withdrawableAmountOf(uint256)",
          "burn(uint256)",
          "cancel(uint256)",
          "cancelMultiple(uint256[])",
          "renounce(uint256)",
          "setNFTDescriptor(address)",
          "withdraw(uint256,address,uint128)",
          "withdrawMax(uint256,address)",
          "withdrawMaxAndTransfer(uint256,address)",
          "withdrawMultiple(uint256[],address,uint128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:ISablierV2LockupDynamic": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_SEGMENT_COUNT()",
          "getRange(uint256)",
          "getSegments(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDeltas((address,bool,address,uint128,address,(address,uint256),struct LockupDynamic.SegmentWithDelta[]))",
          "createWithMilestones((address,uint40,bool,address,uint128,address,(address,uint256),struct LockupDynamic.Segment[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:ISablierV2LockupLinear": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getCliffTime(uint256)",
          "getRange(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))",
          "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:ISablierV2NFTDescriptor": {
        "src": "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:Lockup": {
        "src": "lib/v2-core/src/types/DataTypes.sol:29",
        "version": {
          "withMetadata": "98cda437eea771ec47e6947213d15a1a190a2c225be7dff2840288ad2b36b573",
          "withoutMetadata": "98cda437eea771ec47e6947213d15a1a190a2c225be7dff2840288ad2b36b573",
          "linkedWithoutMetadata": "98cda437eea771ec47e6947213d15a1a190a2c225be7dff2840288ad2b36b573"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupDynamic": {
        "src": "lib/v2-core/src/types/DataTypes.sol:72",
        "version": {
          "withMetadata": "98cb3aaebe4285e9464a35d8c2679d8ad580c35a1ece6c8bba9bfb83ac5dc36f",
          "withoutMetadata": "98cb3aaebe4285e9464a35d8c2679d8ad580c35a1ece6c8bba9bfb83ac5dc36f",
          "linkedWithoutMetadata": "98cb3aaebe4285e9464a35d8c2679d8ad580c35a1ece6c8bba9bfb83ac5dc36f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupLinear": {
        "src": "lib/v2-core/src/types/DataTypes.sol:180",
        "version": {
          "withMetadata": "fd88584baf1f21a298a938843861bbfaae879815815712dac7cfd43813f24708",
          "withoutMetadata": "fd88584baf1f21a298a938843861bbfaae879815815712dac7cfd43813f24708",
          "linkedWithoutMetadata": "fd88584baf1f21a298a938843861bbfaae879815815712dac7cfd43813f24708"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/auth/Ownable.sol:Ownable": {
        "src": "solady/src/auth/Ownable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "renounceOwnership()",
          "requestOwnershipHandover()",
          "cancelOwnershipHandover()",
          "completeOwnershipHandover(address)",
          "owner()",
          "ownershipHandoverExpiresAt(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC20.sol:ERC20": {
        "src": "solady/src/tokens/ERC20.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC721.sol:ERC721": {
        "src": "solady/src/tokens/ERC721.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "balanceOf(address)",
          "getApproved(uint256)",
          "approve(address,uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/CREATE3.sol:CREATE3": {
        "src": "solady/src/utils/CREATE3.sol:8",
        "version": {
          "withMetadata": "ea5cdece78ebe026aed9d720200e500a31c876e01d255ddd24cfb0d5bb03c39c",
          "withoutMetadata": "ea5cdece78ebe026aed9d720200e500a31c876e01d255ddd24cfb0d5bb03c39c",
          "linkedWithoutMetadata": "ea5cdece78ebe026aed9d720200e500a31c876e01d255ddd24cfb0d5bb03c39c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/SafeTransferLib.sol:SafeTransferLib": {
        "src": "solady/src/utils/SafeTransferLib.sol:12",
        "version": {
          "withMetadata": "859db7eb0956d6e0791f1b7749dc6567b5564473165fef65a3effe87063ea45f",
          "withoutMetadata": "859db7eb0956d6e0791f1b7749dc6567b5564473165fef65a3effe87063ea45f",
          "linkedWithoutMetadata": "859db7eb0956d6e0791f1b7749dc6567b5564473165fef65a3effe87063ea45f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "caba9dac7c627ec0735ed807a13e2200cd276f5f3e86384c52a0b1d1880ea421",
          "withoutMetadata": "caba9dac7c627ec0735ed807a13e2200cd276f5f3e86384c52a0b1d1880ea421",
          "linkedWithoutMetadata": "caba9dac7c627ec0735ed807a13e2200cd276f5f3e86384c52a0b1d1880ea421"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "04677e42123cfc09d20135384f276d208580013952f2bb23aca1e600c8b90b29",
          "withoutMetadata": "04677e42123cfc09d20135384f276d208580013952f2bb23aca1e600c8b90b29",
          "linkedWithoutMetadata": "04677e42123cfc09d20135384f276d208580013952f2bb23aca1e600c8b90b29"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "d380d7509692a479171dbe2c9661949a67db0673648991e94b58485ea9c77fdb",
          "withoutMetadata": "d380d7509692a479171dbe2c9661949a67db0673648991e94b58485ea9c77fdb",
          "linkedWithoutMetadata": "d380d7509692a479171dbe2c9661949a67db0673648991e94b58485ea9c77fdb"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "e04a44e576e54e2a3db65dbcc4ff4bb6484ff3028ae40770cc7a70a8f0167f9f",
          "withoutMetadata": "e04a44e576e54e2a3db65dbcc4ff4bb6484ff3028ae40770cc7a70a8f0167f9f",
          "linkedWithoutMetadata": "e04a44e576e54e2a3db65dbcc4ff4bb6484ff3028ae40770cc7a70a8f0167f9f"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "2dc2381dbdb4ebd6bf111852fd6f048e29516473a646b076e6ec840bce3537dc",
          "withoutMetadata": "2dc2381dbdb4ebd6bf111852fd6f048e29516473a646b076e6ec840bce3537dc",
          "linkedWithoutMetadata": "2dc2381dbdb4ebd6bf111852fd6f048e29516473a646b076e6ec840bce3537dc"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "ecc2514873c3348465cffea67903da004ca97e23cba0d8d7f81525634812f348",
          "withoutMetadata": "ecc2514873c3348465cffea67903da004ca97e23cba0d8d7f81525634812f348",
          "linkedWithoutMetadata": "ecc2514873c3348465cffea67903da004ca97e23cba0d8d7f81525634812f348"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "91be1ec28e461bd90bc8a14d0a610fced889543ee0c656a05548ab6fbb84acc9",
          "withoutMetadata": "91be1ec28e461bd90bc8a14d0a610fced889543ee0c656a05548ab6fbb84acc9",
          "linkedWithoutMetadata": "91be1ec28e461bd90bc8a14d0a610fced889543ee0c656a05548ab6fbb84acc9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Allo.sol:Allo": {
        "src": "contracts/core/Allo.sol:96",
        "version": {
          "withMetadata": "498c213ed9e0aec7eeef6a2d95d4e497b74de3869143bffff9cc57b27d8fd312",
          "withoutMetadata": "498c213ed9e0aec7eeef6a2d95d4e497b74de3869143bffff9cc57b27d8fd312",
          "linkedWithoutMetadata": "498c213ed9e0aec7eeef6a2d95d4e497b74de3869143bffff9cc57b27d8fd312"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "solady/src/auth/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IAllo.sol:IAllo"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "getFeeDenominator()",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "isCloneableStrategy(address)",
          "getPool(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)20930_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "151",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "percentFee",
              "offset": 0,
              "slot": "201",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:123"
            },
            {
              "label": "baseFee",
              "offset": 0,
              "slot": "202",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:138"
            },
            {
              "label": "_poolIndex",
              "offset": 0,
              "slot": "203",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:141"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "204",
              "type": "t_address_payable",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:141"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "205",
              "type": "t_contract(IRegistry)4399",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:142"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "206",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:143"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "207",
              "type": "t_mapping(t_uint256,t_struct(Pool)3918_storage)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:144"
            },
            {
              "label": "cloneableStrategies",
              "offset": 0,
              "slot": "208",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:146"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)4566": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)20930_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)3918_storage)": {
              "label": "mapping(uint256 => struct IAllo.Pool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Pool)3918_storage": {
              "label": "struct IAllo.Pool",
              "members": [
                {
                  "label": "profileId",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "strategy",
                  "type": "t_contract(IStrategy)4566",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "managerRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)20930_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Anchor.sol:Anchor": {
        "src": "contracts/core/Anchor.sol:92",
        "version": {
          "withMetadata": "98d31636c059796e990da066e33f424e77958fbf7fec772f02f4665e612570ce",
          "withoutMetadata": "98d31636c059796e990da066e33f424e77958fbf7fec772f02f4665e612570ce",
          "linkedWithoutMetadata": "98d31636c059796e990da066e33f424e77958fbf7fec772f02f4665e612570ce"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol:ERC1155Holder",
          "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver",
          "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol:ERC721Holder",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,address)",
          "execute(address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Anchor",
            "src": "contracts/core/Anchor.sol:92"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/core/Anchor.sol:92"
          },
          {
            "kind": "state-variable-immutable",
            "name": "profileId",
            "src": "contracts/core/Anchor.sol:92"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Registry.sol:Registry": {
        "src": "contracts/core/Registry.sol:102",
        "version": {
          "withMetadata": "39c7f5467537a6d6e18e19820a08903ece8dd237a0637b5fd1487d0dceb79ac1",
          "withoutMetadata": "39c7f5467537a6d6e18e19820a08903ece8dd237a0637b5fd1487d0dceb79ac1",
          "linkedWithoutMetadata": "39c7f5467537a6d6e18e19820a08903ece8dd237a0637b5fd1487d0dceb79ac1"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "contracts/core/libraries/Native.sol:Native",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/interfaces/IRegistry.sol:IRegistry"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)20930_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "anchorToProfileId",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:108"
            },
            {
              "label": "profilesById",
              "offset": 0,
              "slot": "152",
              "type": "t_mapping(t_bytes32,t_struct(Profile)4226_storage)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:110"
            },
            {
              "label": "profileIdToPendingOwner",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:112"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Profile)4226_storage)": {
              "label": "mapping(bytes32 => struct IRegistry.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)20930_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Profile)4226_storage": {
              "label": "struct IRegistry.Profile",
              "members": [
                {
                  "label": "id",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "anchor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)20930_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IAllo.sol:IAllo": {
        "src": "contracts/core/interfaces/IAllo.sol:97",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "isCloneableStrategy(address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "getPool(uint256)",
          "getFeeDenominator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IRegistry.sol:IRegistry": {
        "src": "contracts/core/interfaces/IRegistry.sol:92",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/core/interfaces/IStrategy.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "isValidAllocator(address)",
          "isPoolActive()",
          "getPoolAmount()",
          "increasePoolAmount(uint256)",
          "getRecipientStatus(address)",
          "getPayouts(address[],bytes[])",
          "initialize(uint256,bytes)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Clone.sol:Clone": {
        "src": "contracts/core/libraries/Clone.sol:37",
        "version": {
          "withMetadata": "65f049dd697889013d220ac386c3cfb1818f2688ee4e7773b642d201d7712a80",
          "withoutMetadata": "65f049dd697889013d220ac386c3cfb1818f2688ee4e7773b642d201d7712a80",
          "linkedWithoutMetadata": "65f049dd697889013d220ac386c3cfb1818f2688ee4e7773b642d201d7712a80"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Errors.sol:Errors": {
        "src": "contracts/core/libraries/Errors.sol:109",
        "version": {
          "withMetadata": "154509f331c6b574f426a6041f0976364f247f5993b05a19f8909b71f3ca982e",
          "withoutMetadata": "154509f331c6b574f426a6041f0976364f247f5993b05a19f8909b71f3ca982e",
          "linkedWithoutMetadata": "154509f331c6b574f426a6041f0976364f247f5993b05a19f8909b71f3ca982e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Native.sol:Native": {
        "src": "contracts/core/libraries/Native.sol:26",
        "version": {
          "withMetadata": "cb708e4fdb8c202bc5de8635215f486b55b019414c58e9451a39235c879392d0",
          "withoutMetadata": "cb708e4fdb8c202bc5de8635215f486b55b019414c58e9451a39235c879392d0",
          "linkedWithoutMetadata": "cb708e4fdb8c202bc5de8635215f486b55b019414c58e9451a39235c879392d0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Transfer.sol:Transfer": {
        "src": "contracts/core/libraries/Transfer.sol:97",
        "version": {
          "withMetadata": "899621fef9d9dbd30aa52507165e956a156e7610249bf38af1fca9b9f8292bb8",
          "withoutMetadata": "899621fef9d9dbd30aa52507165e956a156e7610249bf38af1fca9b9f8292bb8",
          "linkedWithoutMetadata": "899621fef9d9dbd30aa52507165e956a156e7610249bf38af1fca9b9f8292bb8"
        },
        "inherit": [
          "contracts/core/libraries/Native.sol:Native"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/factory/ContractFactory.sol:ContractFactory": {
        "src": "contracts/factory/ContractFactory.sol:107",
        "version": {
          "withMetadata": "3b24b9332e1ece3a1e1e3157320582e199ab8c817e66ec817f8fe6720decb5b2",
          "withoutMetadata": "3b24b9332e1ece3a1e1e3157320582e199ab8c817e66ec817f8fe6720decb5b2",
          "linkedWithoutMetadata": "3b24b9332e1ece3a1e1e3157320582e199ab8c817e66ec817f8fe6720decb5b2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "deploy(string,string,bytes)",
          "setDeployer(address,bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ContractFactory",
            "src": "contracts/factory/ContractFactory.sol:119"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "usedSalts",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            },
            {
              "label": "isDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/BaseStrategy.sol:BaseStrategy": {
        "src": "contracts/strategies/BaseStrategy.sol:111",
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "getPoolAmount()",
          "isPoolActive()",
          "getRecipientStatus(address)",
          "increasePoolAmount(uint256)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)",
          "getPayouts(address[],bytes[])",
          "isValidAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseStrategy",
            "src": "contracts/strategies/BaseStrategy.sol:129"
          },
          {
            "kind": "state-variable-immutable",
            "name": "allo",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          },
          {
            "kind": "state-variable-immutable",
            "name": "strategyId",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:DirectGrantsSimpleStrategy": {
        "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:110",
        "version": {
          "withMetadata": "45658adb3d4b49ca7c56c3691b235e8a1fe1aba3a0758e4aba0745e5fee3485c",
          "withoutMetadata": "45658adb3d4b49ca7c56c3691b235e8a1fe1aba3a0758e4aba0745e5fee3485c",
          "linkedWithoutMetadata": "45658adb3d4b49ca7c56c3691b235e8a1fe1aba3a0758e4aba0745e5fee3485c"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getMilestoneStatus(address,uint256)",
          "getMilestones(address)",
          "setMilestones(address,struct DirectGrantsSimpleStrategy.Milestone[])",
          "reviewSetMilestones(address,uint8)",
          "submitMilestone(address,uint256,(uint256,string))",
          "rejectMilestone(address,uint256)",
          "setRecipientStatusToInReview(address[])",
          "setPoolActive(bool)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DirectGrantsSimpleStrategy",
            "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:192"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:161"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:163"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:164"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(IRegistry)4399",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:167"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:168"
            },
            {
              "label": "_acceptedRecipientIds",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:172"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)5683_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:177"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Milestone)5692_storage)dyn_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:179"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:184"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)5692_storage)dyn_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(Milestone)5692_storage)dyn_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Milestone[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5683_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)5692_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)5683_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "milestonesReviewStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:DonationVotingCustomRegistryStrategy": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52",
        "version": {
          "withMetadata": "55c6a93f04dfea6666066bc1ae9bd50956aa10eefaa29aa7c2056d1bab70e00c",
          "withoutMetadata": "55c6a93f04dfea6666066bc1ae9bd50956aa10eefaa29aa7c2056d1bab70e00c",
          "linkedWithoutMetadata": "55c6a93f04dfea6666066bc1ae9bd50956aa10eefaa29aa7c2056d1bab70e00c"
        },
        "inherit": [
          "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingCustomRegistryStrategy",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4399",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:162"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7297_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:165"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4417_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:167"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:172"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(SimpleProjectRegistry)7268",
              "contract": "DonationVotingCustomRegistryStrategy",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(SimpleProjectRegistry)7268": {
              "label": "contract SimpleProjectRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4417_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7297_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4417_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7297_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:SimpleProjectRegistry": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:26",
        "version": {
          "withMetadata": "3a2f1a26c24b63ea00d81c024b4a94daa737304a68b00634675b228652c877c4",
          "withoutMetadata": "3a2f1a26c24b63ea00d81c024b4a94daa737304a68b00634675b228652c877c4",
          "linkedWithoutMetadata": "3a2f1a26c24b63ea00d81c024b4a94daa737304a68b00634675b228652c877c4"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addProject(address)",
          "addProjects(address[])",
          "removeProject(address)",
          "removeProjects(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleProjectRegistry",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "projects",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleProjectRegistry",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy": {
        "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:100",
        "version": {
          "withMetadata": "488ea12d6e5ced47bc6acf7312183948cd2d3336ee44330dcd1892741023cefa",
          "withoutMetadata": "488ea12d6e5ced47bc6acf7312183948cd2d3336ee44330dcd1892741023cefa",
          "linkedWithoutMetadata": "488ea12d6e5ced47bc6acf7312183948cd2d3336ee44330dcd1892741023cefa"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "setPayout(address[],uint256[])",
          "claim(struct DonationVotingStrategy.Claim[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingStrategy",
            "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:198"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4399",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:162"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7297_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:165"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4417_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:167"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:172"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4417_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7297_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4417_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7297_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:ProportionalPayoutStrategy": {
        "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:113",
        "version": {
          "withMetadata": "d8302ee5d631b4f20a71e544383d0774126a63ca3cc9d4729ea3ba1a4b43535f",
          "withoutMetadata": "d8302ee5d631b4f20a71e544383d0774126a63ca3cc9d4729ea3ba1a4b43535f",
          "linkedWithoutMetadata": "d8302ee5d631b4f20a71e544383d0774126a63ca3cc9d4729ea3ba1a4b43535f"
        },
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "setAllocationTime(uint64,uint64)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProportionalPayoutStrategy",
            "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:163"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Recipient)8709_storage)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:151"
            },
            {
              "label": "hasAllocated",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:153"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ERC721)35610",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "maxRecipientsAllowed",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:155"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:157"
            },
            {
              "label": "totalAllocations",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:159"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:161"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)35610": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)8709_storage)": {
              "label": "mapping(address => struct ProportionalPayoutStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)8709_storage": {
              "label": "struct ProportionalPayoutStrategy.Recipient",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:QVGovernanceERC20Votes": {
        "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:89",
        "version": {
          "withMetadata": "f7bf7bd0a6c6a288ee74241ea92bf4076e30a53d020b5a3e9cada328baeb53c9",
          "withoutMetadata": "f7bf7bd0a6c6a288ee74241ea92bf4076e30a53d020b5a3e9cada328baeb53c9",
          "linkedWithoutMetadata": "f7bf7bd0a6c6a288ee74241ea92bf4076e30a53d020b5a3e9cada328baeb53c9"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVGovernanceERC20Votes",
            "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:102"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4399",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17740_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17751_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:238"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:241"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:243"
            },
            {
              "label": "govToken",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IVotes)23421",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:96"
            },
            {
              "label": "timestamp",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:98"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IVotes)23421": {
              "label": "contract IVotes",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(Status)4412)": {
              "label": "mapping(address => enum IStrategy.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))": {
              "label": "mapping(address => mapping(address => enum IStrategy.Status))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17751_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17740_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4412,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17751_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17740_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:HackathonQVStrategy": {
        "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:110",
        "version": {
          "withMetadata": "d99a19fdb04583648cc171020aa67e5e44ebdfc447c9016b1516ad95961f60d8",
          "withoutMetadata": "d99a19fdb04583648cc171020aa67e5e44ebdfc447c9016b1516ad95961f60d8",
          "linkedWithoutMetadata": "d99a19fdb04583648cc171020aa67e5e44ebdfc447c9016b1516ad95961f60d8"
        },
        "inherit": [
          "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver",
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllowedRecipientIds(address[],uint64,bytes)",
          "setPayoutPercentages(uint256[])",
          "getPayouts(address[],bytes[])",
          "getAttestation(bytes32)",
          "getSchema(bytes32)",
          "isPayable()",
          "isAttestationExpired(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HackathonQVStrategy",
            "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:148"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4399",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17740_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17751_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:238"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:241"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:243"
            },
            {
              "label": "_eas",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IEAS)20794",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:29"
            },
            {
              "label": "payoutPercentages",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:130"
            },
            {
              "label": "votesByRank",
              "offset": 0,
              "slot": "14",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:131"
            },
            {
              "label": "easInfo",
              "offset": 0,
              "slot": "15",
              "type": "t_struct(EASInfo)9613_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "20",
              "type": "t_contract(ERC721)35610",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:133"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:133"
            },
            {
              "label": "recipientIdToUID",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:135"
            },
            {
              "label": "recipientIdToIndex",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:136"
            },
            {
              "label": "indexToRecipientId",
              "offset": 0,
              "slot": "25",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:143"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ERC721)35610": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IEAS)20794": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(ISchemaRegistry)20839": {
              "label": "contract ISchemaRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(Status)4412)": {
              "label": "mapping(address => enum IStrategy.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))": {
              "label": "mapping(address => mapping(address => enum IStrategy.Status))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17751_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17740_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4412,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17751_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(EASInfo)9613_storage": {
              "label": "struct HackathonQVStrategy.EASInfo",
              "members": [
                {
                  "label": "eas",
                  "type": "t_contract(IEAS)20794",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "schemaRegistry",
                  "type": "t_contract(ISchemaRegistry)20839",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "schemaUID",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "schema",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "revocable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17740_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver": {
        "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:20",
        "inherit": [
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver"
        ],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_eas",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IEAS)20794",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:29"
            }
          ],
          "types": {
            "t_contract(IEAS)20794": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:QVImpactStreamStrategy": {
        "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:89",
        "version": {
          "withMetadata": "fa4f6995a90419bb12ff31812eebb30799700504a80c47e2dd73d43ff3244a0c",
          "withoutMetadata": "fa4f6995a90419bb12ff31812eebb30799700504a80c47e2dd73d43ff3244a0c",
          "linkedWithoutMetadata": "fa4f6995a90419bb12ff31812eebb30799700504a80c47e2dd73d43ff3244a0c"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "updatePoolTimestamps(uint64,uint64)",
          "batchAddAllocator(address[])",
          "addAllocator(address)",
          "batchRemoveAllocator(address[])",
          "removeAllocator(address)",
          "setPayouts(struct QVImpactStreamStrategy.Payout[])",
          "getRecipient(address)",
          "getVoiceCreditsCastByAllocator(address)",
          "getVoiceCreditsCastByAllocatorToRecipient(address,address)",
          "getVotesCastByAllocatorToRecipient(address,address)",
          "recoverFunds(address,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVImpactStreamStrategy",
            "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:218"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "3",
              "type": "t_uint64",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:157"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "3",
              "type": "t_uint64",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:158"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IRegistry)4399",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:161"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:163"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:165"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)11045_storage)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:168"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)11056_storage)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:173"
            },
            {
              "label": "payouts",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:178"
            },
            {
              "label": "payoutSet",
              "offset": 0,
              "slot": "10",
              "type": "t_bool",
              "contract": "QVImpactStreamStrategy",
              "src": "contracts/strategies/_poc/qv-impact-stream/QVImpactStreamStrategy.sol:179"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)11056_storage)": {
              "label": "mapping(address => struct QVImpactStreamStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)11045_storage)": {
              "label": "mapping(address => struct QVImpactStreamStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)11056_storage": {
              "label": "struct QVImpactStreamStrategy.Allocator",
              "members": [
                {
                  "label": "usedVoiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)11045_storage": {
              "label": "struct QVImpactStreamStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "requestedAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:QVNftTieredStrategy": {
        "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:94",
        "version": {
          "withMetadata": "e304cbf54b170f19ff59226fe3a80830c1905d1f5793cfd73f81bcd392bae124",
          "withoutMetadata": "e304cbf54b170f19ff59226fe3a80830c1905d1f5793cfd73f81bcd392bae124",
          "linkedWithoutMetadata": "e304cbf54b170f19ff59226fe3a80830c1905d1f5793cfd73f81bcd392bae124"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVNftTieredStrategy",
            "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4399",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17740_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17751_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:238"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:241"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:243"
            },
            {
              "label": "nfts",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_contract(ERC721)35610)dyn_storage",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:111"
            },
            {
              "label": "maxVoiceCreditsPerNft",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_contract(ERC721)35610,t_uint256)",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:113"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_contract(ERC721)35610,t_mapping(t_uint256,t_uint256))",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:115"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(ERC721)35610)dyn_storage": {
              "label": "contract ERC721[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)35610": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(Status)4412)": {
              "label": "mapping(address => enum IStrategy.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))": {
              "label": "mapping(address => mapping(address => enum IStrategy.Status))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17751_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17740_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)35610,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(contract ERC721 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)35610,t_uint256)": {
              "label": "mapping(contract ERC721 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4412,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17751_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17740_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:LockupDynamicStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:16",
        "version": {
          "withMetadata": "d5a1be2854034b56738932b29e5e1009c91a317eac0e986306a25f11cdc1cee7",
          "withoutMetadata": "d5a1be2854034b56738932b29e5e1009c91a317eac0e986306a25f11cdc1cee7",
          "linkedWithoutMetadata": "d5a1be2854034b56738932b29e5e1009c91a317eac0e986306a25f11cdc1cee7"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientSegments(address,struct LockupDynamic.SegmentWithDelta[])",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupDynamicStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:42"
            },
            {
              "label": "lockupDynamic",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupDynamic)34021",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)34141_storage",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)12561_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(SegmentWithDelta)34225_storage)dyn_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupDynamic)34021": {
              "label": "contract ISablierV2LockupDynamic",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12561_storage)": {
              "label": "mapping(address => struct LockupDynamicStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)34141_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)33382",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12561_storage": {
              "label": "struct LockupDynamicStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "segments",
                  "type": "t_array(t_struct(SegmentWithDelta)34225_storage)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(SegmentWithDelta)34225_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exponent",
                  "type": "t_userDefinedValueType(UD2x18)31578",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "delta",
                  "type": "t_uint40",
                  "offset": 24,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD2x18)31578": {
              "label": "UD2x18",
              "numberOfBytes": "8",
              "underlying": "t_uint64"
            },
            "t_userDefinedValueType(UD60x18)33382": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:LockupLinearStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:16",
        "version": {
          "withMetadata": "5f1a8cb0e29225c74ae5dba0099a5be088bce994f8d648d355006748f40eafae",
          "withoutMetadata": "5f1a8cb0e29225c74ae5dba0099a5be088bce994f8d648d355006748f40eafae",
          "linkedWithoutMetadata": "5f1a8cb0e29225c74ae5dba0099a5be088bce994f8d648d355006748f40eafae"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientDurations(address,(uint40,uint40))",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupLinearStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:42"
            },
            {
              "label": "lockupLinear",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupLinear)34110",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)34141_storage",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)13743_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupLinear)34110": {
              "label": "contract ISablierV2LockupLinear",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)13743_storage)": {
              "label": "mapping(address => struct LockupLinearStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)34141_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)33382",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Durations)34293_storage": {
              "label": "struct LockupLinear.Durations",
              "members": [
                {
                  "label": "cliff",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "total",
                  "type": "t_uint40",
                  "offset": 5,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)13743_storage": {
              "label": "struct LockupLinearStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durations",
                  "type": "t_struct(Durations)34293_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD60x18)33382": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:NFT": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:8",
        "version": {
          "withMetadata": "1f9f32374545be00b3607246037d5d324b78ce783090d4c932e70627e1a7f2a6",
          "withoutMetadata": "1f9f32374545be00b3607246037d5d324b78ce783090d4c932e70627e1a7f2a6",
          "linkedWithoutMetadata": "1f9f32374545be00b3607246037d5d324b78ce783090d4c932e70627e1a7f2a6"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable",
          "solady/src/tokens/ERC721.sol:ERC721"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)",
          "name()",
          "symbol()",
          "mintTo(address)",
          "tokenURI(uint256)",
          "withdrawPayments(address payable)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFT",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTokenId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:16"
            },
            {
              "label": "MINT_PRICE",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:17"
            },
            {
              "label": "__name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:20"
            },
            {
              "label": "__symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:NFTFactory": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:6",
        "version": {
          "withMetadata": "ee7107ec6568fdf8397bed2ca9479a7b19ae994f3c0917341bb35f76b620a7c4",
          "withoutMetadata": "ee7107ec6568fdf8397bed2ca9479a7b19ae994f3c0917341bb35f76b620a7c4",
          "linkedWithoutMetadata": "ee7107ec6568fdf8397bed2ca9479a7b19ae994f3c0917341bb35f76b620a7c4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createNFTContract(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isNFTContract",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NFTFactory",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:WrappedVotingNftMintStrategy": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:101",
        "version": {
          "withMetadata": "8ca507dccf598f2f1dd5a3e2fab71ca32e57ec24568f2d15a4ef4fe0b73b550b",
          "withoutMetadata": "8ca507dccf598f2f1dd5a3e2fab71ca32e57ec24568f2d15a4ef4fe0b73b550b",
          "linkedWithoutMetadata": "8ca507dccf598f2f1dd5a3e2fab71ca32e57ec24568f2d15a4ef4fe0b73b550b"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllocationTimes(uint64,uint64)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrappedVotingNftMintStrategy",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:147"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "nftFactory",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(NFTFactory)14970",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationStartTime",
              "offset": 20,
              "slot": "4",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "currentWinner",
              "offset": 8,
              "slot": "5",
              "type": "t_address",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:137"
            },
            {
              "label": "allocations",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:138"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(NFTFactory)14970": {
              "label": "contract NFTFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:99",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(struct DonationVotingMerkleDistributionBaseStrategy.ApplicationStatus[],uint256)",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(address)",
          "updateDistribution(bytes32,(uint256,string))",
          "isDistributionSet()",
          "hasBeenDistributed(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionBaseStrategy",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:293"
          },
          {
            "kind": "state-variable-assignment",
            "name": "recipientsCounter",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
          },
          {
            "kind": "state-variable-immutable",
            "name": "PERMIT2",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:230"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4692_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:208"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4399",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:235"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:257"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:259"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:265"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)15551_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:267"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)15551_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)15551_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:DonationVotingMerkleDistributionDirectTransferStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:82",
        "version": {
          "withMetadata": "e36ecc65c239ac2e546440e14bc12d4c9ace6a3c19612127b0ad7e5efe5ae6f1",
          "withoutMetadata": "e36ecc65c239ac2e546440e14bc12d4c9ace6a3c19612127b0ad7e5efe5ae6f1",
          "linkedWithoutMetadata": "e36ecc65c239ac2e546440e14bc12d4c9ace6a3c19612127b0ad7e5efe5ae6f1"
        },
        "inherit": [
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionDirectTransferStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4692_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:208"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4399",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:235"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:257"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:259"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:265"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)15551_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:267"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)15551_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)15551_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:DonationVotingMerkleDistributionVaultStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:94",
        "version": {
          "withMetadata": "ecb5ab6bbd0e3535580b0eaac0e9fedb6f172db4548831a8e2afa7d09dc434b5",
          "withoutMetadata": "ecb5ab6bbd0e3535580b0eaac0e9fedb6f172db4548831a8e2afa7d09dc434b5",
          "linkedWithoutMetadata": "ecb5ab6bbd0e3535580b0eaac0e9fedb6f172db4548831a8e2afa7d09dc434b5"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)",
          "claim(struct DonationVotingMerkleDistributionVaultStrategy.Claim[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionVaultStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:128"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4692_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:208"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4399",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:235"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:257"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:259"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:265"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)15551_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:267"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "16",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "16",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "18",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "67",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:117"
            },
            {
              "label": "totalClaimableAmount",
              "offset": 0,
              "slot": "68",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:120"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)15551_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)15551_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy": {
        "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:89",
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVBaseStrategy",
            "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:271"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4399",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17740_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17751_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:238"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:241"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:243"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(Status)4412)": {
              "label": "mapping(address => enum IStrategy.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))": {
              "label": "mapping(address => mapping(address => enum IStrategy.Status))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17751_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17740_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4412,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17751_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17740_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-simple/QVSimpleStrategy.sol:QVSimpleStrategy": {
        "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:90",
        "version": {
          "withMetadata": "5a4bd19d05abb31e1f8a0d7f27ab5e7357c7032fb69d3a1aa1f77d8d01ec43b7",
          "withoutMetadata": "5a4bd19d05abb31e1f8a0d7f27ab5e7357c7032fb69d3a1aa1f77d8d01ec43b7",
          "linkedWithoutMetadata": "5a4bd19d05abb31e1f8a0d7f27ab5e7357c7032fb69d3a1aa1f77d8d01ec43b7"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "addAllocator(address)",
          "removeAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVSimpleStrategy",
            "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:163"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:166"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:171"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:173"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:178"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:181"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:183"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "6",
              "type": "t_contract(IRegistry)4399",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:187"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)17740_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)17751_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:238"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:241"
            },
            {
              "label": "reviewedByManager",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:243"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:108"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:111"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(Status)4412)": {
              "label": "mapping(address => enum IStrategy.Status)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_enum(Status)4412))": {
              "label": "mapping(address => mapping(address => enum IStrategy.Status))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4412,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)17751_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17740_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4412,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)17751_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)17740_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:RFPCommitteeStrategy": {
        "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:84",
        "version": {
          "withMetadata": "201a43d371ba8ae8d781c66e1bd085e3196e96b2cc78d00bb6b96ba810f734f3",
          "withoutMetadata": "201a43d371ba8ae8d781c66e1bd085e3196e96b2cc78d00bb6b96ba810f734f3",
          "linkedWithoutMetadata": "201a43d371ba8ae8d781c66e1bd085e3196e96b2cc78d00bb6b96ba810f734f3"
        },
        "inherit": [
          "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPCommitteeStrategy",
            "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:124"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:174"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:175"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:180"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4399",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:183"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:186"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:190"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)19391_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:192"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)19382_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:193"
            },
            {
              "label": "voteThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:104"
            },
            {
              "label": "votedFor",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:109"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:112"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)19391_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)19382_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)19391_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)19382_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy": {
        "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:106",
        "version": {
          "withMetadata": "4aaccb3ae3f34d8ab1d47b4cd5cd470bc031b62667f0edc38f3b31f20fb835b0",
          "withoutMetadata": "4aaccb3ae3f34d8ab1d47b4cd5cd470bc031b62667f0edc38f3b31f20fb835b0",
          "linkedWithoutMetadata": "4aaccb3ae3f34d8ab1d47b4cd5cd470bc031b62667f0edc38f3b31f20fb835b0"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getPayouts(address[],bytes[])",
          "getMilestone(uint256)",
          "getMilestoneStatus(uint256)",
          "setPoolActive(bool)",
          "setMilestones(struct RFPSimpleStrategy.Milestone[])",
          "submitUpcomingMilestone((uint256,string))",
          "increaseMaxBid(uint256)",
          "rejectMilestone(uint256)",
          "withdraw(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPSimpleStrategy",
            "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:201"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:174"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:175"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:180"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4399",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:183"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:186"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:190"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)19391_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:192"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)19382_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:193"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)19391_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4399": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4412": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Recipient)19382_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4692_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)19391_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)19382_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4412",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4692_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/IEAS.sol:IEAS": {
        "src": "lib/eas-contracts/contracts/IEAS.sol:82",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSchemaRegistry()",
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))",
          "multiAttest(struct MultiAttestationRequest[])",
          "multiAttestByDelegation(struct MultiDelegatedAttestationRequest[])",
          "revoke((bytes32,(bytes32,uint256)))",
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))",
          "multiRevoke(struct MultiRevocationRequest[])",
          "multiRevokeByDelegation(struct MultiDelegatedRevocationRequest[])",
          "timestamp(bytes32)",
          "multiTimestamp(bytes32[])",
          "revokeOffchain(bytes32)",
          "multiRevokeOffchain(bytes32[])",
          "getAttestation(bytes32)",
          "isAttestationValid(bytes32)",
          "getTimestamp(bytes32)",
          "getRevokeOffchain(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol:ISchemaRegistry": {
        "src": "lib/eas-contracts/contracts/ISchemaRegistry.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "register(string,address,bool)",
          "getSchema(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver": {
        "src": "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:51",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)20930_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:62"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:260"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)20930_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)20930_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:19",
        "version": {
          "withMetadata": "345e955ee7efbdfc8370070d6446b3dc7e52e779d67c8d02212f35d04f2bf7e6",
          "withoutMetadata": "345e955ee7efbdfc8370070d6446b3dc7e52e779d67c8d02212f35d04f2bf7e6",
          "linkedWithoutMetadata": "345e955ee7efbdfc8370070d6446b3dc7e52e779d67c8d02212f35d04f2bf7e6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "d8af5951a646f0624eb152ff84ebc937dd1af675ebbf164b3b17374cdca4a8f4",
          "withoutMetadata": "d8af5951a646f0624eb152ff84ebc937dd1af675ebbf164b3b17374cdca4a8f4",
          "linkedWithoutMetadata": "d8af5951a646f0624eb152ff84ebc937dd1af675ebbf164b3b17374cdca4a8f4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol:12",
        "version": {
          "withMetadata": "2716f5f71d7eed9b65d22d549addc18932526c940c7da3cf8544e6e2e6b94189",
          "withoutMetadata": "2716f5f71d7eed9b65d22d549addc18932526c940c7da3cf8544e6e2e6b94189",
          "linkedWithoutMetadata": "2716f5f71d7eed9b65d22d549addc18932526c940c7da3cf8544e6e2e6b94189"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "2f00fbdd685fe41e68d4433e64f63a40e543868064f3149d81338c8cccb3c07f",
          "withoutMetadata": "2f00fbdd685fe41e68d4433e64f63a40e543868064f3149d81338c8cccb3c07f",
          "linkedWithoutMetadata": "2f00fbdd685fe41e68d4433e64f63a40e543868064f3149d81338c8cccb3c07f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SignedMathUpgradeable.sol:9",
        "version": {
          "withMetadata": "d12ad358df669dcb12814f93e32fc8d8e2213daa023c6a118bde60ee59a0bc66",
          "withoutMetadata": "d12ad358df669dcb12814f93e32fc8d8e2213daa023c6a118bde60ee59a0bc66",
          "linkedWithoutMetadata": "d12ad358df669dcb12814f93e32fc8d8e2213daa023c6a118bde60ee59a0bc66"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol:ERC1155Holder": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol:16",
        "version": {
          "withMetadata": "aef09a0d6cf96011c0722cccf854cef6d3b45193796edae7248cef47818db087",
          "withoutMetadata": "aef09a0d6cf96011c0722cccf854cef6d3b45193796edae7248cef47818db087",
          "linkedWithoutMetadata": "aef09a0d6cf96011c0722cccf854cef6d3b45193796edae7248cef47818db087"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver",
          "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "cb6b29809dfd175cfc2080661809affd916bef0ee220e5a7cac5e663bf31e4b1",
          "withoutMetadata": "cb6b29809dfd175cfc2080661809affd916bef0ee220e5a7cac5e663bf31e4b1",
          "linkedWithoutMetadata": "cb6b29809dfd175cfc2080661809affd916bef0ee220e5a7cac5e663bf31e4b1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol:ERC721Holder": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "601f8cade1ac44af9c70d07505ce7df55e9426997d389816456c37ec41f419ad",
          "withoutMetadata": "601f8cade1ac44af9c70d07505ce7df55e9426997d389816456c37ec41f419ad",
          "linkedWithoutMetadata": "601f8cade1ac44af9c70d07505ce7df55e9426997d389816456c37ec41f419ad"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "d1ccf25a8649af925c40855b7595fb3212c6c9967fd34ac225602b1bc26d476e",
          "withoutMetadata": "d1ccf25a8649af925c40855b7595fb3212c6c9967fd34ac225602b1bc26d476e",
          "linkedWithoutMetadata": "d1ccf25a8649af925c40855b7595fb3212c6c9967fd34ac225602b1bc26d476e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c478e65da7bb035b2dea63bd60ab19956728e0affcb9648a22375d920fda8780",
          "withoutMetadata": "c478e65da7bb035b2dea63bd60ab19956728e0affcb9648a22375d920fda8780",
          "linkedWithoutMetadata": "c478e65da7bb035b2dea63bd60ab19956728e0affcb9648a22375d920fda8780"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "2091260fd5cd13755797bca58c66f04448a9823fd11dbb7bb40f5e57fcf95793",
          "withoutMetadata": "2091260fd5cd13755797bca58c66f04448a9823fd11dbb7bb40f5e57fcf95793",
          "linkedWithoutMetadata": "2091260fd5cd13755797bca58c66f04448a9823fd11dbb7bb40f5e57fcf95793"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "f8e61e5bc65cd2e659609714b1bbf19f97c264e4c83735a49cca55324be69695",
          "withoutMetadata": "f8e61e5bc65cd2e659609714b1bbf19f97c264e4c83735a49cca55324be69695",
          "linkedWithoutMetadata": "f8e61e5bc65cd2e659609714b1bbf19f97c264e4c83735a49cca55324be69695"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "c44045799353a741efb43aa6da429965c9f36a69ecb739aa57660757e76426db",
          "withoutMetadata": "c44045799353a741efb43aa6da429965c9f36a69ecb739aa57660757e76426db",
          "linkedWithoutMetadata": "c44045799353a741efb43aa6da429965c9f36a69ecb739aa57660757e76426db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/IEIP712.sol:IEIP712": {
        "src": "lib/permit2/src/interfaces/IEIP712.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/ISignatureTransfer.sol:ISignatureTransfer": {
        "src": "lib/permit2/src/interfaces/ISignatureTransfer.sol:9",
        "inherit": [
          "lib/permit2/src/interfaces/IEIP712.sol:IEIP712"
        ],
        "libraries": [],
        "methods": [
          "nonceBitmap(address,uint256)",
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)",
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)",
          "permitTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes)",
          "permitWitnessTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes32,string,bytes)",
          "invalidateUnorderedNonces(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable": {
        "src": "lib/v2-core/src/interfaces/IAdminable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "transferAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Base.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "comptroller()",
          "protocolRevenues(address)",
          "claimProtocolRevenues(address)",
          "setComptroller(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:ISablierV2Comptroller": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "flashFee()",
          "isFlashAsset(address)",
          "protocolFees(address)",
          "setFlashFee(uint256)",
          "setProtocolFee(address,uint256)",
          "toggleFlashAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:13",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getAsset(uint256)",
          "getDepositedAmount(uint256)",
          "getEndTime(uint256)",
          "getRecipient(uint256)",
          "getRefundedAmount(uint256)",
          "getSender(uint256)",
          "getStartTime(uint256)",
          "getWithdrawnAmount(uint256)",
          "isCancelable(uint256)",
          "isCold(uint256)",
          "isDepleted(uint256)",
          "isStream(uint256)",
          "isWarm(uint256)",
          "nextStreamId()",
          "refundableAmountOf(uint256)",
          "statusOf(uint256)",
          "streamedAmountOf(uint256)",
          "wasCanceled(uint256)",
          "withdrawableAmountOf(uint256)",
          "burn(uint256)",
          "cancel(uint256)",
          "cancelMultiple(uint256[])",
          "renounce(uint256)",
          "setNFTDescriptor(address)",
          "withdraw(uint256,address,uint128)",
          "withdrawMax(uint256,address)",
          "withdrawMaxAndTransfer(uint256,address)",
          "withdrawMultiple(uint256[],address,uint128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:ISablierV2LockupDynamic": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_SEGMENT_COUNT()",
          "getRange(uint256)",
          "getSegments(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDeltas((address,bool,address,uint128,address,(address,uint256),struct LockupDynamic.SegmentWithDelta[]))",
          "createWithMilestones((address,uint40,bool,address,uint128,address,(address,uint256),struct LockupDynamic.Segment[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:ISablierV2LockupLinear": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getCliffTime(uint256)",
          "getRange(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))",
          "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:ISablierV2NFTDescriptor": {
        "src": "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:Lockup": {
        "src": "lib/v2-core/src/types/DataTypes.sol:29",
        "version": {
          "withMetadata": "145ca8ac28d2f675d9b0090b54f5d410ccd10b5140fe80f980e164fb555f74f0",
          "withoutMetadata": "145ca8ac28d2f675d9b0090b54f5d410ccd10b5140fe80f980e164fb555f74f0",
          "linkedWithoutMetadata": "145ca8ac28d2f675d9b0090b54f5d410ccd10b5140fe80f980e164fb555f74f0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupDynamic": {
        "src": "lib/v2-core/src/types/DataTypes.sol:72",
        "version": {
          "withMetadata": "99b4a22d21414ecc70bc8218fdff200e1785a3c0bede10cf4d5ca1af490edda5",
          "withoutMetadata": "99b4a22d21414ecc70bc8218fdff200e1785a3c0bede10cf4d5ca1af490edda5",
          "linkedWithoutMetadata": "99b4a22d21414ecc70bc8218fdff200e1785a3c0bede10cf4d5ca1af490edda5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupLinear": {
        "src": "lib/v2-core/src/types/DataTypes.sol:180",
        "version": {
          "withMetadata": "3d06e2d05cd7520731a19178ecf0fa5a5e9729a033df531140ebde39e75491f9",
          "withoutMetadata": "3d06e2d05cd7520731a19178ecf0fa5a5e9729a033df531140ebde39e75491f9",
          "linkedWithoutMetadata": "3d06e2d05cd7520731a19178ecf0fa5a5e9729a033df531140ebde39e75491f9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/auth/Ownable.sol:Ownable": {
        "src": "solady/src/auth/Ownable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "renounceOwnership()",
          "requestOwnershipHandover()",
          "cancelOwnershipHandover()",
          "completeOwnershipHandover(address)",
          "owner()",
          "ownershipHandoverExpiresAt(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC20.sol:ERC20": {
        "src": "solady/src/tokens/ERC20.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC721.sol:ERC721": {
        "src": "solady/src/tokens/ERC721.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "balanceOf(address)",
          "getApproved(uint256)",
          "approve(address,uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/CREATE3.sol:CREATE3": {
        "src": "solady/src/utils/CREATE3.sol:8",
        "version": {
          "withMetadata": "6ef27453d3374d37f2847cc4cebd0d1fca5f8345ad86df1878c4d5624059f39b",
          "withoutMetadata": "6ef27453d3374d37f2847cc4cebd0d1fca5f8345ad86df1878c4d5624059f39b",
          "linkedWithoutMetadata": "6ef27453d3374d37f2847cc4cebd0d1fca5f8345ad86df1878c4d5624059f39b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/SafeTransferLib.sol:SafeTransferLib": {
        "src": "solady/src/utils/SafeTransferLib.sol:12",
        "version": {
          "withMetadata": "cddc28548dc5fc7dfaa2aa45c89cd7fb67e99a3ec1e265ba81b8beb9c1c6d2ba",
          "withoutMetadata": "cddc28548dc5fc7dfaa2aa45c89cd7fb67e99a3ec1e265ba81b8beb9c1c6d2ba",
          "linkedWithoutMetadata": "cddc28548dc5fc7dfaa2aa45c89cd7fb67e99a3ec1e265ba81b8beb9c1c6d2ba"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "500871cda4efc3ab71374560d80c6fc49081a7103fe0f45d0fc4e27ae95e4863",
          "withoutMetadata": "500871cda4efc3ab71374560d80c6fc49081a7103fe0f45d0fc4e27ae95e4863",
          "linkedWithoutMetadata": "500871cda4efc3ab71374560d80c6fc49081a7103fe0f45d0fc4e27ae95e4863"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "7bd8b91a39d887f92552b84a33d492a58302834b0963dc98484dfc05b7d54865",
          "withoutMetadata": "7bd8b91a39d887f92552b84a33d492a58302834b0963dc98484dfc05b7d54865",
          "linkedWithoutMetadata": "7bd8b91a39d887f92552b84a33d492a58302834b0963dc98484dfc05b7d54865"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "6af14d6c6e72d5133daa4399417702ef0772e01506b94e532c8ace4369abe2d3",
          "withoutMetadata": "6af14d6c6e72d5133daa4399417702ef0772e01506b94e532c8ace4369abe2d3",
          "linkedWithoutMetadata": "6af14d6c6e72d5133daa4399417702ef0772e01506b94e532c8ace4369abe2d3"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "0d2e7ebd70ac9e80067ec08840dbd892f3b9643a6aeed10be9cf74ea094945b9",
          "withoutMetadata": "0d2e7ebd70ac9e80067ec08840dbd892f3b9643a6aeed10be9cf74ea094945b9",
          "linkedWithoutMetadata": "0d2e7ebd70ac9e80067ec08840dbd892f3b9643a6aeed10be9cf74ea094945b9"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "7de6a850f7b320ac83a347f9960eaa81c9590ef1ce0b379aa28378097981751d",
          "withoutMetadata": "7de6a850f7b320ac83a347f9960eaa81c9590ef1ce0b379aa28378097981751d",
          "linkedWithoutMetadata": "7de6a850f7b320ac83a347f9960eaa81c9590ef1ce0b379aa28378097981751d"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "76ed403b9b9e20f25a391170bf252d885dda0954510fd10e89d73d515a2c6e45",
          "withoutMetadata": "76ed403b9b9e20f25a391170bf252d885dda0954510fd10e89d73d515a2c6e45",
          "linkedWithoutMetadata": "76ed403b9b9e20f25a391170bf252d885dda0954510fd10e89d73d515a2c6e45"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "3af35b3b1a0bbc3ef6615052390e4cd61853f0999ca00525a2a532d343b3cd98",
          "withoutMetadata": "3af35b3b1a0bbc3ef6615052390e4cd61853f0999ca00525a2a532d343b3cd98",
          "linkedWithoutMetadata": "3af35b3b1a0bbc3ef6615052390e4cd61853f0999ca00525a2a532d343b3cd98"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Allo.sol:Allo": {
        "src": "contracts/core/Allo.sol:89",
        "version": {
          "withMetadata": "12987158f3096980e597f4763b35f2419c19018444815359870809ada1d119f6",
          "withoutMetadata": "12987158f3096980e597f4763b35f2419c19018444815359870809ada1d119f6",
          "linkedWithoutMetadata": "12987158f3096980e597f4763b35f2419c19018444815359870809ada1d119f6"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "solady/src/auth/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IAllo.sol:IAllo"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "getFeeDenominator()",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "isCloneableStrategy(address)",
          "getPool(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "percentFee",
              "offset": 0,
              "slot": "52",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:114"
            },
            {
              "label": "baseFee",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:129"
            },
            {
              "label": "_poolIndex",
              "offset": 0,
              "slot": "54",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "55",
              "type": "t_address_payable",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "56",
              "type": "t_contract(IRegistry)4234",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:133"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "57",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:134"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "58",
              "type": "t_mapping(t_uint256,t_struct(Pool)3753_storage)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:135"
            },
            {
              "label": "cloneableStrategies",
              "offset": 0,
              "slot": "59",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)4405": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)3753_storage)": {
              "label": "mapping(uint256 => struct IAllo.Pool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Pool)3753_storage": {
              "label": "struct IAllo.Pool",
              "members": [
                {
                  "label": "profileId",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "strategy",
                  "type": "t_contract(IStrategy)4405",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "managerRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)19902_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Anchor.sol:Anchor": {
        "src": "contracts/core/Anchor.sol:89",
        "version": {
          "withMetadata": "15a4ee8e90908441027c647b7bc078a52eb248a0df4bcedd1c0c638700ed7fdf",
          "withoutMetadata": "15a4ee8e90908441027c647b7bc078a52eb248a0df4bcedd1c0c638700ed7fdf",
          "linkedWithoutMetadata": "15a4ee8e90908441027c647b7bc078a52eb248a0df4bcedd1c0c638700ed7fdf"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "execute(address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Anchor",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "profileId",
            "src": "contracts/core/Anchor.sol:89"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Registry.sol:Registry": {
        "src": "contracts/core/Registry.sol:103",
        "version": {
          "withMetadata": "4b4c01e68784e4e05a2c5b628fb8f11f9e09f7e33b409bf51bd1e8e9855d0a98",
          "withoutMetadata": "4b4c01e68784e4e05a2c5b628fb8f11f9e09f7e33b409bf51bd1e8e9855d0a98",
          "linkedWithoutMetadata": "4b4c01e68784e4e05a2c5b628fb8f11f9e09f7e33b409bf51bd1e8e9855d0a98"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "contracts/core/libraries/Native.sol:Native",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "contracts/core/interfaces/IRegistry.sol:IRegistry"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "anchorToProfileId",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:109"
            },
            {
              "label": "profilesById",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_struct(Profile)4061_storage)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:111"
            },
            {
              "label": "profileIdToPendingOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:113"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Profile)4061_storage)": {
              "label": "mapping(bytes32 => struct IRegistry.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Profile)4061_storage": {
              "label": "struct IRegistry.Profile",
              "members": [
                {
                  "label": "id",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "anchor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)19902_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IAllo.sol:IAllo": {
        "src": "contracts/core/interfaces/IAllo.sol:97",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "isCloneableStrategy(address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "getPool(uint256)",
          "getFeeDenominator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IRegistry.sol:IRegistry": {
        "src": "contracts/core/interfaces/IRegistry.sol:92",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/core/interfaces/IStrategy.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "isValidAllocator(address)",
          "isPoolActive()",
          "getPoolAmount()",
          "increasePoolAmount(uint256)",
          "getRecipientStatus(address)",
          "getPayouts(address[],bytes[])",
          "initialize(uint256,bytes)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Clone.sol:Clone": {
        "src": "contracts/core/libraries/Clone.sol:37",
        "version": {
          "withMetadata": "5795aa6657e26c82569315eff278c988d27d29a523766d1d6ea3e792eedc70e7",
          "withoutMetadata": "5795aa6657e26c82569315eff278c988d27d29a523766d1d6ea3e792eedc70e7",
          "linkedWithoutMetadata": "5795aa6657e26c82569315eff278c988d27d29a523766d1d6ea3e792eedc70e7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Errors.sol:Errors": {
        "src": "contracts/core/libraries/Errors.sol:109",
        "version": {
          "withMetadata": "846997888af43c66728e817a8a65457b9cc7f06480fb322f06ec26e3d1ac2bca",
          "withoutMetadata": "846997888af43c66728e817a8a65457b9cc7f06480fb322f06ec26e3d1ac2bca",
          "linkedWithoutMetadata": "846997888af43c66728e817a8a65457b9cc7f06480fb322f06ec26e3d1ac2bca"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Native.sol:Native": {
        "src": "contracts/core/libraries/Native.sol:26",
        "version": {
          "withMetadata": "2e65cc9bcd433c55d2ce8d6d35a6e70704df4ab3ec59ccb7fc3c1931898802d1",
          "withoutMetadata": "2e65cc9bcd433c55d2ce8d6d35a6e70704df4ab3ec59ccb7fc3c1931898802d1",
          "linkedWithoutMetadata": "2e65cc9bcd433c55d2ce8d6d35a6e70704df4ab3ec59ccb7fc3c1931898802d1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Transfer.sol:Transfer": {
        "src": "contracts/core/libraries/Transfer.sol:95",
        "version": {
          "withMetadata": "42e5426c31ef1796874d40e97a617376a864fc55d46d1cbbe7f274307718c087",
          "withoutMetadata": "42e5426c31ef1796874d40e97a617376a864fc55d46d1cbbe7f274307718c087",
          "linkedWithoutMetadata": "42e5426c31ef1796874d40e97a617376a864fc55d46d1cbbe7f274307718c087"
        },
        "inherit": [
          "contracts/core/libraries/Native.sol:Native"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/factory/ContractFactory.sol:ContractFactory": {
        "src": "contracts/factory/ContractFactory.sol:107",
        "version": {
          "withMetadata": "d7563a2a54b08751553517935a3e790d98a04b3ee9fbbdc17734ef68e3b1d115",
          "withoutMetadata": "d7563a2a54b08751553517935a3e790d98a04b3ee9fbbdc17734ef68e3b1d115",
          "linkedWithoutMetadata": "d7563a2a54b08751553517935a3e790d98a04b3ee9fbbdc17734ef68e3b1d115"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "deploy(string,string,bytes)",
          "setDeployer(address,bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ContractFactory",
            "src": "contracts/factory/ContractFactory.sol:119"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "usedSalts",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            },
            {
              "label": "isDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/BaseStrategy.sol:BaseStrategy": {
        "src": "contracts/strategies/BaseStrategy.sol:111",
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "getPoolAmount()",
          "isPoolActive()",
          "getRecipientStatus(address)",
          "increasePoolAmount(uint256)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)",
          "getPayouts(address[],bytes[])",
          "isValidAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseStrategy",
            "src": "contracts/strategies/BaseStrategy.sol:129"
          },
          {
            "kind": "state-variable-immutable",
            "name": "allo",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          },
          {
            "kind": "state-variable-immutable",
            "name": "strategyId",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:DirectGrantsSimpleStrategy": {
        "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:112",
        "version": {
          "withMetadata": "915df443a5dde6c8388acb8fcb955322f47ac6a93857468261ad94d76360a902",
          "withoutMetadata": "915df443a5dde6c8388acb8fcb955322f47ac6a93857468261ad94d76360a902",
          "linkedWithoutMetadata": "915df443a5dde6c8388acb8fcb955322f47ac6a93857468261ad94d76360a902"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getMilestoneStatus(address,uint256)",
          "getMilestones(address)",
          "setMilestones(address,struct DirectGrantsSimpleStrategy.Milestone[])",
          "reviewSetMilestones(address,uint8)",
          "submitMilestone(address,uint256,(uint256,string))",
          "rejectMilestone(address,uint256)",
          "setRecipientStatusToInReview(address[])",
          "setPoolActive(bool)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DirectGrantsSimpleStrategy",
            "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:191"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:161"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:162"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:164"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:166"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:167"
            },
            {
              "label": "_acceptedRecipientIds",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:172"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)5493_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:177"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Milestone)5502_storage)dyn_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:179"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:184"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)5502_storage)dyn_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(Milestone)5502_storage)dyn_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Milestone[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5493_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)5502_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)5493_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "milestonesReviewStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:DonationVotingCustomRegistryStrategy": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51",
        "version": {
          "withMetadata": "606fbcbf9d9bca7dcc904b698857502c6b46e5ad133606a678512769388be5e0",
          "withoutMetadata": "606fbcbf9d9bca7dcc904b698857502c6b46e5ad133606a678512769388be5e0",
          "linkedWithoutMetadata": "606fbcbf9d9bca7dcc904b698857502c6b46e5ad133606a678512769388be5e0"
        },
        "inherit": [
          "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingCustomRegistryStrategy",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7094_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(SimpleProjectRegistry)7065",
              "contract": "DonationVotingCustomRegistryStrategy",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(SimpleProjectRegistry)7065": {
              "label": "contract SimpleProjectRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7094_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4252_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7094_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:SimpleProjectRegistry": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:26",
        "version": {
          "withMetadata": "64a09c46feb8056c892570a4b0165f15f01b904ca591a03ffae169ac1430ef2b",
          "withoutMetadata": "64a09c46feb8056c892570a4b0165f15f01b904ca591a03ffae169ac1430ef2b",
          "linkedWithoutMetadata": "64a09c46feb8056c892570a4b0165f15f01b904ca591a03ffae169ac1430ef2b"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addProject(address)",
          "addProjects(address[])",
          "removeProject(address)",
          "removeProjects(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleProjectRegistry",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "projects",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleProjectRegistry",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy": {
        "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:100",
        "version": {
          "withMetadata": "a78a78a3338e8a6021abafbed427faf94a84c9d51dc80fa12194eb7699019bde",
          "withoutMetadata": "a78a78a3338e8a6021abafbed427faf94a84c9d51dc80fa12194eb7699019bde",
          "linkedWithoutMetadata": "a78a78a3338e8a6021abafbed427faf94a84c9d51dc80fa12194eb7699019bde"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "setPayout(address[],uint256[])",
          "claim(struct DonationVotingStrategy.Claim[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingStrategy",
            "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:198"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7094_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7094_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4252_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7094_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:ProportionalPayoutStrategy": {
        "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:112",
        "version": {
          "withMetadata": "b1923ae8239ae8e9af0e14aab8247a7526dae02e350a22f55019a3e7bf75e0e4",
          "withoutMetadata": "b1923ae8239ae8e9af0e14aab8247a7526dae02e350a22f55019a3e7bf75e0e4",
          "linkedWithoutMetadata": "b1923ae8239ae8e9af0e14aab8247a7526dae02e350a22f55019a3e7bf75e0e4"
        },
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "setAllocationTime(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProportionalPayoutStrategy",
            "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:166"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Recipient)8501_storage)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:151"
            },
            {
              "label": "hasAllocated",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:152"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:153"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ERC721)32389",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "maxRecipientsAllowed",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:157"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:158"
            },
            {
              "label": "totalAllocations",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:159"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)32389": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)8501_storage)": {
              "label": "mapping(address => struct ProportionalPayoutStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)8501_storage": {
              "label": "struct ProportionalPayoutStrategy.Recipient",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:QVGovernanceERC20Votes": {
        "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:89",
        "version": {
          "withMetadata": "501a905768f987baab32fd0ab20e8bebcf0c37fa11743d15fa9787f69c6d61a1",
          "withoutMetadata": "501a905768f987baab32fd0ab20e8bebcf0c37fa11743d15fa9787f69c6d61a1",
          "linkedWithoutMetadata": "501a905768f987baab32fd0ab20e8bebcf0c37fa11743d15fa9787f69c6d61a1"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVGovernanceERC20Votes",
            "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:104"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "govToken",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IVotes)20349",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:97"
            },
            {
              "label": "timestamp",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:98"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IVotes)20349": {
              "label": "contract IVotes",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:HackathonQVStrategy": {
        "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:111",
        "version": {
          "withMetadata": "26687e4c14c218178470ae7d12021193139326ba098784d3bc75fd745cb69e27",
          "withoutMetadata": "26687e4c14c218178470ae7d12021193139326ba098784d3bc75fd745cb69e27",
          "linkedWithoutMetadata": "26687e4c14c218178470ae7d12021193139326ba098784d3bc75fd745cb69e27"
        },
        "inherit": [
          "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver",
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllowedRecipientIds(address[],uint64,bytes)",
          "setPayoutPercentages(uint256[])",
          "getPayouts(address[],bytes[])",
          "getAttestation(bytes32)",
          "getSchema(bytes32)",
          "isPayable()",
          "isAttestationExpired(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HackathonQVStrategy",
            "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:148"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "_eas",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IEAS)19040",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            },
            {
              "label": "payoutPercentages",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:130"
            },
            {
              "label": "votesByRank",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:131"
            },
            {
              "label": "easInfo",
              "offset": 0,
              "slot": "14",
              "type": "t_struct(EASInfo)9390_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "19",
              "type": "t_contract(ERC721)32389",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "recipientIdToUID",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:135"
            },
            {
              "label": "recipientIdToIndex",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:137"
            },
            {
              "label": "indexToRecipientId",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:143"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ERC721)32389": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IEAS)19040": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(ISchemaRegistry)19085": {
              "label": "contract ISchemaRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(EASInfo)9390_storage": {
              "label": "struct HackathonQVStrategy.EASInfo",
              "members": [
                {
                  "label": "eas",
                  "type": "t_contract(IEAS)19040",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "schemaRegistry",
                  "type": "t_contract(ISchemaRegistry)19085",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "schemaUID",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "schema",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "revocable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver": {
        "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:19",
        "inherit": [
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver"
        ],
        "libraries": [],
        "methods": [
          "isPayable()",
          "()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_eas",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IEAS)19040",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            }
          ],
          "types": {
            "t_contract(IEAS)19040": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:QVNftTieredStrategy": {
        "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:96",
        "version": {
          "withMetadata": "e2e33cfe860b8709270aab8f1ab54159f6943e92a8f94dae43f3f2aa6a7ad35f",
          "withoutMetadata": "e2e33cfe860b8709270aab8f1ab54159f6943e92a8f94dae43f3f2aa6a7ad35f",
          "linkedWithoutMetadata": "e2e33cfe860b8709270aab8f1ab54159f6943e92a8f94dae43f3f2aa6a7ad35f"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVNftTieredStrategy",
            "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "nfts",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_contract(ERC721)32389)dyn_storage",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:112"
            },
            {
              "label": "maxVoiceCreditsPerNft",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_contract(ERC721)32389,t_uint256)",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:113"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_contract(ERC721)32389,t_mapping(t_uint256,t_uint256))",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(ERC721)32389)dyn_storage": {
              "label": "contract ERC721[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)32389": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)32389,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(contract ERC721 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)32389,t_uint256)": {
              "label": "mapping(contract ERC721 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:LockupDynamicStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:16",
        "version": {
          "withMetadata": "c29ebb0a1c44e4f9f618355b68dfdfdfc29c65690689d351b12ff3f5fa586419",
          "withoutMetadata": "c29ebb0a1c44e4f9f618355b68dfdfdfc29c65690689d351b12ff3f5fa586419",
          "linkedWithoutMetadata": "c29ebb0a1c44e4f9f618355b68dfdfdfc29c65690689d351b12ff3f5fa586419"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientSegments(address,struct LockupDynamic.SegmentWithDelta[])",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupDynamicStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:42"
            },
            {
              "label": "lockupDynamic",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupDynamic)30800",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)30920_storage",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)11146_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(SegmentWithDelta)31004_storage)dyn_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupDynamic)30800": {
              "label": "contract ISablierV2LockupDynamic",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)11146_storage)": {
              "label": "mapping(address => struct LockupDynamicStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)30920_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)30161",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)11146_storage": {
              "label": "struct LockupDynamicStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "segments",
                  "type": "t_array(t_struct(SegmentWithDelta)31004_storage)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(SegmentWithDelta)31004_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exponent",
                  "type": "t_userDefinedValueType(UD2x18)28357",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "delta",
                  "type": "t_uint40",
                  "offset": 24,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD2x18)28357": {
              "label": "UD2x18",
              "numberOfBytes": "8",
              "underlying": "t_uint64"
            },
            "t_userDefinedValueType(UD60x18)30161": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:LockupLinearStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:16",
        "version": {
          "withMetadata": "f2a9c21e01151b75890e39a15e568de0c49627d31d5dbded8ec16f2526817059",
          "withoutMetadata": "f2a9c21e01151b75890e39a15e568de0c49627d31d5dbded8ec16f2526817059",
          "linkedWithoutMetadata": "f2a9c21e01151b75890e39a15e568de0c49627d31d5dbded8ec16f2526817059"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientDurations(address,(uint40,uint40))",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupLinearStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:42"
            },
            {
              "label": "lockupLinear",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupLinear)30889",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)30920_storage",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)12323_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupLinear)30889": {
              "label": "contract ISablierV2LockupLinear",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12323_storage)": {
              "label": "mapping(address => struct LockupLinearStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)30920_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)30161",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Durations)31072_storage": {
              "label": "struct LockupLinear.Durations",
              "members": [
                {
                  "label": "cliff",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "total",
                  "type": "t_uint40",
                  "offset": 5,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12323_storage": {
              "label": "struct LockupLinearStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durations",
                  "type": "t_struct(Durations)31072_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD60x18)30161": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:NFT": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:8",
        "version": {
          "withMetadata": "4de56bc17def5481068d5856a5b11ecbf798fd373088948137937bfd834be87e",
          "withoutMetadata": "4de56bc17def5481068d5856a5b11ecbf798fd373088948137937bfd834be87e",
          "linkedWithoutMetadata": "4de56bc17def5481068d5856a5b11ecbf798fd373088948137937bfd834be87e"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable",
          "solady/src/tokens/ERC721.sol:ERC721"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)",
          "name()",
          "symbol()",
          "mintTo(address)",
          "tokenURI(uint256)",
          "withdrawPayments(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFT",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTokenId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:16"
            },
            {
              "label": "MINT_PRICE",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:17"
            },
            {
              "label": "__name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:20"
            },
            {
              "label": "__symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:NFTFactory": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:6",
        "version": {
          "withMetadata": "83f6ef26de98317bb5acc449ee6dbf20edea94ad6e32f55ae84e762b2fcf40fd",
          "withoutMetadata": "83f6ef26de98317bb5acc449ee6dbf20edea94ad6e32f55ae84e762b2fcf40fd",
          "linkedWithoutMetadata": "83f6ef26de98317bb5acc449ee6dbf20edea94ad6e32f55ae84e762b2fcf40fd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createNFTContract(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isNFTContract",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NFTFactory",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:WrappedVotingNftMintStrategy": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:100",
        "version": {
          "withMetadata": "a8b7f1ec439ae364bfb1e3df91e0ad53da7ffca888e82615208d0c983f3e0854",
          "withoutMetadata": "a8b7f1ec439ae364bfb1e3df91e0ad53da7ffca888e82615208d0c983f3e0854",
          "linkedWithoutMetadata": "a8b7f1ec439ae364bfb1e3df91e0ad53da7ffca888e82615208d0c983f3e0854"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllocationTimes(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrappedVotingNftMintStrategy",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:147"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "nftFactory",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(NFTFactory)13537",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:134"
            },
            {
              "label": "allocationStartTime",
              "offset": 20,
              "slot": "4",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "currentWinner",
              "offset": 8,
              "slot": "5",
              "type": "t_address",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "allocations",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(NFTFactory)13537": {
              "label": "contract NFTFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:99",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(struct DonationVotingMerkleDistributionBaseStrategy.ApplicationStatus[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "updateDistribution(bytes32,(uint256,string))",
          "isDistributionSet()",
          "hasBeenDistributed(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionBaseStrategy",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:286"
          },
          {
            "kind": "state-variable-immutable",
            "name": "PERMIT2",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:230"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4531_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)14108_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14108_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14108_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:DonationVotingMerkleDistributionDirectTransferStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76",
        "version": {
          "withMetadata": "c75a5091528dd5173f2a71ad02c583c9f2642a730669cc2b83a3f0a801b633c9",
          "withoutMetadata": "c75a5091528dd5173f2a71ad02c583c9f2642a730669cc2b83a3f0a801b633c9",
          "linkedWithoutMetadata": "c75a5091528dd5173f2a71ad02c583c9f2642a730669cc2b83a3f0a801b633c9"
        },
        "inherit": [
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionDirectTransferStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4531_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)14108_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14108_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14108_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:DonationVotingMerkleDistributionVaultStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:92",
        "version": {
          "withMetadata": "2c6f2c5ea57abbcfc47d7ede02655c56fdbf5da61d24ae6ccfbf6973c0c6afae",
          "withoutMetadata": "2c6f2c5ea57abbcfc47d7ede02655c56fdbf5da61d24ae6ccfbf6973c0c6afae",
          "linkedWithoutMetadata": "2c6f2c5ea57abbcfc47d7ede02655c56fdbf5da61d24ae6ccfbf6973c0c6afae"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)",
          "claim(struct DonationVotingMerkleDistributionVaultStrategy.Claim[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionVaultStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4531_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)14108_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "16",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "16",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "18",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "67",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14108_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14108_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy": {
        "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:89",
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVBaseStrategy",
            "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:258"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-simple/QVSimpleStrategy.sol:QVSimpleStrategy": {
        "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:89",
        "version": {
          "withMetadata": "f2ffd0102622c1e5d1ee07358645aea26b1ac172ab1fd1856928ff77934fd028",
          "withoutMetadata": "f2ffd0102622c1e5d1ee07358645aea26b1ac172ab1fd1856928ff77934fd028",
          "linkedWithoutMetadata": "f2ffd0102622c1e5d1ee07358645aea26b1ac172ab1fd1856928ff77934fd028"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "addAllocator(address)",
          "removeAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVSimpleStrategy",
            "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:121"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:108"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:111"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:RFPCommitteeStrategy": {
        "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:83",
        "version": {
          "withMetadata": "c59f7ba96172eec5f7f21ec23cf94c6da9d2e4cb8a6a1597e39695b752250ee9",
          "withoutMetadata": "c59f7ba96172eec5f7f21ec23cf94c6da9d2e4cb8a6a1597e39695b752250ee9",
          "linkedWithoutMetadata": "c59f7ba96172eec5f7f21ec23cf94c6da9d2e4cb8a6a1597e39695b752250ee9"
        },
        "inherit": [
          "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPCommitteeStrategy",
            "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4234",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)17670_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)17661_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "voteThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:104"
            },
            {
              "label": "votedFor",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:109"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:114"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)17670_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17661_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)17670_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)17661_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy": {
        "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:107",
        "version": {
          "withMetadata": "fa75a3030f5b940b10c0fcc688449fb99f0b239fb69c35d05137aee6a4b83bca",
          "withoutMetadata": "fa75a3030f5b940b10c0fcc688449fb99f0b239fb69c35d05137aee6a4b83bca",
          "linkedWithoutMetadata": "fa75a3030f5b940b10c0fcc688449fb99f0b239fb69c35d05137aee6a4b83bca"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getPayouts(address[],bytes[])",
          "getMilestone(uint256)",
          "getMilestoneStatus(uint256)",
          "setPoolActive(bool)",
          "setMilestones(struct RFPSimpleStrategy.Milestone[])",
          "submitUpcomingMilestone((uint256,string))",
          "increaseMaxBid(uint256)",
          "rejectMilestone(uint256)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPSimpleStrategy",
            "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:199"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4234",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)17670_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)17661_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)17670_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Recipient)17661_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)17670_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)17661_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/IEAS.sol:IEAS": {
        "src": "lib/eas-contracts/contracts/IEAS.sol:82",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSchemaRegistry()",
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))",
          "multiAttest(struct MultiAttestationRequest[])",
          "multiAttestByDelegation(struct MultiDelegatedAttestationRequest[])",
          "revoke((bytes32,(bytes32,uint256)))",
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))",
          "multiRevoke(struct MultiRevocationRequest[])",
          "multiRevokeByDelegation(struct MultiDelegatedRevocationRequest[])",
          "timestamp(bytes32)",
          "multiTimestamp(bytes32[])",
          "revokeOffchain(bytes32)",
          "multiRevokeOffchain(bytes32[])",
          "getAttestation(bytes32)",
          "isAttestationValid(bytes32)",
          "getTimestamp(bytes32)",
          "getRevokeOffchain(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol:ISchemaRegistry": {
        "src": "lib/eas-contracts/contracts/ISchemaRegistry.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "register(string,address,bool)",
          "getSchema(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver": {
        "src": "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:19",
        "version": {
          "withMetadata": "893bbd16520d26e3eafa9f1a0dfce21f92de056c8fc83d4d44886cd8f7414535",
          "withoutMetadata": "893bbd16520d26e3eafa9f1a0dfce21f92de056c8fc83d4d44886cd8f7414535",
          "linkedWithoutMetadata": "893bbd16520d26e3eafa9f1a0dfce21f92de056c8fc83d4d44886cd8f7414535"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "8bd5d2cb72f05eee53ffbc7ada7be9f13545ea522c98341615a78f3601dff7f2",
          "withoutMetadata": "8bd5d2cb72f05eee53ffbc7ada7be9f13545ea522c98341615a78f3601dff7f2",
          "linkedWithoutMetadata": "8bd5d2cb72f05eee53ffbc7ada7be9f13545ea522c98341615a78f3601dff7f2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:50",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19902_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "09947c5eb7d75d3d7126f4c098d06ab9f84cf188b13050106bf72acd014f0344",
          "withoutMetadata": "09947c5eb7d75d3d7126f4c098d06ab9f84cf188b13050106bf72acd014f0344",
          "linkedWithoutMetadata": "09947c5eb7d75d3d7126f4c098d06ab9f84cf188b13050106bf72acd014f0344"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "bc2c4c597d306e0d454bac0627cd487147f4450f3c73d983844f91d7a40d660e",
          "withoutMetadata": "bc2c4c597d306e0d454bac0627cd487147f4450f3c73d983844f91d7a40d660e",
          "linkedWithoutMetadata": "bc2c4c597d306e0d454bac0627cd487147f4450f3c73d983844f91d7a40d660e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "4e7ac16a0a90828d78eb4304b6cde0d50e4453f152812d53990554b5413c5689",
          "withoutMetadata": "4e7ac16a0a90828d78eb4304b6cde0d50e4453f152812d53990554b5413c5689",
          "linkedWithoutMetadata": "4e7ac16a0a90828d78eb4304b6cde0d50e4453f152812d53990554b5413c5689"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "162ed34e8e38fbd5626e1a0151de0b8badb400fe03ff469d31f60a1b70af84cd",
          "withoutMetadata": "162ed34e8e38fbd5626e1a0151de0b8badb400fe03ff469d31f60a1b70af84cd",
          "linkedWithoutMetadata": "162ed34e8e38fbd5626e1a0151de0b8badb400fe03ff469d31f60a1b70af84cd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "b1783508ca9bb2ff47511dd8ffcf81c262d5260148d76a0ea81ae28b86b2e4e8",
          "withoutMetadata": "b1783508ca9bb2ff47511dd8ffcf81c262d5260148d76a0ea81ae28b86b2e4e8",
          "linkedWithoutMetadata": "b1783508ca9bb2ff47511dd8ffcf81c262d5260148d76a0ea81ae28b86b2e4e8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "12e214797f1ea1d2fc5c12c2252ff11efe91d1b249a26122ece7aab3401d5380",
          "withoutMetadata": "12e214797f1ea1d2fc5c12c2252ff11efe91d1b249a26122ece7aab3401d5380",
          "linkedWithoutMetadata": "12e214797f1ea1d2fc5c12c2252ff11efe91d1b249a26122ece7aab3401d5380"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/IEIP712.sol:IEIP712": {
        "src": "lib/permit2/src/interfaces/IEIP712.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/ISignatureTransfer.sol:ISignatureTransfer": {
        "src": "lib/permit2/src/interfaces/ISignatureTransfer.sol:9",
        "inherit": [
          "lib/permit2/src/interfaces/IEIP712.sol:IEIP712"
        ],
        "libraries": [],
        "methods": [
          "nonceBitmap(address,uint256)",
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)",
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)",
          "permitTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes)",
          "permitWitnessTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes32,string,bytes)",
          "invalidateUnorderedNonces(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable": {
        "src": "lib/v2-core/src/interfaces/IAdminable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "transferAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Base.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "comptroller()",
          "protocolRevenues(address)",
          "claimProtocolRevenues(address)",
          "setComptroller(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:ISablierV2Comptroller": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "flashFee()",
          "isFlashAsset(address)",
          "protocolFees(address)",
          "setFlashFee(uint256)",
          "setProtocolFee(address,uint256)",
          "toggleFlashAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:13",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getAsset(uint256)",
          "getDepositedAmount(uint256)",
          "getEndTime(uint256)",
          "getRecipient(uint256)",
          "getRefundedAmount(uint256)",
          "getSender(uint256)",
          "getStartTime(uint256)",
          "getWithdrawnAmount(uint256)",
          "isCancelable(uint256)",
          "isCold(uint256)",
          "isDepleted(uint256)",
          "isStream(uint256)",
          "isWarm(uint256)",
          "nextStreamId()",
          "refundableAmountOf(uint256)",
          "statusOf(uint256)",
          "streamedAmountOf(uint256)",
          "wasCanceled(uint256)",
          "withdrawableAmountOf(uint256)",
          "burn(uint256)",
          "cancel(uint256)",
          "cancelMultiple(uint256[])",
          "renounce(uint256)",
          "setNFTDescriptor(address)",
          "withdraw(uint256,address,uint128)",
          "withdrawMax(uint256,address)",
          "withdrawMaxAndTransfer(uint256,address)",
          "withdrawMultiple(uint256[],address,uint128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:ISablierV2LockupDynamic": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_SEGMENT_COUNT()",
          "getRange(uint256)",
          "getSegments(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDeltas((address,bool,address,uint128,address,(address,uint256),struct LockupDynamic.SegmentWithDelta[]))",
          "createWithMilestones((address,uint40,bool,address,uint128,address,(address,uint256),struct LockupDynamic.Segment[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:ISablierV2LockupLinear": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getCliffTime(uint256)",
          "getRange(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))",
          "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:ISablierV2NFTDescriptor": {
        "src": "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:Lockup": {
        "src": "lib/v2-core/src/types/DataTypes.sol:29",
        "version": {
          "withMetadata": "edf611a05911946273820ba66c3abad5380d01a5c796c01ba190897ac16e5d87",
          "withoutMetadata": "edf611a05911946273820ba66c3abad5380d01a5c796c01ba190897ac16e5d87",
          "linkedWithoutMetadata": "edf611a05911946273820ba66c3abad5380d01a5c796c01ba190897ac16e5d87"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupDynamic": {
        "src": "lib/v2-core/src/types/DataTypes.sol:72",
        "version": {
          "withMetadata": "1872f21dce01c09c47be11bc396c2933cfe7e7d609aa8aa604457e0ba424639d",
          "withoutMetadata": "1872f21dce01c09c47be11bc396c2933cfe7e7d609aa8aa604457e0ba424639d",
          "linkedWithoutMetadata": "1872f21dce01c09c47be11bc396c2933cfe7e7d609aa8aa604457e0ba424639d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupLinear": {
        "src": "lib/v2-core/src/types/DataTypes.sol:180",
        "version": {
          "withMetadata": "9b63bcfd768202c7f5a539164febce0159ec8c5da6bb20c5439b510e30597b28",
          "withoutMetadata": "9b63bcfd768202c7f5a539164febce0159ec8c5da6bb20c5439b510e30597b28",
          "linkedWithoutMetadata": "9b63bcfd768202c7f5a539164febce0159ec8c5da6bb20c5439b510e30597b28"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/auth/Ownable.sol:Ownable": {
        "src": "solady/src/auth/Ownable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "renounceOwnership()",
          "requestOwnershipHandover()",
          "cancelOwnershipHandover()",
          "completeOwnershipHandover(address)",
          "owner()",
          "ownershipHandoverExpiresAt(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC20.sol:ERC20": {
        "src": "solady/src/tokens/ERC20.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC721.sol:ERC721": {
        "src": "solady/src/tokens/ERC721.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "balanceOf(address)",
          "getApproved(uint256)",
          "approve(address,uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/CREATE3.sol:CREATE3": {
        "src": "solady/src/utils/CREATE3.sol:8",
        "version": {
          "withMetadata": "ce81eba572e8215b1280ebe87d90d91b3aaff52b5ff3393d80dfee98ce11e499",
          "withoutMetadata": "ce81eba572e8215b1280ebe87d90d91b3aaff52b5ff3393d80dfee98ce11e499",
          "linkedWithoutMetadata": "ce81eba572e8215b1280ebe87d90d91b3aaff52b5ff3393d80dfee98ce11e499"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/SafeTransferLib.sol:SafeTransferLib": {
        "src": "solady/src/utils/SafeTransferLib.sol:12",
        "version": {
          "withMetadata": "12237c07ed75b00097d9a801cafd00c61b2758203c61dbedd7986c146ea312b2",
          "withoutMetadata": "12237c07ed75b00097d9a801cafd00c61b2758203c61dbedd7986c146ea312b2",
          "linkedWithoutMetadata": "12237c07ed75b00097d9a801cafd00c61b2758203c61dbedd7986c146ea312b2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "0f869f63def230242cb6dabb06442ff29d1eac79bec262a00f3ae4d04b28216e",
          "withoutMetadata": "0f869f63def230242cb6dabb06442ff29d1eac79bec262a00f3ae4d04b28216e",
          "linkedWithoutMetadata": "0f869f63def230242cb6dabb06442ff29d1eac79bec262a00f3ae4d04b28216e"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "c34402f80b28be912ac14d100044bdacdc88640f015ebfc098bdc4918b41dad1",
          "withoutMetadata": "c34402f80b28be912ac14d100044bdacdc88640f015ebfc098bdc4918b41dad1",
          "linkedWithoutMetadata": "c34402f80b28be912ac14d100044bdacdc88640f015ebfc098bdc4918b41dad1"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "cb27e4fba8baa69e97bcd1c508dddf61364a12bbba6979ca894bcfce384732d3",
          "withoutMetadata": "cb27e4fba8baa69e97bcd1c508dddf61364a12bbba6979ca894bcfce384732d3",
          "linkedWithoutMetadata": "cb27e4fba8baa69e97bcd1c508dddf61364a12bbba6979ca894bcfce384732d3"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "20ac4b6a3b1ef3a692088ec6bef4048ddb0c5d688f23baec2dc3d1410f0eb9e6",
          "withoutMetadata": "20ac4b6a3b1ef3a692088ec6bef4048ddb0c5d688f23baec2dc3d1410f0eb9e6",
          "linkedWithoutMetadata": "20ac4b6a3b1ef3a692088ec6bef4048ddb0c5d688f23baec2dc3d1410f0eb9e6"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "029d87db27a91fd82ecc4971f85f7bb289b608663a203db07e008b7634471f64",
          "withoutMetadata": "029d87db27a91fd82ecc4971f85f7bb289b608663a203db07e008b7634471f64",
          "linkedWithoutMetadata": "029d87db27a91fd82ecc4971f85f7bb289b608663a203db07e008b7634471f64"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "8841eaa0afbbd9b7c6d05032f096303e99674790062448a539c7b768a12da194",
          "withoutMetadata": "8841eaa0afbbd9b7c6d05032f096303e99674790062448a539c7b768a12da194",
          "linkedWithoutMetadata": "8841eaa0afbbd9b7c6d05032f096303e99674790062448a539c7b768a12da194"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "40c8aeb95b566e53b35952868b97eca2f1d3cd65d8a49281e61471bb836ba62d",
          "withoutMetadata": "40c8aeb95b566e53b35952868b97eca2f1d3cd65d8a49281e61471bb836ba62d",
          "linkedWithoutMetadata": "40c8aeb95b566e53b35952868b97eca2f1d3cd65d8a49281e61471bb836ba62d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Allo.sol:Allo": {
        "src": "contracts/core/Allo.sol:89",
        "version": {
          "withMetadata": "93d37efd27a9d6053431695bbdae735a731d75b756baa6d5e44e465c6c3c4a8f",
          "withoutMetadata": "93d37efd27a9d6053431695bbdae735a731d75b756baa6d5e44e465c6c3c4a8f",
          "linkedWithoutMetadata": "93d37efd27a9d6053431695bbdae735a731d75b756baa6d5e44e465c6c3c4a8f"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "solady/src/auth/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IAllo.sol:IAllo"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "getFeeDenominator()",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "isCloneableStrategy(address)",
          "getPool(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "percentFee",
              "offset": 0,
              "slot": "52",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:114"
            },
            {
              "label": "baseFee",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:129"
            },
            {
              "label": "_poolIndex",
              "offset": 0,
              "slot": "54",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "55",
              "type": "t_address_payable",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "56",
              "type": "t_contract(IRegistry)4234",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:133"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "57",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:134"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "58",
              "type": "t_mapping(t_uint256,t_struct(Pool)3753_storage)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:135"
            },
            {
              "label": "cloneableStrategies",
              "offset": 0,
              "slot": "59",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)4405": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)3753_storage)": {
              "label": "mapping(uint256 => struct IAllo.Pool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Pool)3753_storage": {
              "label": "struct IAllo.Pool",
              "members": [
                {
                  "label": "profileId",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "strategy",
                  "type": "t_contract(IStrategy)4405",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "managerRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)19902_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Anchor.sol:Anchor": {
        "src": "contracts/core/Anchor.sol:89",
        "version": {
          "withMetadata": "ae98179a1790eadc5aa013659261480920879a86d98d517f2fd0aedfb0078afa",
          "withoutMetadata": "ae98179a1790eadc5aa013659261480920879a86d98d517f2fd0aedfb0078afa",
          "linkedWithoutMetadata": "ae98179a1790eadc5aa013659261480920879a86d98d517f2fd0aedfb0078afa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "execute(address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Anchor",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "profileId",
            "src": "contracts/core/Anchor.sol:89"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Registry.sol:Registry": {
        "src": "contracts/core/Registry.sol:103",
        "version": {
          "withMetadata": "08a50327755ba3c6963d5ec93be2b6629ab281b7fa8de1b743ab3771f69d408e",
          "withoutMetadata": "08a50327755ba3c6963d5ec93be2b6629ab281b7fa8de1b743ab3771f69d408e",
          "linkedWithoutMetadata": "08a50327755ba3c6963d5ec93be2b6629ab281b7fa8de1b743ab3771f69d408e"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "contracts/core/libraries/Native.sol:Native",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "contracts/core/interfaces/IRegistry.sol:IRegistry"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "anchorToProfileId",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:109"
            },
            {
              "label": "profilesById",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_struct(Profile)4061_storage)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:111"
            },
            {
              "label": "profileIdToPendingOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:113"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Profile)4061_storage)": {
              "label": "mapping(bytes32 => struct IRegistry.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Profile)4061_storage": {
              "label": "struct IRegistry.Profile",
              "members": [
                {
                  "label": "id",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "anchor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)19902_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IAllo.sol:IAllo": {
        "src": "contracts/core/interfaces/IAllo.sol:97",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "isCloneableStrategy(address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "getPool(uint256)",
          "getFeeDenominator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IRegistry.sol:IRegistry": {
        "src": "contracts/core/interfaces/IRegistry.sol:92",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/core/interfaces/IStrategy.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "isValidAllocator(address)",
          "isPoolActive()",
          "getPoolAmount()",
          "increasePoolAmount(uint256)",
          "getRecipientStatus(address)",
          "getPayouts(address[],bytes[])",
          "initialize(uint256,bytes)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Clone.sol:Clone": {
        "src": "contracts/core/libraries/Clone.sol:37",
        "version": {
          "withMetadata": "93455563f8049dab8e5e12257c397e96d3718d5185c810b95594bd33d00e1d05",
          "withoutMetadata": "93455563f8049dab8e5e12257c397e96d3718d5185c810b95594bd33d00e1d05",
          "linkedWithoutMetadata": "93455563f8049dab8e5e12257c397e96d3718d5185c810b95594bd33d00e1d05"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Errors.sol:Errors": {
        "src": "contracts/core/libraries/Errors.sol:109",
        "version": {
          "withMetadata": "cf34eab24125e871b298395165687d886c849c6ffffc936e5b4bc24546108553",
          "withoutMetadata": "cf34eab24125e871b298395165687d886c849c6ffffc936e5b4bc24546108553",
          "linkedWithoutMetadata": "cf34eab24125e871b298395165687d886c849c6ffffc936e5b4bc24546108553"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Native.sol:Native": {
        "src": "contracts/core/libraries/Native.sol:26",
        "version": {
          "withMetadata": "6dc17a545e8dfe26b4f1996bdcf525794f38403b7ae517b2fe369793e15e6409",
          "withoutMetadata": "6dc17a545e8dfe26b4f1996bdcf525794f38403b7ae517b2fe369793e15e6409",
          "linkedWithoutMetadata": "6dc17a545e8dfe26b4f1996bdcf525794f38403b7ae517b2fe369793e15e6409"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Transfer.sol:Transfer": {
        "src": "contracts/core/libraries/Transfer.sol:95",
        "version": {
          "withMetadata": "a0d47d4a15570149a400e4d2ff6d61f2ba82aa3ded22dee1385656e9ce432ac5",
          "withoutMetadata": "a0d47d4a15570149a400e4d2ff6d61f2ba82aa3ded22dee1385656e9ce432ac5",
          "linkedWithoutMetadata": "a0d47d4a15570149a400e4d2ff6d61f2ba82aa3ded22dee1385656e9ce432ac5"
        },
        "inherit": [
          "contracts/core/libraries/Native.sol:Native"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/factory/ContractFactory.sol:ContractFactory": {
        "src": "contracts/factory/ContractFactory.sol:107",
        "version": {
          "withMetadata": "632e004fe69342bcf69ccfb67c27d13991eed34df71d79d7ea49a4b0d8371aef",
          "withoutMetadata": "632e004fe69342bcf69ccfb67c27d13991eed34df71d79d7ea49a4b0d8371aef",
          "linkedWithoutMetadata": "632e004fe69342bcf69ccfb67c27d13991eed34df71d79d7ea49a4b0d8371aef"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "deploy(string,string,bytes)",
          "setDeployer(address,bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ContractFactory",
            "src": "contracts/factory/ContractFactory.sol:119"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "usedSalts",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            },
            {
              "label": "isDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/BaseStrategy.sol:BaseStrategy": {
        "src": "contracts/strategies/BaseStrategy.sol:111",
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "getPoolAmount()",
          "isPoolActive()",
          "getRecipientStatus(address)",
          "increasePoolAmount(uint256)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)",
          "getPayouts(address[],bytes[])",
          "isValidAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseStrategy",
            "src": "contracts/strategies/BaseStrategy.sol:129"
          },
          {
            "kind": "state-variable-immutable",
            "name": "allo",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          },
          {
            "kind": "state-variable-immutable",
            "name": "strategyId",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:DirectGrantsSimpleStrategy": {
        "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:112",
        "version": {
          "withMetadata": "39d2d898767c9d2603b37a67845616effb9acd5712bedfd21cb620183a24336b",
          "withoutMetadata": "39d2d898767c9d2603b37a67845616effb9acd5712bedfd21cb620183a24336b",
          "linkedWithoutMetadata": "39d2d898767c9d2603b37a67845616effb9acd5712bedfd21cb620183a24336b"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getMilestoneStatus(address,uint256)",
          "getMilestones(address)",
          "setMilestones(address,struct DirectGrantsSimpleStrategy.Milestone[])",
          "reviewSetMilestones(address,uint8)",
          "submitMilestone(address,uint256,(uint256,string))",
          "rejectMilestone(address,uint256)",
          "setRecipientStatusToInReview(address[])",
          "setPoolActive(bool)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DirectGrantsSimpleStrategy",
            "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:191"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:161"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:162"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:164"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:166"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:167"
            },
            {
              "label": "_acceptedRecipientIds",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:172"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)5493_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:177"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Milestone)5502_storage)dyn_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:179"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:184"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)5502_storage)dyn_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(Milestone)5502_storage)dyn_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Milestone[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5493_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)5502_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)5493_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "milestonesReviewStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:DonationVotingCustomRegistryStrategy": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51",
        "version": {
          "withMetadata": "b79983e114991c252bbf63dc7e6fe161c967398192b61dd0282d00509974f835",
          "withoutMetadata": "b79983e114991c252bbf63dc7e6fe161c967398192b61dd0282d00509974f835",
          "linkedWithoutMetadata": "b79983e114991c252bbf63dc7e6fe161c967398192b61dd0282d00509974f835"
        },
        "inherit": [
          "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingCustomRegistryStrategy",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7094_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(SimpleProjectRegistry)7065",
              "contract": "DonationVotingCustomRegistryStrategy",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(SimpleProjectRegistry)7065": {
              "label": "contract SimpleProjectRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7094_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4252_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7094_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:SimpleProjectRegistry": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:26",
        "version": {
          "withMetadata": "892936641a9e0e772d2de1b6d878f04cda47e33e4885b72beed46d4f7ca9f692",
          "withoutMetadata": "892936641a9e0e772d2de1b6d878f04cda47e33e4885b72beed46d4f7ca9f692",
          "linkedWithoutMetadata": "892936641a9e0e772d2de1b6d878f04cda47e33e4885b72beed46d4f7ca9f692"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addProject(address)",
          "addProjects(address[])",
          "removeProject(address)",
          "removeProjects(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleProjectRegistry",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "projects",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleProjectRegistry",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy": {
        "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:100",
        "version": {
          "withMetadata": "21e709da50b5c519a066d89c33376459e1d7bfb84643f5350789cfc7da45f647",
          "withoutMetadata": "21e709da50b5c519a066d89c33376459e1d7bfb84643f5350789cfc7da45f647",
          "linkedWithoutMetadata": "21e709da50b5c519a066d89c33376459e1d7bfb84643f5350789cfc7da45f647"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "setPayout(address[],uint256[])",
          "claim(struct DonationVotingStrategy.Claim[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingStrategy",
            "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:198"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7094_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7094_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4252_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7094_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:ProportionalPayoutStrategy": {
        "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:112",
        "version": {
          "withMetadata": "71e147977e7d92fc6d8c5daa8901a9a61dd679a1ec0cc345210db9801798e031",
          "withoutMetadata": "71e147977e7d92fc6d8c5daa8901a9a61dd679a1ec0cc345210db9801798e031",
          "linkedWithoutMetadata": "71e147977e7d92fc6d8c5daa8901a9a61dd679a1ec0cc345210db9801798e031"
        },
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "setAllocationTime(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProportionalPayoutStrategy",
            "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:166"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Recipient)8501_storage)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:151"
            },
            {
              "label": "hasAllocated",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:152"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:153"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ERC721)32389",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "maxRecipientsAllowed",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:157"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:158"
            },
            {
              "label": "totalAllocations",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:159"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)32389": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)8501_storage)": {
              "label": "mapping(address => struct ProportionalPayoutStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)8501_storage": {
              "label": "struct ProportionalPayoutStrategy.Recipient",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:QVGovernanceERC20Votes": {
        "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:89",
        "version": {
          "withMetadata": "09a63cc11be392bbd5c22bdd9fc36a5bcafb6fb8d0cf8e8498a10e4318488344",
          "withoutMetadata": "09a63cc11be392bbd5c22bdd9fc36a5bcafb6fb8d0cf8e8498a10e4318488344",
          "linkedWithoutMetadata": "09a63cc11be392bbd5c22bdd9fc36a5bcafb6fb8d0cf8e8498a10e4318488344"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVGovernanceERC20Votes",
            "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:104"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "govToken",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IVotes)20349",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:97"
            },
            {
              "label": "timestamp",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:98"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IVotes)20349": {
              "label": "contract IVotes",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:HackathonQVStrategy": {
        "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:111",
        "version": {
          "withMetadata": "c3d6f98d015c488e7d70b4d0b421a43ae5f5ae27954e96a65c6dfab242066c12",
          "withoutMetadata": "c3d6f98d015c488e7d70b4d0b421a43ae5f5ae27954e96a65c6dfab242066c12",
          "linkedWithoutMetadata": "c3d6f98d015c488e7d70b4d0b421a43ae5f5ae27954e96a65c6dfab242066c12"
        },
        "inherit": [
          "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver",
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllowedRecipientIds(address[],uint64,bytes)",
          "setPayoutPercentages(uint256[])",
          "getPayouts(address[],bytes[])",
          "getAttestation(bytes32)",
          "getSchema(bytes32)",
          "isPayable()",
          "isAttestationExpired(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HackathonQVStrategy",
            "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:148"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "_eas",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IEAS)19040",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            },
            {
              "label": "payoutPercentages",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:130"
            },
            {
              "label": "votesByRank",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:131"
            },
            {
              "label": "easInfo",
              "offset": 0,
              "slot": "14",
              "type": "t_struct(EASInfo)9390_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "19",
              "type": "t_contract(ERC721)32389",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "recipientIdToUID",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:135"
            },
            {
              "label": "recipientIdToIndex",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:137"
            },
            {
              "label": "indexToRecipientId",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:143"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ERC721)32389": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IEAS)19040": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(ISchemaRegistry)19085": {
              "label": "contract ISchemaRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(EASInfo)9390_storage": {
              "label": "struct HackathonQVStrategy.EASInfo",
              "members": [
                {
                  "label": "eas",
                  "type": "t_contract(IEAS)19040",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "schemaRegistry",
                  "type": "t_contract(ISchemaRegistry)19085",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "schemaUID",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "schema",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "revocable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver": {
        "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:19",
        "inherit": [
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver"
        ],
        "libraries": [],
        "methods": [
          "isPayable()",
          "()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_eas",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IEAS)19040",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            }
          ],
          "types": {
            "t_contract(IEAS)19040": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:QVNftTieredStrategy": {
        "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:96",
        "version": {
          "withMetadata": "e0b85773f1c17c7dfd5d99aaf87e8beed34ad8d5ddb76b2e4f89d76261b44e0d",
          "withoutMetadata": "e0b85773f1c17c7dfd5d99aaf87e8beed34ad8d5ddb76b2e4f89d76261b44e0d",
          "linkedWithoutMetadata": "e0b85773f1c17c7dfd5d99aaf87e8beed34ad8d5ddb76b2e4f89d76261b44e0d"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVNftTieredStrategy",
            "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "nfts",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_contract(ERC721)32389)dyn_storage",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:112"
            },
            {
              "label": "maxVoiceCreditsPerNft",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_contract(ERC721)32389,t_uint256)",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:113"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_contract(ERC721)32389,t_mapping(t_uint256,t_uint256))",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(ERC721)32389)dyn_storage": {
              "label": "contract ERC721[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)32389": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)32389,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(contract ERC721 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)32389,t_uint256)": {
              "label": "mapping(contract ERC721 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:LockupDynamicStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:16",
        "version": {
          "withMetadata": "869a0fe6e1556e2288e99d58e5dfba6f2800c9933f7c5921fe1300e2766c7da8",
          "withoutMetadata": "869a0fe6e1556e2288e99d58e5dfba6f2800c9933f7c5921fe1300e2766c7da8",
          "linkedWithoutMetadata": "869a0fe6e1556e2288e99d58e5dfba6f2800c9933f7c5921fe1300e2766c7da8"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientSegments(address,struct LockupDynamic.SegmentWithDelta[])",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupDynamicStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:42"
            },
            {
              "label": "lockupDynamic",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupDynamic)30800",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)30920_storage",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)11146_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(SegmentWithDelta)31004_storage)dyn_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupDynamic)30800": {
              "label": "contract ISablierV2LockupDynamic",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)11146_storage)": {
              "label": "mapping(address => struct LockupDynamicStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)30920_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)30161",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)11146_storage": {
              "label": "struct LockupDynamicStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "segments",
                  "type": "t_array(t_struct(SegmentWithDelta)31004_storage)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(SegmentWithDelta)31004_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exponent",
                  "type": "t_userDefinedValueType(UD2x18)28357",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "delta",
                  "type": "t_uint40",
                  "offset": 24,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD2x18)28357": {
              "label": "UD2x18",
              "numberOfBytes": "8",
              "underlying": "t_uint64"
            },
            "t_userDefinedValueType(UD60x18)30161": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:LockupLinearStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:16",
        "version": {
          "withMetadata": "34171b32d6872627b3b1204bcd64fa8dcd4a57df1733d5fb5e7228665fb3add0",
          "withoutMetadata": "34171b32d6872627b3b1204bcd64fa8dcd4a57df1733d5fb5e7228665fb3add0",
          "linkedWithoutMetadata": "34171b32d6872627b3b1204bcd64fa8dcd4a57df1733d5fb5e7228665fb3add0"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientDurations(address,(uint40,uint40))",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupLinearStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:42"
            },
            {
              "label": "lockupLinear",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupLinear)30889",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)30920_storage",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)12323_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupLinear)30889": {
              "label": "contract ISablierV2LockupLinear",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12323_storage)": {
              "label": "mapping(address => struct LockupLinearStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)30920_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)30161",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Durations)31072_storage": {
              "label": "struct LockupLinear.Durations",
              "members": [
                {
                  "label": "cliff",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "total",
                  "type": "t_uint40",
                  "offset": 5,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12323_storage": {
              "label": "struct LockupLinearStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durations",
                  "type": "t_struct(Durations)31072_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD60x18)30161": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:NFT": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:8",
        "version": {
          "withMetadata": "9fbcf5d3cddbc8f0229df71d0cb069eb8a39aca6fdbe5c87b4d043aa077823a3",
          "withoutMetadata": "9fbcf5d3cddbc8f0229df71d0cb069eb8a39aca6fdbe5c87b4d043aa077823a3",
          "linkedWithoutMetadata": "9fbcf5d3cddbc8f0229df71d0cb069eb8a39aca6fdbe5c87b4d043aa077823a3"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable",
          "solady/src/tokens/ERC721.sol:ERC721"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)",
          "name()",
          "symbol()",
          "mintTo(address)",
          "tokenURI(uint256)",
          "withdrawPayments(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFT",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTokenId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:16"
            },
            {
              "label": "MINT_PRICE",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:17"
            },
            {
              "label": "__name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:20"
            },
            {
              "label": "__symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:NFTFactory": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:6",
        "version": {
          "withMetadata": "a98af5edf92e2153b3d302b3f5cf71e09f900db6408a38a54d7eae1e6e9cda41",
          "withoutMetadata": "a98af5edf92e2153b3d302b3f5cf71e09f900db6408a38a54d7eae1e6e9cda41",
          "linkedWithoutMetadata": "a98af5edf92e2153b3d302b3f5cf71e09f900db6408a38a54d7eae1e6e9cda41"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createNFTContract(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isNFTContract",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NFTFactory",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:WrappedVotingNftMintStrategy": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:100",
        "version": {
          "withMetadata": "6a52a344d16475af17d83fb1e74c1e5150ba71348e84b6af333d328ea4ad5dc8",
          "withoutMetadata": "6a52a344d16475af17d83fb1e74c1e5150ba71348e84b6af333d328ea4ad5dc8",
          "linkedWithoutMetadata": "6a52a344d16475af17d83fb1e74c1e5150ba71348e84b6af333d328ea4ad5dc8"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllocationTimes(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrappedVotingNftMintStrategy",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:147"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "nftFactory",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(NFTFactory)13537",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:134"
            },
            {
              "label": "allocationStartTime",
              "offset": 20,
              "slot": "4",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "currentWinner",
              "offset": 8,
              "slot": "5",
              "type": "t_address",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "allocations",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(NFTFactory)13537": {
              "label": "contract NFTFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:99",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(struct DonationVotingMerkleDistributionBaseStrategy.ApplicationStatus[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "updateDistribution(bytes32,(uint256,string))",
          "isDistributionSet()",
          "hasBeenDistributed(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionBaseStrategy",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:286"
          },
          {
            "kind": "state-variable-immutable",
            "name": "PERMIT2",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:230"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4531_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)14108_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14108_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14108_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:DonationVotingMerkleDistributionDirectTransferStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76",
        "version": {
          "withMetadata": "345c85086d9ac62a1eba8aa5d149a0a56babd13e5d7a2ac6ba94bda0513bb5fd",
          "withoutMetadata": "345c85086d9ac62a1eba8aa5d149a0a56babd13e5d7a2ac6ba94bda0513bb5fd",
          "linkedWithoutMetadata": "345c85086d9ac62a1eba8aa5d149a0a56babd13e5d7a2ac6ba94bda0513bb5fd"
        },
        "inherit": [
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionDirectTransferStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4531_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)14108_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14108_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14108_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:DonationVotingMerkleDistributionVaultStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:92",
        "version": {
          "withMetadata": "6b969f01e19aaea85d320240712ba47eeba58263bcd0c393a31b46bb85d264be",
          "withoutMetadata": "6b969f01e19aaea85d320240712ba47eeba58263bcd0c393a31b46bb85d264be",
          "linkedWithoutMetadata": "6b969f01e19aaea85d320240712ba47eeba58263bcd0c393a31b46bb85d264be"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)",
          "claim(struct DonationVotingMerkleDistributionVaultStrategy.Claim[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionVaultStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4531_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)14108_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "16",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "16",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "18",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "67",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14108_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14108_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy": {
        "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:89",
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVBaseStrategy",
            "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:258"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-simple/QVSimpleStrategy.sol:QVSimpleStrategy": {
        "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:89",
        "version": {
          "withMetadata": "4588b66ea2e170684d80ed7d9b5ec06d0fb62ece2e1f6ec920c56c94c6a37681",
          "withoutMetadata": "4588b66ea2e170684d80ed7d9b5ec06d0fb62ece2e1f6ec920c56c94c6a37681",
          "linkedWithoutMetadata": "4588b66ea2e170684d80ed7d9b5ec06d0fb62ece2e1f6ec920c56c94c6a37681"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "addAllocator(address)",
          "removeAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVSimpleStrategy",
            "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:121"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:108"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:111"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:RFPCommitteeStrategy": {
        "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:83",
        "version": {
          "withMetadata": "6d7ca5a39cc4dde2c34fbe2c1480bead5aed36726f432f54fab460bbe0c174ac",
          "withoutMetadata": "6d7ca5a39cc4dde2c34fbe2c1480bead5aed36726f432f54fab460bbe0c174ac",
          "linkedWithoutMetadata": "6d7ca5a39cc4dde2c34fbe2c1480bead5aed36726f432f54fab460bbe0c174ac"
        },
        "inherit": [
          "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPCommitteeStrategy",
            "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4234",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)17670_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)17661_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "voteThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:104"
            },
            {
              "label": "votedFor",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:109"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:114"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)17670_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17661_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)17670_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)17661_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy": {
        "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:107",
        "version": {
          "withMetadata": "9e54dda36c4105b0238661faa0427b18c677b919302e4edbe96cc22fe8c503ad",
          "withoutMetadata": "9e54dda36c4105b0238661faa0427b18c677b919302e4edbe96cc22fe8c503ad",
          "linkedWithoutMetadata": "9e54dda36c4105b0238661faa0427b18c677b919302e4edbe96cc22fe8c503ad"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getPayouts(address[],bytes[])",
          "getMilestone(uint256)",
          "getMilestoneStatus(uint256)",
          "setPoolActive(bool)",
          "setMilestones(struct RFPSimpleStrategy.Milestone[])",
          "submitUpcomingMilestone((uint256,string))",
          "increaseMaxBid(uint256)",
          "rejectMilestone(uint256)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPSimpleStrategy",
            "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:199"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4234",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)17670_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)17661_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)17670_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Recipient)17661_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)17670_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)17661_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/IEAS.sol:IEAS": {
        "src": "lib/eas-contracts/contracts/IEAS.sol:82",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSchemaRegistry()",
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))",
          "multiAttest(struct MultiAttestationRequest[])",
          "multiAttestByDelegation(struct MultiDelegatedAttestationRequest[])",
          "revoke((bytes32,(bytes32,uint256)))",
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))",
          "multiRevoke(struct MultiRevocationRequest[])",
          "multiRevokeByDelegation(struct MultiDelegatedRevocationRequest[])",
          "timestamp(bytes32)",
          "multiTimestamp(bytes32[])",
          "revokeOffchain(bytes32)",
          "multiRevokeOffchain(bytes32[])",
          "getAttestation(bytes32)",
          "isAttestationValid(bytes32)",
          "getTimestamp(bytes32)",
          "getRevokeOffchain(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol:ISchemaRegistry": {
        "src": "lib/eas-contracts/contracts/ISchemaRegistry.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "register(string,address,bool)",
          "getSchema(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver": {
        "src": "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:19",
        "version": {
          "withMetadata": "1d2d2a9e731126bbe39e90bac00e0e7c6557450fbf432d3765747c7e7c5943e9",
          "withoutMetadata": "1d2d2a9e731126bbe39e90bac00e0e7c6557450fbf432d3765747c7e7c5943e9",
          "linkedWithoutMetadata": "1d2d2a9e731126bbe39e90bac00e0e7c6557450fbf432d3765747c7e7c5943e9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "7c8073e9895f779a6de4c813a020ba0c37c95cfa1c9f8751083bac3c84740315",
          "withoutMetadata": "7c8073e9895f779a6de4c813a020ba0c37c95cfa1c9f8751083bac3c84740315",
          "linkedWithoutMetadata": "7c8073e9895f779a6de4c813a020ba0c37c95cfa1c9f8751083bac3c84740315"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:50",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19902_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "c936612162629c41433880a5a8accb107d58e6b6994adb3a6208cd3c646e22f3",
          "withoutMetadata": "c936612162629c41433880a5a8accb107d58e6b6994adb3a6208cd3c646e22f3",
          "linkedWithoutMetadata": "c936612162629c41433880a5a8accb107d58e6b6994adb3a6208cd3c646e22f3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "6694f2435e88d29c247bea9478935c91db6233a8af3fcd3b1955fd23c9fc4c34",
          "withoutMetadata": "6694f2435e88d29c247bea9478935c91db6233a8af3fcd3b1955fd23c9fc4c34",
          "linkedWithoutMetadata": "6694f2435e88d29c247bea9478935c91db6233a8af3fcd3b1955fd23c9fc4c34"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "7c02ae6ee7db0dcb694106812e79dae358bce7fbffc4ad667ffa3fa32fa739b1",
          "withoutMetadata": "7c02ae6ee7db0dcb694106812e79dae358bce7fbffc4ad667ffa3fa32fa739b1",
          "linkedWithoutMetadata": "7c02ae6ee7db0dcb694106812e79dae358bce7fbffc4ad667ffa3fa32fa739b1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "dee2d557baff49a80acf18b7ee57c6ef3e8d585654eeb2b9fdfc91a56958fee5",
          "withoutMetadata": "dee2d557baff49a80acf18b7ee57c6ef3e8d585654eeb2b9fdfc91a56958fee5",
          "linkedWithoutMetadata": "dee2d557baff49a80acf18b7ee57c6ef3e8d585654eeb2b9fdfc91a56958fee5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9681d062190d9fe6bb74127b866c326e2144a34993b2e6ab44acc23dd805038d",
          "withoutMetadata": "9681d062190d9fe6bb74127b866c326e2144a34993b2e6ab44acc23dd805038d",
          "linkedWithoutMetadata": "9681d062190d9fe6bb74127b866c326e2144a34993b2e6ab44acc23dd805038d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "6ba290626c699f85993ca3f7adbc25a70e99cc09dfb38ebd2674896f13b52ccb",
          "withoutMetadata": "6ba290626c699f85993ca3f7adbc25a70e99cc09dfb38ebd2674896f13b52ccb",
          "linkedWithoutMetadata": "6ba290626c699f85993ca3f7adbc25a70e99cc09dfb38ebd2674896f13b52ccb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/IEIP712.sol:IEIP712": {
        "src": "lib/permit2/src/interfaces/IEIP712.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/ISignatureTransfer.sol:ISignatureTransfer": {
        "src": "lib/permit2/src/interfaces/ISignatureTransfer.sol:9",
        "inherit": [
          "lib/permit2/src/interfaces/IEIP712.sol:IEIP712"
        ],
        "libraries": [],
        "methods": [
          "nonceBitmap(address,uint256)",
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)",
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)",
          "permitTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes)",
          "permitWitnessTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes32,string,bytes)",
          "invalidateUnorderedNonces(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable": {
        "src": "lib/v2-core/src/interfaces/IAdminable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "transferAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Base.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "comptroller()",
          "protocolRevenues(address)",
          "claimProtocolRevenues(address)",
          "setComptroller(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:ISablierV2Comptroller": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "flashFee()",
          "isFlashAsset(address)",
          "protocolFees(address)",
          "setFlashFee(uint256)",
          "setProtocolFee(address,uint256)",
          "toggleFlashAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:13",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getAsset(uint256)",
          "getDepositedAmount(uint256)",
          "getEndTime(uint256)",
          "getRecipient(uint256)",
          "getRefundedAmount(uint256)",
          "getSender(uint256)",
          "getStartTime(uint256)",
          "getWithdrawnAmount(uint256)",
          "isCancelable(uint256)",
          "isCold(uint256)",
          "isDepleted(uint256)",
          "isStream(uint256)",
          "isWarm(uint256)",
          "nextStreamId()",
          "refundableAmountOf(uint256)",
          "statusOf(uint256)",
          "streamedAmountOf(uint256)",
          "wasCanceled(uint256)",
          "withdrawableAmountOf(uint256)",
          "burn(uint256)",
          "cancel(uint256)",
          "cancelMultiple(uint256[])",
          "renounce(uint256)",
          "setNFTDescriptor(address)",
          "withdraw(uint256,address,uint128)",
          "withdrawMax(uint256,address)",
          "withdrawMaxAndTransfer(uint256,address)",
          "withdrawMultiple(uint256[],address,uint128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:ISablierV2LockupDynamic": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_SEGMENT_COUNT()",
          "getRange(uint256)",
          "getSegments(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDeltas((address,bool,address,uint128,address,(address,uint256),struct LockupDynamic.SegmentWithDelta[]))",
          "createWithMilestones((address,uint40,bool,address,uint128,address,(address,uint256),struct LockupDynamic.Segment[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:ISablierV2LockupLinear": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getCliffTime(uint256)",
          "getRange(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))",
          "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:ISablierV2NFTDescriptor": {
        "src": "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:Lockup": {
        "src": "lib/v2-core/src/types/DataTypes.sol:29",
        "version": {
          "withMetadata": "aec1f6285b9fc8ce1accef1cdae56274ebd7066aa48d6a9ca3b55bab867ff880",
          "withoutMetadata": "aec1f6285b9fc8ce1accef1cdae56274ebd7066aa48d6a9ca3b55bab867ff880",
          "linkedWithoutMetadata": "aec1f6285b9fc8ce1accef1cdae56274ebd7066aa48d6a9ca3b55bab867ff880"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupDynamic": {
        "src": "lib/v2-core/src/types/DataTypes.sol:72",
        "version": {
          "withMetadata": "7991dab76e3552502f319534144606b588d0a098682380c3d88af986b860c93f",
          "withoutMetadata": "7991dab76e3552502f319534144606b588d0a098682380c3d88af986b860c93f",
          "linkedWithoutMetadata": "7991dab76e3552502f319534144606b588d0a098682380c3d88af986b860c93f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupLinear": {
        "src": "lib/v2-core/src/types/DataTypes.sol:180",
        "version": {
          "withMetadata": "13567d115319cd24357cc6954d51bcc8b711a3032e9ad978d36923c730ebed5b",
          "withoutMetadata": "13567d115319cd24357cc6954d51bcc8b711a3032e9ad978d36923c730ebed5b",
          "linkedWithoutMetadata": "13567d115319cd24357cc6954d51bcc8b711a3032e9ad978d36923c730ebed5b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/auth/Ownable.sol:Ownable": {
        "src": "solady/src/auth/Ownable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "renounceOwnership()",
          "requestOwnershipHandover()",
          "cancelOwnershipHandover()",
          "completeOwnershipHandover(address)",
          "owner()",
          "ownershipHandoverExpiresAt(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC20.sol:ERC20": {
        "src": "solady/src/tokens/ERC20.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC721.sol:ERC721": {
        "src": "solady/src/tokens/ERC721.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "balanceOf(address)",
          "getApproved(uint256)",
          "approve(address,uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/CREATE3.sol:CREATE3": {
        "src": "solady/src/utils/CREATE3.sol:8",
        "version": {
          "withMetadata": "30437799c7af89c978c88e5ce53b6305d494a03e84ed07a0d1b401015509ca81",
          "withoutMetadata": "30437799c7af89c978c88e5ce53b6305d494a03e84ed07a0d1b401015509ca81",
          "linkedWithoutMetadata": "30437799c7af89c978c88e5ce53b6305d494a03e84ed07a0d1b401015509ca81"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/SafeTransferLib.sol:SafeTransferLib": {
        "src": "solady/src/utils/SafeTransferLib.sol:12",
        "version": {
          "withMetadata": "aee1815cc1145b98c386f5f016b44d58b00deb9e644543d15090c2cf485b768b",
          "withoutMetadata": "aee1815cc1145b98c386f5f016b44d58b00deb9e644543d15090c2cf485b768b",
          "linkedWithoutMetadata": "aee1815cc1145b98c386f5f016b44d58b00deb9e644543d15090c2cf485b768b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "6e6b6dadf481256da5a718ebeb47e2f23b4dcd98599ea736409a7bcc4d5b95b3",
          "withoutMetadata": "6e6b6dadf481256da5a718ebeb47e2f23b4dcd98599ea736409a7bcc4d5b95b3",
          "linkedWithoutMetadata": "6e6b6dadf481256da5a718ebeb47e2f23b4dcd98599ea736409a7bcc4d5b95b3"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "b3aa6b2d0dae890cec41037db495285a8ee6a29922e0d4f48813362c5349a8e7",
          "withoutMetadata": "b3aa6b2d0dae890cec41037db495285a8ee6a29922e0d4f48813362c5349a8e7",
          "linkedWithoutMetadata": "b3aa6b2d0dae890cec41037db495285a8ee6a29922e0d4f48813362c5349a8e7"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "fb740371d8bd7ec2c5093e81bd1eb1769bf3074a7818985c2c144c8020bfe05c",
          "withoutMetadata": "fb740371d8bd7ec2c5093e81bd1eb1769bf3074a7818985c2c144c8020bfe05c",
          "linkedWithoutMetadata": "fb740371d8bd7ec2c5093e81bd1eb1769bf3074a7818985c2c144c8020bfe05c"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "ffb33d09b0c730856232e6e29010110c5d0c6ab6a9cd4cb151662d183a95ca91",
          "withoutMetadata": "ffb33d09b0c730856232e6e29010110c5d0c6ab6a9cd4cb151662d183a95ca91",
          "linkedWithoutMetadata": "ffb33d09b0c730856232e6e29010110c5d0c6ab6a9cd4cb151662d183a95ca91"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "8e3841872bb69de6e2b906edddf2ddcebf30e7c64315ad516ccd9d117054cec3",
          "withoutMetadata": "8e3841872bb69de6e2b906edddf2ddcebf30e7c64315ad516ccd9d117054cec3",
          "linkedWithoutMetadata": "8e3841872bb69de6e2b906edddf2ddcebf30e7c64315ad516ccd9d117054cec3"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "a04db63132492e02b8286b50d6d1fe4aed407db3ae19f48ea835a0644b1c2494",
          "withoutMetadata": "a04db63132492e02b8286b50d6d1fe4aed407db3ae19f48ea835a0644b1c2494",
          "linkedWithoutMetadata": "a04db63132492e02b8286b50d6d1fe4aed407db3ae19f48ea835a0644b1c2494"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "e92a70401db627905aa7734a88b5b0e0f079f418b257f33f62897efb5df8dd5e",
          "withoutMetadata": "e92a70401db627905aa7734a88b5b0e0f079f418b257f33f62897efb5df8dd5e",
          "linkedWithoutMetadata": "e92a70401db627905aa7734a88b5b0e0f079f418b257f33f62897efb5df8dd5e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Allo.sol:Allo": {
        "src": "contracts/core/Allo.sol:89",
        "version": {
          "withMetadata": "1fd326dc0e9452397b7a8469df88e02de32eb0bf759099ff282127800c145fde",
          "withoutMetadata": "1fd326dc0e9452397b7a8469df88e02de32eb0bf759099ff282127800c145fde",
          "linkedWithoutMetadata": "1fd326dc0e9452397b7a8469df88e02de32eb0bf759099ff282127800c145fde"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "solady/src/auth/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IAllo.sol:IAllo"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "getFeeDenominator()",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "isCloneableStrategy(address)",
          "getPool(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "percentFee",
              "offset": 0,
              "slot": "52",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:114"
            },
            {
              "label": "baseFee",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:129"
            },
            {
              "label": "_poolIndex",
              "offset": 0,
              "slot": "54",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "55",
              "type": "t_address_payable",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "56",
              "type": "t_contract(IRegistry)4234",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:133"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "57",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:134"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "58",
              "type": "t_mapping(t_uint256,t_struct(Pool)3753_storage)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:135"
            },
            {
              "label": "cloneableStrategies",
              "offset": 0,
              "slot": "59",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)4405": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)3753_storage)": {
              "label": "mapping(uint256 => struct IAllo.Pool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Pool)3753_storage": {
              "label": "struct IAllo.Pool",
              "members": [
                {
                  "label": "profileId",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "strategy",
                  "type": "t_contract(IStrategy)4405",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "managerRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)19902_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Anchor.sol:Anchor": {
        "src": "contracts/core/Anchor.sol:89",
        "version": {
          "withMetadata": "c8464733f370d2e32a1652bea805a9ea0fbb56b12000818ed1501cd3735b6eef",
          "withoutMetadata": "c8464733f370d2e32a1652bea805a9ea0fbb56b12000818ed1501cd3735b6eef",
          "linkedWithoutMetadata": "c8464733f370d2e32a1652bea805a9ea0fbb56b12000818ed1501cd3735b6eef"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "execute(address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Anchor",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "profileId",
            "src": "contracts/core/Anchor.sol:89"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Registry.sol:Registry": {
        "src": "contracts/core/Registry.sol:103",
        "version": {
          "withMetadata": "911c7298fc6e0bf4813b36ba9cef7fb6c841091009b5eef5d472b2e20cfe2e25",
          "withoutMetadata": "911c7298fc6e0bf4813b36ba9cef7fb6c841091009b5eef5d472b2e20cfe2e25",
          "linkedWithoutMetadata": "911c7298fc6e0bf4813b36ba9cef7fb6c841091009b5eef5d472b2e20cfe2e25"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "contracts/core/libraries/Native.sol:Native",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "contracts/core/interfaces/IRegistry.sol:IRegistry"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "anchorToProfileId",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:109"
            },
            {
              "label": "profilesById",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_struct(Profile)4061_storage)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:111"
            },
            {
              "label": "profileIdToPendingOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:113"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Profile)4061_storage)": {
              "label": "mapping(bytes32 => struct IRegistry.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Profile)4061_storage": {
              "label": "struct IRegistry.Profile",
              "members": [
                {
                  "label": "id",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "anchor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)19902_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IAllo.sol:IAllo": {
        "src": "contracts/core/interfaces/IAllo.sol:97",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "isCloneableStrategy(address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "getPool(uint256)",
          "getFeeDenominator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IRegistry.sol:IRegistry": {
        "src": "contracts/core/interfaces/IRegistry.sol:92",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/core/interfaces/IStrategy.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "isValidAllocator(address)",
          "isPoolActive()",
          "getPoolAmount()",
          "increasePoolAmount(uint256)",
          "getRecipientStatus(address)",
          "getPayouts(address[],bytes[])",
          "initialize(uint256,bytes)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Clone.sol:Clone": {
        "src": "contracts/core/libraries/Clone.sol:37",
        "version": {
          "withMetadata": "dc16aa1fb9dd6b4b9272483f597c275e352f917973188aaca90f40b506e79608",
          "withoutMetadata": "dc16aa1fb9dd6b4b9272483f597c275e352f917973188aaca90f40b506e79608",
          "linkedWithoutMetadata": "dc16aa1fb9dd6b4b9272483f597c275e352f917973188aaca90f40b506e79608"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Errors.sol:Errors": {
        "src": "contracts/core/libraries/Errors.sol:109",
        "version": {
          "withMetadata": "d91404cd60ead4505935cbf5b373b19bf3c98b89baa8896cadfe2257b26204db",
          "withoutMetadata": "d91404cd60ead4505935cbf5b373b19bf3c98b89baa8896cadfe2257b26204db",
          "linkedWithoutMetadata": "d91404cd60ead4505935cbf5b373b19bf3c98b89baa8896cadfe2257b26204db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Native.sol:Native": {
        "src": "contracts/core/libraries/Native.sol:26",
        "version": {
          "withMetadata": "b6e4cc2ca13982649165b7ada17bd81ca180706fdd8cafb679750bb4736d9bfe",
          "withoutMetadata": "b6e4cc2ca13982649165b7ada17bd81ca180706fdd8cafb679750bb4736d9bfe",
          "linkedWithoutMetadata": "b6e4cc2ca13982649165b7ada17bd81ca180706fdd8cafb679750bb4736d9bfe"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Transfer.sol:Transfer": {
        "src": "contracts/core/libraries/Transfer.sol:95",
        "version": {
          "withMetadata": "4de5b07d1febac4a59ce18e1bcad752c839d638846184ff50052ef88155e4544",
          "withoutMetadata": "4de5b07d1febac4a59ce18e1bcad752c839d638846184ff50052ef88155e4544",
          "linkedWithoutMetadata": "4de5b07d1febac4a59ce18e1bcad752c839d638846184ff50052ef88155e4544"
        },
        "inherit": [
          "contracts/core/libraries/Native.sol:Native"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/factory/ContractFactory.sol:ContractFactory": {
        "src": "contracts/factory/ContractFactory.sol:107",
        "version": {
          "withMetadata": "4fa0e8f5edbc09017385034b30b5b987370bca6fdbed909ee21ca3263f43350b",
          "withoutMetadata": "4fa0e8f5edbc09017385034b30b5b987370bca6fdbed909ee21ca3263f43350b",
          "linkedWithoutMetadata": "4fa0e8f5edbc09017385034b30b5b987370bca6fdbed909ee21ca3263f43350b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "deploy(string,string,bytes)",
          "setDeployer(address,bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ContractFactory",
            "src": "contracts/factory/ContractFactory.sol:119"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "usedSalts",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            },
            {
              "label": "isDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/BaseStrategy.sol:BaseStrategy": {
        "src": "contracts/strategies/BaseStrategy.sol:111",
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "getPoolAmount()",
          "isPoolActive()",
          "getRecipientStatus(address)",
          "increasePoolAmount(uint256)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)",
          "getPayouts(address[],bytes[])",
          "isValidAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseStrategy",
            "src": "contracts/strategies/BaseStrategy.sol:129"
          },
          {
            "kind": "state-variable-immutable",
            "name": "allo",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          },
          {
            "kind": "state-variable-immutable",
            "name": "strategyId",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:DirectGrantsSimpleStrategy": {
        "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:112",
        "version": {
          "withMetadata": "3c0fc2fcd7eb59148926f4cf23d9a0b5097d498e88b79df810ec564a89ada852",
          "withoutMetadata": "3c0fc2fcd7eb59148926f4cf23d9a0b5097d498e88b79df810ec564a89ada852",
          "linkedWithoutMetadata": "3c0fc2fcd7eb59148926f4cf23d9a0b5097d498e88b79df810ec564a89ada852"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getMilestoneStatus(address,uint256)",
          "getMilestones(address)",
          "setMilestones(address,struct DirectGrantsSimpleStrategy.Milestone[])",
          "reviewSetMilestones(address,uint8)",
          "submitMilestone(address,uint256,(uint256,string))",
          "rejectMilestone(address,uint256)",
          "setRecipientStatusToInReview(address[])",
          "setPoolActive(bool)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DirectGrantsSimpleStrategy",
            "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:191"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:161"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:162"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:164"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:166"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:167"
            },
            {
              "label": "_acceptedRecipientIds",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:172"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)5493_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:177"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Milestone)5502_storage)dyn_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:179"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:184"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)5502_storage)dyn_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(Milestone)5502_storage)dyn_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Milestone[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5493_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)5502_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)5493_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "milestonesReviewStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:DonationVotingCustomRegistryStrategy": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51",
        "version": {
          "withMetadata": "5436430857dc9cbd25729b19154f8f2a416e11662c36f73bb0689f1ed88a435a",
          "withoutMetadata": "5436430857dc9cbd25729b19154f8f2a416e11662c36f73bb0689f1ed88a435a",
          "linkedWithoutMetadata": "5436430857dc9cbd25729b19154f8f2a416e11662c36f73bb0689f1ed88a435a"
        },
        "inherit": [
          "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingCustomRegistryStrategy",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7094_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(SimpleProjectRegistry)7065",
              "contract": "DonationVotingCustomRegistryStrategy",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(SimpleProjectRegistry)7065": {
              "label": "contract SimpleProjectRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7094_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4252_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7094_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:SimpleProjectRegistry": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:26",
        "version": {
          "withMetadata": "4872ecc84acced32728eed6343875a4d2bfaa01fdd643e8f15da29efd11e4b66",
          "withoutMetadata": "4872ecc84acced32728eed6343875a4d2bfaa01fdd643e8f15da29efd11e4b66",
          "linkedWithoutMetadata": "4872ecc84acced32728eed6343875a4d2bfaa01fdd643e8f15da29efd11e4b66"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addProject(address)",
          "addProjects(address[])",
          "removeProject(address)",
          "removeProjects(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleProjectRegistry",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "projects",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleProjectRegistry",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy": {
        "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:100",
        "version": {
          "withMetadata": "7dba3a5ab68843aa26556498acde934160834e54fd4f950e08a39ca52bd0c942",
          "withoutMetadata": "7dba3a5ab68843aa26556498acde934160834e54fd4f950e08a39ca52bd0c942",
          "linkedWithoutMetadata": "7dba3a5ab68843aa26556498acde934160834e54fd4f950e08a39ca52bd0c942"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "setPayout(address[],uint256[])",
          "claim(struct DonationVotingStrategy.Claim[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingStrategy",
            "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:198"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7094_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7094_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4252_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7094_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:ProportionalPayoutStrategy": {
        "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:112",
        "version": {
          "withMetadata": "47b6c4732b7532505ee90a002b1c3e4429ef81452c3fc2a193702e9478143163",
          "withoutMetadata": "47b6c4732b7532505ee90a002b1c3e4429ef81452c3fc2a193702e9478143163",
          "linkedWithoutMetadata": "47b6c4732b7532505ee90a002b1c3e4429ef81452c3fc2a193702e9478143163"
        },
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "setAllocationTime(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProportionalPayoutStrategy",
            "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:166"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Recipient)8501_storage)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:151"
            },
            {
              "label": "hasAllocated",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:152"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:153"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ERC721)32389",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "maxRecipientsAllowed",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:157"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:158"
            },
            {
              "label": "totalAllocations",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:159"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)32389": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)8501_storage)": {
              "label": "mapping(address => struct ProportionalPayoutStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)8501_storage": {
              "label": "struct ProportionalPayoutStrategy.Recipient",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:QVGovernanceERC20Votes": {
        "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:89",
        "version": {
          "withMetadata": "fe3039d435566705ba44de0c2bc10dc2f582b488503906316b12e363420046e6",
          "withoutMetadata": "fe3039d435566705ba44de0c2bc10dc2f582b488503906316b12e363420046e6",
          "linkedWithoutMetadata": "fe3039d435566705ba44de0c2bc10dc2f582b488503906316b12e363420046e6"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVGovernanceERC20Votes",
            "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:104"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "govToken",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IVotes)20349",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:97"
            },
            {
              "label": "timestamp",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:98"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IVotes)20349": {
              "label": "contract IVotes",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:HackathonQVStrategy": {
        "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:111",
        "version": {
          "withMetadata": "337c0d03719a5a2d0d2b2d1712cc225a491302e6b6b4646116221ad6796448e4",
          "withoutMetadata": "337c0d03719a5a2d0d2b2d1712cc225a491302e6b6b4646116221ad6796448e4",
          "linkedWithoutMetadata": "337c0d03719a5a2d0d2b2d1712cc225a491302e6b6b4646116221ad6796448e4"
        },
        "inherit": [
          "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver",
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllowedRecipientIds(address[],uint64,bytes)",
          "setPayoutPercentages(uint256[])",
          "getPayouts(address[],bytes[])",
          "getAttestation(bytes32)",
          "getSchema(bytes32)",
          "isPayable()",
          "isAttestationExpired(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HackathonQVStrategy",
            "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:148"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "_eas",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IEAS)19040",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            },
            {
              "label": "payoutPercentages",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:130"
            },
            {
              "label": "votesByRank",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:131"
            },
            {
              "label": "easInfo",
              "offset": 0,
              "slot": "14",
              "type": "t_struct(EASInfo)9390_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "19",
              "type": "t_contract(ERC721)32389",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "recipientIdToUID",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:135"
            },
            {
              "label": "recipientIdToIndex",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:137"
            },
            {
              "label": "indexToRecipientId",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:143"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ERC721)32389": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IEAS)19040": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(ISchemaRegistry)19085": {
              "label": "contract ISchemaRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(EASInfo)9390_storage": {
              "label": "struct HackathonQVStrategy.EASInfo",
              "members": [
                {
                  "label": "eas",
                  "type": "t_contract(IEAS)19040",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "schemaRegistry",
                  "type": "t_contract(ISchemaRegistry)19085",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "schemaUID",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "schema",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "revocable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver": {
        "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:19",
        "inherit": [
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver"
        ],
        "libraries": [],
        "methods": [
          "isPayable()",
          "()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_eas",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IEAS)19040",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            }
          ],
          "types": {
            "t_contract(IEAS)19040": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:QVNftTieredStrategy": {
        "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:96",
        "version": {
          "withMetadata": "8ce2b2d04d2cbc4075c9e192aae0f21ad758c8bf41c6bf9f171411cecbff895b",
          "withoutMetadata": "8ce2b2d04d2cbc4075c9e192aae0f21ad758c8bf41c6bf9f171411cecbff895b",
          "linkedWithoutMetadata": "8ce2b2d04d2cbc4075c9e192aae0f21ad758c8bf41c6bf9f171411cecbff895b"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVNftTieredStrategy",
            "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "nfts",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_contract(ERC721)32389)dyn_storage",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:112"
            },
            {
              "label": "maxVoiceCreditsPerNft",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_contract(ERC721)32389,t_uint256)",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:113"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_contract(ERC721)32389,t_mapping(t_uint256,t_uint256))",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(ERC721)32389)dyn_storage": {
              "label": "contract ERC721[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)32389": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)32389,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(contract ERC721 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)32389,t_uint256)": {
              "label": "mapping(contract ERC721 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:LockupDynamicStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:16",
        "version": {
          "withMetadata": "78a29a28f36ddff7c429a2ee168decae3bf8daa6a77af68ae71724fdafb8ef7f",
          "withoutMetadata": "78a29a28f36ddff7c429a2ee168decae3bf8daa6a77af68ae71724fdafb8ef7f",
          "linkedWithoutMetadata": "78a29a28f36ddff7c429a2ee168decae3bf8daa6a77af68ae71724fdafb8ef7f"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientSegments(address,struct LockupDynamic.SegmentWithDelta[])",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupDynamicStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:42"
            },
            {
              "label": "lockupDynamic",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupDynamic)30800",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)30920_storage",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)11146_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(SegmentWithDelta)31004_storage)dyn_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupDynamic)30800": {
              "label": "contract ISablierV2LockupDynamic",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)11146_storage)": {
              "label": "mapping(address => struct LockupDynamicStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)30920_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)30161",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)11146_storage": {
              "label": "struct LockupDynamicStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "segments",
                  "type": "t_array(t_struct(SegmentWithDelta)31004_storage)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(SegmentWithDelta)31004_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exponent",
                  "type": "t_userDefinedValueType(UD2x18)28357",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "delta",
                  "type": "t_uint40",
                  "offset": 24,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD2x18)28357": {
              "label": "UD2x18",
              "numberOfBytes": "8",
              "underlying": "t_uint64"
            },
            "t_userDefinedValueType(UD60x18)30161": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:LockupLinearStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:16",
        "version": {
          "withMetadata": "bfeeb0651fead05e0c72afae72706b21657fa2de9edf67a1012c76c3864e90d6",
          "withoutMetadata": "bfeeb0651fead05e0c72afae72706b21657fa2de9edf67a1012c76c3864e90d6",
          "linkedWithoutMetadata": "bfeeb0651fead05e0c72afae72706b21657fa2de9edf67a1012c76c3864e90d6"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientDurations(address,(uint40,uint40))",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupLinearStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:42"
            },
            {
              "label": "lockupLinear",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupLinear)30889",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)30920_storage",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)12323_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupLinear)30889": {
              "label": "contract ISablierV2LockupLinear",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12323_storage)": {
              "label": "mapping(address => struct LockupLinearStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)30920_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)30161",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Durations)31072_storage": {
              "label": "struct LockupLinear.Durations",
              "members": [
                {
                  "label": "cliff",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "total",
                  "type": "t_uint40",
                  "offset": 5,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12323_storage": {
              "label": "struct LockupLinearStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durations",
                  "type": "t_struct(Durations)31072_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD60x18)30161": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:NFT": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:8",
        "version": {
          "withMetadata": "1d96dede4e4bf1a487a335c1a7f41b8ceb1dde94a7175cfe1b65a0276db974ef",
          "withoutMetadata": "1d96dede4e4bf1a487a335c1a7f41b8ceb1dde94a7175cfe1b65a0276db974ef",
          "linkedWithoutMetadata": "1d96dede4e4bf1a487a335c1a7f41b8ceb1dde94a7175cfe1b65a0276db974ef"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable",
          "solady/src/tokens/ERC721.sol:ERC721"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)",
          "name()",
          "symbol()",
          "mintTo(address)",
          "tokenURI(uint256)",
          "withdrawPayments(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFT",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTokenId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:16"
            },
            {
              "label": "MINT_PRICE",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:17"
            },
            {
              "label": "__name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:20"
            },
            {
              "label": "__symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:NFTFactory": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:6",
        "version": {
          "withMetadata": "aa5d8ba55d2e9bddefa5d7dd4fead5d7ab79f2686e534557832aa8e5bdbbd445",
          "withoutMetadata": "aa5d8ba55d2e9bddefa5d7dd4fead5d7ab79f2686e534557832aa8e5bdbbd445",
          "linkedWithoutMetadata": "aa5d8ba55d2e9bddefa5d7dd4fead5d7ab79f2686e534557832aa8e5bdbbd445"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createNFTContract(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isNFTContract",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NFTFactory",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:WrappedVotingNftMintStrategy": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:100",
        "version": {
          "withMetadata": "8db4ed40895f39ee1913a60d6fec3f3cd3a6c082b04f191a55b0dd3edd52a030",
          "withoutMetadata": "8db4ed40895f39ee1913a60d6fec3f3cd3a6c082b04f191a55b0dd3edd52a030",
          "linkedWithoutMetadata": "8db4ed40895f39ee1913a60d6fec3f3cd3a6c082b04f191a55b0dd3edd52a030"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllocationTimes(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrappedVotingNftMintStrategy",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:147"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "nftFactory",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(NFTFactory)13537",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:134"
            },
            {
              "label": "allocationStartTime",
              "offset": 20,
              "slot": "4",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "currentWinner",
              "offset": 8,
              "slot": "5",
              "type": "t_address",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "allocations",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(NFTFactory)13537": {
              "label": "contract NFTFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:99",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(struct DonationVotingMerkleDistributionBaseStrategy.ApplicationStatus[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "updateDistribution(bytes32,(uint256,string))",
          "isDistributionSet()",
          "hasBeenDistributed(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionBaseStrategy",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:286"
          },
          {
            "kind": "state-variable-immutable",
            "name": "PERMIT2",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:230"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4531_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)14108_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14108_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14108_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:DonationVotingMerkleDistributionDirectTransferStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76",
        "version": {
          "withMetadata": "e6832de21474c500956967331c1c1fb2e065816bcbc49e6f30ec644620d9367a",
          "withoutMetadata": "e6832de21474c500956967331c1c1fb2e065816bcbc49e6f30ec644620d9367a",
          "linkedWithoutMetadata": "e6832de21474c500956967331c1c1fb2e065816bcbc49e6f30ec644620d9367a"
        },
        "inherit": [
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionDirectTransferStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4531_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)14108_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14108_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14108_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:DonationVotingMerkleDistributionVaultStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:92",
        "version": {
          "withMetadata": "a5219a82b1a79832a2da5b55044857a54cbe9fd0e75d93d6634708ef5895b194",
          "withoutMetadata": "a5219a82b1a79832a2da5b55044857a54cbe9fd0e75d93d6634708ef5895b194",
          "linkedWithoutMetadata": "a5219a82b1a79832a2da5b55044857a54cbe9fd0e75d93d6634708ef5895b194"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)",
          "claim(struct DonationVotingMerkleDistributionVaultStrategy.Claim[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionVaultStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4531_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)14108_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "16",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "16",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "18",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "67",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14108_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14108_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy": {
        "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:89",
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVBaseStrategy",
            "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:258"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-simple/QVSimpleStrategy.sol:QVSimpleStrategy": {
        "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:89",
        "version": {
          "withMetadata": "aacb8075e5bd0625fa1640d479dd384cb2d1a20820fe83aa04e6a7feb520ba2f",
          "withoutMetadata": "aacb8075e5bd0625fa1640d479dd384cb2d1a20820fe83aa04e6a7feb520ba2f",
          "linkedWithoutMetadata": "aacb8075e5bd0625fa1640d479dd384cb2d1a20820fe83aa04e6a7feb520ba2f"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "addAllocator(address)",
          "removeAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVSimpleStrategy",
            "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:121"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:108"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:111"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:RFPCommitteeStrategy": {
        "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:83",
        "version": {
          "withMetadata": "fabb72fa13ca42e8713616a60823dca80a6199879487dd1b3219225aeee674b6",
          "withoutMetadata": "fabb72fa13ca42e8713616a60823dca80a6199879487dd1b3219225aeee674b6",
          "linkedWithoutMetadata": "fabb72fa13ca42e8713616a60823dca80a6199879487dd1b3219225aeee674b6"
        },
        "inherit": [
          "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPCommitteeStrategy",
            "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4234",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)17670_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)17661_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "voteThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:104"
            },
            {
              "label": "votedFor",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:109"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:114"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)17670_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17661_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)17670_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)17661_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy": {
        "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:107",
        "version": {
          "withMetadata": "14c4702620d2a24cf0252e5a06c37de9594d71fe84e9fbf0cff0a775ebab83cc",
          "withoutMetadata": "14c4702620d2a24cf0252e5a06c37de9594d71fe84e9fbf0cff0a775ebab83cc",
          "linkedWithoutMetadata": "14c4702620d2a24cf0252e5a06c37de9594d71fe84e9fbf0cff0a775ebab83cc"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getPayouts(address[],bytes[])",
          "getMilestone(uint256)",
          "getMilestoneStatus(uint256)",
          "setPoolActive(bool)",
          "setMilestones(struct RFPSimpleStrategy.Milestone[])",
          "submitUpcomingMilestone((uint256,string))",
          "increaseMaxBid(uint256)",
          "rejectMilestone(uint256)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPSimpleStrategy",
            "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:199"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4234",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)17670_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)17661_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)17670_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Recipient)17661_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)17670_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)17661_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/IEAS.sol:IEAS": {
        "src": "lib/eas-contracts/contracts/IEAS.sol:82",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSchemaRegistry()",
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))",
          "multiAttest(struct MultiAttestationRequest[])",
          "multiAttestByDelegation(struct MultiDelegatedAttestationRequest[])",
          "revoke((bytes32,(bytes32,uint256)))",
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))",
          "multiRevoke(struct MultiRevocationRequest[])",
          "multiRevokeByDelegation(struct MultiDelegatedRevocationRequest[])",
          "timestamp(bytes32)",
          "multiTimestamp(bytes32[])",
          "revokeOffchain(bytes32)",
          "multiRevokeOffchain(bytes32[])",
          "getAttestation(bytes32)",
          "isAttestationValid(bytes32)",
          "getTimestamp(bytes32)",
          "getRevokeOffchain(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol:ISchemaRegistry": {
        "src": "lib/eas-contracts/contracts/ISchemaRegistry.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "register(string,address,bool)",
          "getSchema(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver": {
        "src": "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:19",
        "version": {
          "withMetadata": "ed16f8429eb254d93d9630c2d2344a49a2a1851803d9bfa0370770923da86197",
          "withoutMetadata": "ed16f8429eb254d93d9630c2d2344a49a2a1851803d9bfa0370770923da86197",
          "linkedWithoutMetadata": "ed16f8429eb254d93d9630c2d2344a49a2a1851803d9bfa0370770923da86197"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "1f8def96aa7a82e95878f61f697fb087b9e4ddfda2277db9d45f856d0a1d4562",
          "withoutMetadata": "1f8def96aa7a82e95878f61f697fb087b9e4ddfda2277db9d45f856d0a1d4562",
          "linkedWithoutMetadata": "1f8def96aa7a82e95878f61f697fb087b9e4ddfda2277db9d45f856d0a1d4562"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:50",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19902_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "0d4cf4baed82839eb852a6f9e82eb53e59cb876e75a90b36d70e45016331267f",
          "withoutMetadata": "0d4cf4baed82839eb852a6f9e82eb53e59cb876e75a90b36d70e45016331267f",
          "linkedWithoutMetadata": "0d4cf4baed82839eb852a6f9e82eb53e59cb876e75a90b36d70e45016331267f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "76b6a2d9fed7655756962087153015babe29bd98f3a08ff2447561fb430faa10",
          "withoutMetadata": "76b6a2d9fed7655756962087153015babe29bd98f3a08ff2447561fb430faa10",
          "linkedWithoutMetadata": "76b6a2d9fed7655756962087153015babe29bd98f3a08ff2447561fb430faa10"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "ab9dde492f795b94a8f7797f8d3a8dcc3d0ed91e55584caeb7c7a0d8aed2514a",
          "withoutMetadata": "ab9dde492f795b94a8f7797f8d3a8dcc3d0ed91e55584caeb7c7a0d8aed2514a",
          "linkedWithoutMetadata": "ab9dde492f795b94a8f7797f8d3a8dcc3d0ed91e55584caeb7c7a0d8aed2514a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "8f85ccd77a8097742925e67e249116e51ca4d73921171937c0e07e4a15f7ecab",
          "withoutMetadata": "8f85ccd77a8097742925e67e249116e51ca4d73921171937c0e07e4a15f7ecab",
          "linkedWithoutMetadata": "8f85ccd77a8097742925e67e249116e51ca4d73921171937c0e07e4a15f7ecab"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "a7ca15121e0b9a05cf300ae7132e86543ccba4d722fce3efeea4df175094c354",
          "withoutMetadata": "a7ca15121e0b9a05cf300ae7132e86543ccba4d722fce3efeea4df175094c354",
          "linkedWithoutMetadata": "a7ca15121e0b9a05cf300ae7132e86543ccba4d722fce3efeea4df175094c354"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "ef4d490b822cc99cbe5f4e65c2c7a533b01f5759c661f7b2c993a5b8f2501ebe",
          "withoutMetadata": "ef4d490b822cc99cbe5f4e65c2c7a533b01f5759c661f7b2c993a5b8f2501ebe",
          "linkedWithoutMetadata": "ef4d490b822cc99cbe5f4e65c2c7a533b01f5759c661f7b2c993a5b8f2501ebe"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/IEIP712.sol:IEIP712": {
        "src": "lib/permit2/src/interfaces/IEIP712.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/ISignatureTransfer.sol:ISignatureTransfer": {
        "src": "lib/permit2/src/interfaces/ISignatureTransfer.sol:9",
        "inherit": [
          "lib/permit2/src/interfaces/IEIP712.sol:IEIP712"
        ],
        "libraries": [],
        "methods": [
          "nonceBitmap(address,uint256)",
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)",
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)",
          "permitTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes)",
          "permitWitnessTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes32,string,bytes)",
          "invalidateUnorderedNonces(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable": {
        "src": "lib/v2-core/src/interfaces/IAdminable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "transferAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Base.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "comptroller()",
          "protocolRevenues(address)",
          "claimProtocolRevenues(address)",
          "setComptroller(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:ISablierV2Comptroller": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "flashFee()",
          "isFlashAsset(address)",
          "protocolFees(address)",
          "setFlashFee(uint256)",
          "setProtocolFee(address,uint256)",
          "toggleFlashAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:13",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getAsset(uint256)",
          "getDepositedAmount(uint256)",
          "getEndTime(uint256)",
          "getRecipient(uint256)",
          "getRefundedAmount(uint256)",
          "getSender(uint256)",
          "getStartTime(uint256)",
          "getWithdrawnAmount(uint256)",
          "isCancelable(uint256)",
          "isCold(uint256)",
          "isDepleted(uint256)",
          "isStream(uint256)",
          "isWarm(uint256)",
          "nextStreamId()",
          "refundableAmountOf(uint256)",
          "statusOf(uint256)",
          "streamedAmountOf(uint256)",
          "wasCanceled(uint256)",
          "withdrawableAmountOf(uint256)",
          "burn(uint256)",
          "cancel(uint256)",
          "cancelMultiple(uint256[])",
          "renounce(uint256)",
          "setNFTDescriptor(address)",
          "withdraw(uint256,address,uint128)",
          "withdrawMax(uint256,address)",
          "withdrawMaxAndTransfer(uint256,address)",
          "withdrawMultiple(uint256[],address,uint128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:ISablierV2LockupDynamic": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_SEGMENT_COUNT()",
          "getRange(uint256)",
          "getSegments(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDeltas((address,bool,address,uint128,address,(address,uint256),struct LockupDynamic.SegmentWithDelta[]))",
          "createWithMilestones((address,uint40,bool,address,uint128,address,(address,uint256),struct LockupDynamic.Segment[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:ISablierV2LockupLinear": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getCliffTime(uint256)",
          "getRange(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))",
          "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:ISablierV2NFTDescriptor": {
        "src": "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:Lockup": {
        "src": "lib/v2-core/src/types/DataTypes.sol:29",
        "version": {
          "withMetadata": "ef8dc1b1fc67ff7ed0bb9c3cc767cf2d8a0deb1a39286158b8016c9d1dc56956",
          "withoutMetadata": "ef8dc1b1fc67ff7ed0bb9c3cc767cf2d8a0deb1a39286158b8016c9d1dc56956",
          "linkedWithoutMetadata": "ef8dc1b1fc67ff7ed0bb9c3cc767cf2d8a0deb1a39286158b8016c9d1dc56956"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupDynamic": {
        "src": "lib/v2-core/src/types/DataTypes.sol:72",
        "version": {
          "withMetadata": "ee2e3b7d2092b3c4e547e5df35693377861bb3b269f1425d0fd93bf07f237125",
          "withoutMetadata": "ee2e3b7d2092b3c4e547e5df35693377861bb3b269f1425d0fd93bf07f237125",
          "linkedWithoutMetadata": "ee2e3b7d2092b3c4e547e5df35693377861bb3b269f1425d0fd93bf07f237125"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupLinear": {
        "src": "lib/v2-core/src/types/DataTypes.sol:180",
        "version": {
          "withMetadata": "555688ae1daca598f547d0a82f93ad62e41d1fc7db3d89b9a435eaa9873b3b6b",
          "withoutMetadata": "555688ae1daca598f547d0a82f93ad62e41d1fc7db3d89b9a435eaa9873b3b6b",
          "linkedWithoutMetadata": "555688ae1daca598f547d0a82f93ad62e41d1fc7db3d89b9a435eaa9873b3b6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/auth/Ownable.sol:Ownable": {
        "src": "solady/src/auth/Ownable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "renounceOwnership()",
          "requestOwnershipHandover()",
          "cancelOwnershipHandover()",
          "completeOwnershipHandover(address)",
          "owner()",
          "ownershipHandoverExpiresAt(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC20.sol:ERC20": {
        "src": "solady/src/tokens/ERC20.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC721.sol:ERC721": {
        "src": "solady/src/tokens/ERC721.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "balanceOf(address)",
          "getApproved(uint256)",
          "approve(address,uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/CREATE3.sol:CREATE3": {
        "src": "solady/src/utils/CREATE3.sol:8",
        "version": {
          "withMetadata": "4eefab8a49edfc43346a3cd34173d22ca90a5cc1524d6842f86e7a459d0130d6",
          "withoutMetadata": "4eefab8a49edfc43346a3cd34173d22ca90a5cc1524d6842f86e7a459d0130d6",
          "linkedWithoutMetadata": "4eefab8a49edfc43346a3cd34173d22ca90a5cc1524d6842f86e7a459d0130d6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/SafeTransferLib.sol:SafeTransferLib": {
        "src": "solady/src/utils/SafeTransferLib.sol:12",
        "version": {
          "withMetadata": "c43e1383ef3d8e1a40d60d83ec455ce207f2c76fd422e4a516d243f0cad20e86",
          "withoutMetadata": "c43e1383ef3d8e1a40d60d83ec455ce207f2c76fd422e4a516d243f0cad20e86",
          "linkedWithoutMetadata": "c43e1383ef3d8e1a40d60d83ec455ce207f2c76fd422e4a516d243f0cad20e86"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "df878802c17702b9939190e59d6a0dd7e7d13e6fcba4edc998868b2ce3d5e161",
          "withoutMetadata": "df878802c17702b9939190e59d6a0dd7e7d13e6fcba4edc998868b2ce3d5e161",
          "linkedWithoutMetadata": "df878802c17702b9939190e59d6a0dd7e7d13e6fcba4edc998868b2ce3d5e161"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "49870c267861c05cd8851a77a18693ff9afc1b813d708a024b11a5fd11e6cbbd",
          "withoutMetadata": "49870c267861c05cd8851a77a18693ff9afc1b813d708a024b11a5fd11e6cbbd",
          "linkedWithoutMetadata": "49870c267861c05cd8851a77a18693ff9afc1b813d708a024b11a5fd11e6cbbd"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "7311e22e67d3e0985e1d9c6412f73bb7143b013bace73c620b759f0b4bded87a",
          "withoutMetadata": "7311e22e67d3e0985e1d9c6412f73bb7143b013bace73c620b759f0b4bded87a",
          "linkedWithoutMetadata": "7311e22e67d3e0985e1d9c6412f73bb7143b013bace73c620b759f0b4bded87a"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "d0614e13d02020e7b61eea4f5b1883c7ea75979b88d26e83deca96797439c019",
          "withoutMetadata": "d0614e13d02020e7b61eea4f5b1883c7ea75979b88d26e83deca96797439c019",
          "linkedWithoutMetadata": "d0614e13d02020e7b61eea4f5b1883c7ea75979b88d26e83deca96797439c019"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "2a71c32e332df633d3ff6bb9d45333666432674b0dc212b28731ca5008d2210f",
          "withoutMetadata": "2a71c32e332df633d3ff6bb9d45333666432674b0dc212b28731ca5008d2210f",
          "linkedWithoutMetadata": "2a71c32e332df633d3ff6bb9d45333666432674b0dc212b28731ca5008d2210f"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "5c2650967379de439d1eb4f4398e9ba0fb06a752ebf5d90dd95a2971e8201749",
          "withoutMetadata": "5c2650967379de439d1eb4f4398e9ba0fb06a752ebf5d90dd95a2971e8201749",
          "linkedWithoutMetadata": "5c2650967379de439d1eb4f4398e9ba0fb06a752ebf5d90dd95a2971e8201749"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "f006eaba308a27f94f0952f78e301b7333f863ae4e1d47cb722291acc4ab9b15",
          "withoutMetadata": "f006eaba308a27f94f0952f78e301b7333f863ae4e1d47cb722291acc4ab9b15",
          "linkedWithoutMetadata": "f006eaba308a27f94f0952f78e301b7333f863ae4e1d47cb722291acc4ab9b15"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Allo.sol:Allo": {
        "src": "contracts/core/Allo.sol:89",
        "version": {
          "withMetadata": "6f13e85c69cd3fe5914d666be2e9b8945bab5edc27adde21c32c235a026a4ce1",
          "withoutMetadata": "6f13e85c69cd3fe5914d666be2e9b8945bab5edc27adde21c32c235a026a4ce1",
          "linkedWithoutMetadata": "6f13e85c69cd3fe5914d666be2e9b8945bab5edc27adde21c32c235a026a4ce1"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "solady/src/auth/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IAllo.sol:IAllo"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "getFeeDenominator()",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "isCloneableStrategy(address)",
          "getPool(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19903_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "percentFee",
              "offset": 0,
              "slot": "52",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:114"
            },
            {
              "label": "baseFee",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:129"
            },
            {
              "label": "_poolIndex",
              "offset": 0,
              "slot": "54",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "55",
              "type": "t_address_payable",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "56",
              "type": "t_contract(IRegistry)4234",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:133"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "57",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:134"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "58",
              "type": "t_mapping(t_uint256,t_struct(Pool)3753_storage)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:135"
            },
            {
              "label": "cloneableStrategies",
              "offset": 0,
              "slot": "59",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)4405": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19903_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)3753_storage)": {
              "label": "mapping(uint256 => struct IAllo.Pool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Pool)3753_storage": {
              "label": "struct IAllo.Pool",
              "members": [
                {
                  "label": "profileId",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "strategy",
                  "type": "t_contract(IStrategy)4405",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "managerRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)19903_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Anchor.sol:Anchor": {
        "src": "contracts/core/Anchor.sol:89",
        "version": {
          "withMetadata": "612d1e183db7e5c51df32dcc5486e0fa72ed8341f9b2db7f95269595c087d4be",
          "withoutMetadata": "612d1e183db7e5c51df32dcc5486e0fa72ed8341f9b2db7f95269595c087d4be",
          "linkedWithoutMetadata": "612d1e183db7e5c51df32dcc5486e0fa72ed8341f9b2db7f95269595c087d4be"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "execute(address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Anchor",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "profileId",
            "src": "contracts/core/Anchor.sol:89"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Registry.sol:Registry": {
        "src": "contracts/core/Registry.sol:103",
        "version": {
          "withMetadata": "62e79c123ebb73199bf97ca06f207368292fe8e246dcb65f1cba0b4b0d240788",
          "withoutMetadata": "62e79c123ebb73199bf97ca06f207368292fe8e246dcb65f1cba0b4b0d240788",
          "linkedWithoutMetadata": "62e79c123ebb73199bf97ca06f207368292fe8e246dcb65f1cba0b4b0d240788"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "contracts/core/libraries/Native.sol:Native",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "contracts/core/interfaces/IRegistry.sol:IRegistry"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19903_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "anchorToProfileId",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:109"
            },
            {
              "label": "profilesById",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_struct(Profile)4061_storage)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:111"
            },
            {
              "label": "profileIdToPendingOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:113"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Profile)4061_storage)": {
              "label": "mapping(bytes32 => struct IRegistry.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19903_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Profile)4061_storage": {
              "label": "struct IRegistry.Profile",
              "members": [
                {
                  "label": "id",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "anchor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)19903_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IAllo.sol:IAllo": {
        "src": "contracts/core/interfaces/IAllo.sol:97",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "isCloneableStrategy(address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "getPool(uint256)",
          "getFeeDenominator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IRegistry.sol:IRegistry": {
        "src": "contracts/core/interfaces/IRegistry.sol:92",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/core/interfaces/IStrategy.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "isValidAllocator(address)",
          "isPoolActive()",
          "getPoolAmount()",
          "increasePoolAmount(uint256)",
          "getRecipientStatus(address)",
          "getPayouts(address[],bytes[])",
          "initialize(uint256,bytes)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Clone.sol:Clone": {
        "src": "contracts/core/libraries/Clone.sol:37",
        "version": {
          "withMetadata": "236d86aa7b15e425a2d1615b014efebda6c6a89dd2f419c478eeae3f06661d04",
          "withoutMetadata": "236d86aa7b15e425a2d1615b014efebda6c6a89dd2f419c478eeae3f06661d04",
          "linkedWithoutMetadata": "236d86aa7b15e425a2d1615b014efebda6c6a89dd2f419c478eeae3f06661d04"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Errors.sol:Errors": {
        "src": "contracts/core/libraries/Errors.sol:109",
        "version": {
          "withMetadata": "1d6a3226826e878ef2f1304b4100c6b2e3ac951584622bbf4c64573ba26b6846",
          "withoutMetadata": "1d6a3226826e878ef2f1304b4100c6b2e3ac951584622bbf4c64573ba26b6846",
          "linkedWithoutMetadata": "1d6a3226826e878ef2f1304b4100c6b2e3ac951584622bbf4c64573ba26b6846"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Native.sol:Native": {
        "src": "contracts/core/libraries/Native.sol:26",
        "version": {
          "withMetadata": "8f49bf8218f6d1dd8f4a2f6bc604a9be7f07fe699d47c5cb0d0ce841c4f60316",
          "withoutMetadata": "8f49bf8218f6d1dd8f4a2f6bc604a9be7f07fe699d47c5cb0d0ce841c4f60316",
          "linkedWithoutMetadata": "8f49bf8218f6d1dd8f4a2f6bc604a9be7f07fe699d47c5cb0d0ce841c4f60316"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Transfer.sol:Transfer": {
        "src": "contracts/core/libraries/Transfer.sol:95",
        "version": {
          "withMetadata": "6d09a50898a120281754a0372b028f52fefcd816bc174b40a393cc9e7efae73c",
          "withoutMetadata": "6d09a50898a120281754a0372b028f52fefcd816bc174b40a393cc9e7efae73c",
          "linkedWithoutMetadata": "6d09a50898a120281754a0372b028f52fefcd816bc174b40a393cc9e7efae73c"
        },
        "inherit": [
          "contracts/core/libraries/Native.sol:Native"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/factory/ContractFactory.sol:ContractFactory": {
        "src": "contracts/factory/ContractFactory.sol:107",
        "version": {
          "withMetadata": "e61e3400478278b7d2d32ebb3d335b710c5998a60e28a56d485183b416058fad",
          "withoutMetadata": "e61e3400478278b7d2d32ebb3d335b710c5998a60e28a56d485183b416058fad",
          "linkedWithoutMetadata": "e61e3400478278b7d2d32ebb3d335b710c5998a60e28a56d485183b416058fad"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "deploy(string,string,bytes)",
          "setDeployer(address,bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ContractFactory",
            "src": "contracts/factory/ContractFactory.sol:119"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "usedSalts",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            },
            {
              "label": "isDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/BaseStrategy.sol:BaseStrategy": {
        "src": "contracts/strategies/BaseStrategy.sol:111",
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "getPoolAmount()",
          "isPoolActive()",
          "getRecipientStatus(address)",
          "increasePoolAmount(uint256)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)",
          "getPayouts(address[],bytes[])",
          "isValidAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseStrategy",
            "src": "contracts/strategies/BaseStrategy.sol:129"
          },
          {
            "kind": "state-variable-immutable",
            "name": "allo",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          },
          {
            "kind": "state-variable-immutable",
            "name": "strategyId",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:DirectGrantsSimpleStrategy": {
        "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:112",
        "version": {
          "withMetadata": "79c1f218d1533286b0ef091aaa0bc6835187e517bc3388fe999d1b881cf40e6d",
          "withoutMetadata": "79c1f218d1533286b0ef091aaa0bc6835187e517bc3388fe999d1b881cf40e6d",
          "linkedWithoutMetadata": "79c1f218d1533286b0ef091aaa0bc6835187e517bc3388fe999d1b881cf40e6d"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getMilestoneStatus(address,uint256)",
          "getMilestones(address)",
          "setMilestones(address,struct DirectGrantsSimpleStrategy.Milestone[])",
          "reviewSetMilestones(address,uint8)",
          "submitMilestone(address,uint256,(uint256,string))",
          "rejectMilestone(address,uint256)",
          "setRecipientStatusToInReview(address[])",
          "setPoolActive(bool)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DirectGrantsSimpleStrategy",
            "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:191"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:161"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:162"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:164"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:166"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:167"
            },
            {
              "label": "_acceptedRecipientIds",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:172"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)5493_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:177"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Milestone)5502_storage)dyn_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:179"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:184"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)5502_storage)dyn_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(Milestone)5502_storage)dyn_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Milestone[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5493_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)5502_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)5493_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "milestonesReviewStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:DonationVotingCustomRegistryStrategy": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51",
        "version": {
          "withMetadata": "a4f72afbf978721c4ed97ae1c04f3df39e723761e27e7b9bc2f619711e1fd2d9",
          "withoutMetadata": "a4f72afbf978721c4ed97ae1c04f3df39e723761e27e7b9bc2f619711e1fd2d9",
          "linkedWithoutMetadata": "a4f72afbf978721c4ed97ae1c04f3df39e723761e27e7b9bc2f619711e1fd2d9"
        },
        "inherit": [
          "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingCustomRegistryStrategy",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7094_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(SimpleProjectRegistry)7065",
              "contract": "DonationVotingCustomRegistryStrategy",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(SimpleProjectRegistry)7065": {
              "label": "contract SimpleProjectRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7094_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4252_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7094_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:SimpleProjectRegistry": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:26",
        "version": {
          "withMetadata": "e42b32c0659ffeb1e27c9bfd4af48169940da8d5fe2846cc4b1512902e44f040",
          "withoutMetadata": "e42b32c0659ffeb1e27c9bfd4af48169940da8d5fe2846cc4b1512902e44f040",
          "linkedWithoutMetadata": "e42b32c0659ffeb1e27c9bfd4af48169940da8d5fe2846cc4b1512902e44f040"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addProject(address)",
          "addProjects(address[])",
          "removeProject(address)",
          "removeProjects(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleProjectRegistry",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "projects",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleProjectRegistry",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy": {
        "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:100",
        "version": {
          "withMetadata": "7cd7e816d080a83f7588d9e04490f99519a059d7bb4d7ffcb19173933f66a327",
          "withoutMetadata": "7cd7e816d080a83f7588d9e04490f99519a059d7bb4d7ffcb19173933f66a327",
          "linkedWithoutMetadata": "7cd7e816d080a83f7588d9e04490f99519a059d7bb4d7ffcb19173933f66a327"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "setPayout(address[],uint256[])",
          "claim(struct DonationVotingStrategy.Claim[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingStrategy",
            "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:198"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7094_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7094_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4252_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7094_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:ProportionalPayoutStrategy": {
        "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:112",
        "version": {
          "withMetadata": "40285487b462cb6caefa040d9b09ab2ce9fed729365f8dbbcbcc0306c6a8a867",
          "withoutMetadata": "40285487b462cb6caefa040d9b09ab2ce9fed729365f8dbbcbcc0306c6a8a867",
          "linkedWithoutMetadata": "40285487b462cb6caefa040d9b09ab2ce9fed729365f8dbbcbcc0306c6a8a867"
        },
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "setAllocationTime(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProportionalPayoutStrategy",
            "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:166"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Recipient)8501_storage)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:151"
            },
            {
              "label": "hasAllocated",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:152"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:153"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ERC721)32390",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "maxRecipientsAllowed",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:157"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:158"
            },
            {
              "label": "totalAllocations",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:159"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)32390": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)8501_storage)": {
              "label": "mapping(address => struct ProportionalPayoutStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)8501_storage": {
              "label": "struct ProportionalPayoutStrategy.Recipient",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:QVGovernanceERC20Votes": {
        "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:89",
        "version": {
          "withMetadata": "13288ad412599359e2221dc690d74eb72f7edb248e60ca921297f4f799aa5e58",
          "withoutMetadata": "13288ad412599359e2221dc690d74eb72f7edb248e60ca921297f4f799aa5e58",
          "linkedWithoutMetadata": "13288ad412599359e2221dc690d74eb72f7edb248e60ca921297f4f799aa5e58"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVGovernanceERC20Votes",
            "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:104"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16161_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16172_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "govToken",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IVotes)20350",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:97"
            },
            {
              "label": "timestamp",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:98"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IVotes)20350": {
              "label": "contract IVotes",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16172_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16161_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16172_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16161_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:HackathonQVStrategy": {
        "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:111",
        "version": {
          "withMetadata": "71a6412e0f062fa637a8fd176f5b594264c9befa635577caf9a5e66f33f85a16",
          "withoutMetadata": "71a6412e0f062fa637a8fd176f5b594264c9befa635577caf9a5e66f33f85a16",
          "linkedWithoutMetadata": "71a6412e0f062fa637a8fd176f5b594264c9befa635577caf9a5e66f33f85a16"
        },
        "inherit": [
          "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver",
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllowedRecipientIds(address[],uint64,bytes)",
          "setPayoutPercentages(uint256[])",
          "getPayouts(address[],bytes[])",
          "getAttestation(bytes32)",
          "getSchema(bytes32)",
          "isPayable()",
          "isAttestationExpired(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HackathonQVStrategy",
            "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:148"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16161_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16172_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "_eas",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IEAS)19041",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            },
            {
              "label": "payoutPercentages",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:130"
            },
            {
              "label": "votesByRank",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:131"
            },
            {
              "label": "easInfo",
              "offset": 0,
              "slot": "14",
              "type": "t_struct(EASInfo)9391_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "19",
              "type": "t_contract(ERC721)32390",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "recipientIdToUID",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:135"
            },
            {
              "label": "recipientIdToIndex",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:137"
            },
            {
              "label": "indexToRecipientId",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:143"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ERC721)32390": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IEAS)19041": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(ISchemaRegistry)19086": {
              "label": "contract ISchemaRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16172_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16161_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16172_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(EASInfo)9391_storage": {
              "label": "struct HackathonQVStrategy.EASInfo",
              "members": [
                {
                  "label": "eas",
                  "type": "t_contract(IEAS)19041",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "schemaRegistry",
                  "type": "t_contract(ISchemaRegistry)19086",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "schemaUID",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "schema",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "revocable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16161_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver": {
        "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:19",
        "inherit": [
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver"
        ],
        "libraries": [],
        "methods": [
          "isPayable()",
          "()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_eas",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IEAS)19041",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            }
          ],
          "types": {
            "t_contract(IEAS)19041": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:QVNftTieredStrategy": {
        "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:96",
        "version": {
          "withMetadata": "f9df2486aebbf977bc72dd9d3c00ac84447b0fa86d9a0895415a4ab5debab5b0",
          "withoutMetadata": "f9df2486aebbf977bc72dd9d3c00ac84447b0fa86d9a0895415a4ab5debab5b0",
          "linkedWithoutMetadata": "f9df2486aebbf977bc72dd9d3c00ac84447b0fa86d9a0895415a4ab5debab5b0"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVNftTieredStrategy",
            "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16161_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16172_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "nfts",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_contract(ERC721)32390)dyn_storage",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:112"
            },
            {
              "label": "maxVoiceCreditsPerNft",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_contract(ERC721)32390,t_uint256)",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:113"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_contract(ERC721)32390,t_mapping(t_uint256,t_uint256))",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(ERC721)32390)dyn_storage": {
              "label": "contract ERC721[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)32390": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16172_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16161_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)32390,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(contract ERC721 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)32390,t_uint256)": {
              "label": "mapping(contract ERC721 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16172_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16161_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:LockupDynamicStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:16",
        "version": {
          "withMetadata": "efd9cbcad460f7ae9c8cb9ee3ff197b23c997eacf8f77f14fa8fdb5a70b1cac0",
          "withoutMetadata": "efd9cbcad460f7ae9c8cb9ee3ff197b23c997eacf8f77f14fa8fdb5a70b1cac0",
          "linkedWithoutMetadata": "efd9cbcad460f7ae9c8cb9ee3ff197b23c997eacf8f77f14fa8fdb5a70b1cac0"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientSegments(address,struct LockupDynamic.SegmentWithDelta[])",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupDynamicStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:42"
            },
            {
              "label": "lockupDynamic",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupDynamic)30801",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)30921_storage",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)11147_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(SegmentWithDelta)31005_storage)dyn_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupDynamic)30801": {
              "label": "contract ISablierV2LockupDynamic",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)11147_storage)": {
              "label": "mapping(address => struct LockupDynamicStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)30921_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)30162",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)11147_storage": {
              "label": "struct LockupDynamicStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "segments",
                  "type": "t_array(t_struct(SegmentWithDelta)31005_storage)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(SegmentWithDelta)31005_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exponent",
                  "type": "t_userDefinedValueType(UD2x18)28358",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "delta",
                  "type": "t_uint40",
                  "offset": 24,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD2x18)28358": {
              "label": "UD2x18",
              "numberOfBytes": "8",
              "underlying": "t_uint64"
            },
            "t_userDefinedValueType(UD60x18)30162": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:LockupLinearStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:16",
        "version": {
          "withMetadata": "747a9a779da0f3cbd2cd4712b382d61dc90a0365cdbd98c4f82b933f6b4b4c39",
          "withoutMetadata": "747a9a779da0f3cbd2cd4712b382d61dc90a0365cdbd98c4f82b933f6b4b4c39",
          "linkedWithoutMetadata": "747a9a779da0f3cbd2cd4712b382d61dc90a0365cdbd98c4f82b933f6b4b4c39"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientDurations(address,(uint40,uint40))",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupLinearStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:42"
            },
            {
              "label": "lockupLinear",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupLinear)30890",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)30921_storage",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)12324_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupLinear)30890": {
              "label": "contract ISablierV2LockupLinear",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12324_storage)": {
              "label": "mapping(address => struct LockupLinearStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)30921_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)30162",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Durations)31073_storage": {
              "label": "struct LockupLinear.Durations",
              "members": [
                {
                  "label": "cliff",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "total",
                  "type": "t_uint40",
                  "offset": 5,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12324_storage": {
              "label": "struct LockupLinearStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durations",
                  "type": "t_struct(Durations)31073_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD60x18)30162": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:NFT": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:8",
        "version": {
          "withMetadata": "a8754be6c96feddefc4b616e8e38a01f945a15053d980111a7672347c0f29a74",
          "withoutMetadata": "a8754be6c96feddefc4b616e8e38a01f945a15053d980111a7672347c0f29a74",
          "linkedWithoutMetadata": "a8754be6c96feddefc4b616e8e38a01f945a15053d980111a7672347c0f29a74"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable",
          "solady/src/tokens/ERC721.sol:ERC721"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)",
          "name()",
          "symbol()",
          "mintTo(address)",
          "tokenURI(uint256)",
          "withdrawPayments(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFT",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTokenId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:16"
            },
            {
              "label": "MINT_PRICE",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:17"
            },
            {
              "label": "__name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:20"
            },
            {
              "label": "__symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:NFTFactory": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:6",
        "version": {
          "withMetadata": "bb4400223a73338e197bb14987e2d53b7d8a4bcfdd6f42e936521de96e39cace",
          "withoutMetadata": "bb4400223a73338e197bb14987e2d53b7d8a4bcfdd6f42e936521de96e39cace",
          "linkedWithoutMetadata": "bb4400223a73338e197bb14987e2d53b7d8a4bcfdd6f42e936521de96e39cace"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createNFTContract(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isNFTContract",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NFTFactory",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:WrappedVotingNftMintStrategy": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:100",
        "version": {
          "withMetadata": "0c3c9f9794d8f716e36e1f6f654720844b350405b81d2dc6d8f2f035242206bd",
          "withoutMetadata": "0c3c9f9794d8f716e36e1f6f654720844b350405b81d2dc6d8f2f035242206bd",
          "linkedWithoutMetadata": "0c3c9f9794d8f716e36e1f6f654720844b350405b81d2dc6d8f2f035242206bd"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllocationTimes(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrappedVotingNftMintStrategy",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:147"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "nftFactory",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(NFTFactory)13538",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:134"
            },
            {
              "label": "allocationStartTime",
              "offset": 20,
              "slot": "4",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "currentWinner",
              "offset": 8,
              "slot": "5",
              "type": "t_address",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "allocations",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(NFTFactory)13538": {
              "label": "contract NFTFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:99",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(struct DonationVotingMerkleDistributionBaseStrategy.ApplicationStatus[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "updateDistribution(bytes32,(uint256,string))",
          "isDistributionSet()",
          "hasBeenDistributed(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionBaseStrategy",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:286"
          },
          {
            "kind": "state-variable-immutable",
            "name": "PERMIT2",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:230"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4531_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)14109_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14109_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14109_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:DonationVotingMerkleDistributionDirectTransferStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76",
        "version": {
          "withMetadata": "b02896c15ccced04c8a3d4050285d525bde8246f4c5148bcedc980d91b2bc1c5",
          "withoutMetadata": "b02896c15ccced04c8a3d4050285d525bde8246f4c5148bcedc980d91b2bc1c5",
          "linkedWithoutMetadata": "b02896c15ccced04c8a3d4050285d525bde8246f4c5148bcedc980d91b2bc1c5"
        },
        "inherit": [
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionDirectTransferStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4531_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)14109_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14109_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14109_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:DonationVotingMerkleDistributionVaultStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:92",
        "version": {
          "withMetadata": "3622a22ab5d17e3cb264b552dd78c8779ebbf20f43c3d50e0622ec045c97037d",
          "withoutMetadata": "3622a22ab5d17e3cb264b552dd78c8779ebbf20f43c3d50e0622ec045c97037d",
          "linkedWithoutMetadata": "3622a22ab5d17e3cb264b552dd78c8779ebbf20f43c3d50e0622ec045c97037d"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)",
          "claim(struct DonationVotingMerkleDistributionVaultStrategy.Claim[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionVaultStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4531_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)14109_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "16",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "16",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "18",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "67",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14109_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14109_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy": {
        "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:89",
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVBaseStrategy",
            "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:258"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16161_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16172_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16172_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16161_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16172_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16161_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-simple/QVSimpleStrategy.sol:QVSimpleStrategy": {
        "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:89",
        "version": {
          "withMetadata": "98a41ce2dfed2ec9dd143212278df4e30fc9b713dfaec4a69b3de2b5db48fb46",
          "withoutMetadata": "98a41ce2dfed2ec9dd143212278df4e30fc9b713dfaec4a69b3de2b5db48fb46",
          "linkedWithoutMetadata": "98a41ce2dfed2ec9dd143212278df4e30fc9b713dfaec4a69b3de2b5db48fb46"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "addAllocator(address)",
          "removeAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVSimpleStrategy",
            "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:121"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16161_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16172_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:108"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:111"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16172_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16161_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16172_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16161_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:RFPCommitteeStrategy": {
        "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:83",
        "version": {
          "withMetadata": "999adc1cb0a2b37ae8c62ba20986d8df4ebb612722f94258bd6cefc81ed119b3",
          "withoutMetadata": "999adc1cb0a2b37ae8c62ba20986d8df4ebb612722f94258bd6cefc81ed119b3",
          "linkedWithoutMetadata": "999adc1cb0a2b37ae8c62ba20986d8df4ebb612722f94258bd6cefc81ed119b3"
        },
        "inherit": [
          "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPCommitteeStrategy",
            "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4234",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)17671_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)17662_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "voteThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:104"
            },
            {
              "label": "votedFor",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:109"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:114"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)17671_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17662_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)17671_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)17662_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy": {
        "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:107",
        "version": {
          "withMetadata": "2a159af57ac20780f3673dd79d486e3ac23c9ee8742635d1f49a80a6bb9735e3",
          "withoutMetadata": "2a159af57ac20780f3673dd79d486e3ac23c9ee8742635d1f49a80a6bb9735e3",
          "linkedWithoutMetadata": "2a159af57ac20780f3673dd79d486e3ac23c9ee8742635d1f49a80a6bb9735e3"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getPayouts(address[],bytes[])",
          "getMilestone(uint256)",
          "getMilestoneStatus(uint256)",
          "setPoolActive(bool)",
          "setMilestones(struct RFPSimpleStrategy.Milestone[])",
          "submitUpcomingMilestone((uint256,string))",
          "increaseMaxBid(uint256)",
          "rejectMilestone(uint256)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPSimpleStrategy",
            "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:199"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4234",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)17671_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)17662_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)17671_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Recipient)17662_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)17671_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)17662_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/IEAS.sol:IEAS": {
        "src": "lib/eas-contracts/contracts/IEAS.sol:82",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSchemaRegistry()",
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))",
          "multiAttest(struct MultiAttestationRequest[])",
          "multiAttestByDelegation(struct MultiDelegatedAttestationRequest[])",
          "revoke((bytes32,(bytes32,uint256)))",
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))",
          "multiRevoke(struct MultiRevocationRequest[])",
          "multiRevokeByDelegation(struct MultiDelegatedRevocationRequest[])",
          "timestamp(bytes32)",
          "multiTimestamp(bytes32[])",
          "revokeOffchain(bytes32)",
          "multiRevokeOffchain(bytes32[])",
          "getAttestation(bytes32)",
          "isAttestationValid(bytes32)",
          "getTimestamp(bytes32)",
          "getRevokeOffchain(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol:ISchemaRegistry": {
        "src": "lib/eas-contracts/contracts/ISchemaRegistry.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "register(string,address,bool)",
          "getSchema(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver": {
        "src": "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:19",
        "version": {
          "withMetadata": "d8605e6a62fb16ecee500cf5e8e23be2b13cf45e7b94a110819c98c983b44962",
          "withoutMetadata": "d8605e6a62fb16ecee500cf5e8e23be2b13cf45e7b94a110819c98c983b44962",
          "linkedWithoutMetadata": "d8605e6a62fb16ecee500cf5e8e23be2b13cf45e7b94a110819c98c983b44962"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "d7300f3f571677d35afe2cd1089da8ecc9ad7f5e5cdae20bce4bf8666c6578b7",
          "withoutMetadata": "d7300f3f571677d35afe2cd1089da8ecc9ad7f5e5cdae20bce4bf8666c6578b7",
          "linkedWithoutMetadata": "d7300f3f571677d35afe2cd1089da8ecc9ad7f5e5cdae20bce4bf8666c6578b7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:50",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19903_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19903_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19903_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "6ece51211cd14fe2ae1b56573ef5c0557b37d702b0c5435857004ab32ffce918",
          "withoutMetadata": "6ece51211cd14fe2ae1b56573ef5c0557b37d702b0c5435857004ab32ffce918",
          "linkedWithoutMetadata": "6ece51211cd14fe2ae1b56573ef5c0557b37d702b0c5435857004ab32ffce918"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "a69c7739cee64ce62295470c5dd8b5590e1e0a0796d87eed8ea9bd1ef407e5e6",
          "withoutMetadata": "a69c7739cee64ce62295470c5dd8b5590e1e0a0796d87eed8ea9bd1ef407e5e6",
          "linkedWithoutMetadata": "a69c7739cee64ce62295470c5dd8b5590e1e0a0796d87eed8ea9bd1ef407e5e6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "8db0d67d151581b903cce52d8209c546f89ef49df512e8301a035808e1443a4b",
          "withoutMetadata": "8db0d67d151581b903cce52d8209c546f89ef49df512e8301a035808e1443a4b",
          "linkedWithoutMetadata": "8db0d67d151581b903cce52d8209c546f89ef49df512e8301a035808e1443a4b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "08e1aba516af812d17e59b79357c20bf98840c02d82f89d87996cb0a0df33b10",
          "withoutMetadata": "08e1aba516af812d17e59b79357c20bf98840c02d82f89d87996cb0a0df33b10",
          "linkedWithoutMetadata": "08e1aba516af812d17e59b79357c20bf98840c02d82f89d87996cb0a0df33b10"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "d69cd1280d30192ee420c76ca95092d79b1cd3479b1c50944cd1335935038b85",
          "withoutMetadata": "d69cd1280d30192ee420c76ca95092d79b1cd3479b1c50944cd1335935038b85",
          "linkedWithoutMetadata": "d69cd1280d30192ee420c76ca95092d79b1cd3479b1c50944cd1335935038b85"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "b7f4ddb84860f8edf3acb174a58668d0479e02842b50728bbcd434ac45b051d1",
          "withoutMetadata": "b7f4ddb84860f8edf3acb174a58668d0479e02842b50728bbcd434ac45b051d1",
          "linkedWithoutMetadata": "b7f4ddb84860f8edf3acb174a58668d0479e02842b50728bbcd434ac45b051d1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/IEIP712.sol:IEIP712": {
        "src": "lib/permit2/src/interfaces/IEIP712.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/ISignatureTransfer.sol:ISignatureTransfer": {
        "src": "lib/permit2/src/interfaces/ISignatureTransfer.sol:9",
        "inherit": [
          "lib/permit2/src/interfaces/IEIP712.sol:IEIP712"
        ],
        "libraries": [],
        "methods": [
          "nonceBitmap(address,uint256)",
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)",
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)",
          "permitTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes)",
          "permitWitnessTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes32,string,bytes)",
          "invalidateUnorderedNonces(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable": {
        "src": "lib/v2-core/src/interfaces/IAdminable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "transferAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Base.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "comptroller()",
          "protocolRevenues(address)",
          "claimProtocolRevenues(address)",
          "setComptroller(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:ISablierV2Comptroller": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "flashFee()",
          "isFlashAsset(address)",
          "protocolFees(address)",
          "setFlashFee(uint256)",
          "setProtocolFee(address,uint256)",
          "toggleFlashAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:13",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getAsset(uint256)",
          "getDepositedAmount(uint256)",
          "getEndTime(uint256)",
          "getRecipient(uint256)",
          "getRefundedAmount(uint256)",
          "getSender(uint256)",
          "getStartTime(uint256)",
          "getWithdrawnAmount(uint256)",
          "isCancelable(uint256)",
          "isCold(uint256)",
          "isDepleted(uint256)",
          "isStream(uint256)",
          "isWarm(uint256)",
          "nextStreamId()",
          "refundableAmountOf(uint256)",
          "statusOf(uint256)",
          "streamedAmountOf(uint256)",
          "wasCanceled(uint256)",
          "withdrawableAmountOf(uint256)",
          "burn(uint256)",
          "cancel(uint256)",
          "cancelMultiple(uint256[])",
          "renounce(uint256)",
          "setNFTDescriptor(address)",
          "withdraw(uint256,address,uint128)",
          "withdrawMax(uint256,address)",
          "withdrawMaxAndTransfer(uint256,address)",
          "withdrawMultiple(uint256[],address,uint128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:ISablierV2LockupDynamic": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_SEGMENT_COUNT()",
          "getRange(uint256)",
          "getSegments(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDeltas((address,bool,address,uint128,address,(address,uint256),struct LockupDynamic.SegmentWithDelta[]))",
          "createWithMilestones((address,uint40,bool,address,uint128,address,(address,uint256),struct LockupDynamic.Segment[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:ISablierV2LockupLinear": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getCliffTime(uint256)",
          "getRange(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))",
          "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:ISablierV2NFTDescriptor": {
        "src": "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:Lockup": {
        "src": "lib/v2-core/src/types/DataTypes.sol:29",
        "version": {
          "withMetadata": "814f821916f4f8cb441a57c6b08b10bc356da8c09515af9d94bedaf45af9e7cb",
          "withoutMetadata": "814f821916f4f8cb441a57c6b08b10bc356da8c09515af9d94bedaf45af9e7cb",
          "linkedWithoutMetadata": "814f821916f4f8cb441a57c6b08b10bc356da8c09515af9d94bedaf45af9e7cb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupDynamic": {
        "src": "lib/v2-core/src/types/DataTypes.sol:72",
        "version": {
          "withMetadata": "82956b4b9689d8008c1c8db1deb17a610b4d06beaa67eff4c83ab0afefc9ccf1",
          "withoutMetadata": "82956b4b9689d8008c1c8db1deb17a610b4d06beaa67eff4c83ab0afefc9ccf1",
          "linkedWithoutMetadata": "82956b4b9689d8008c1c8db1deb17a610b4d06beaa67eff4c83ab0afefc9ccf1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupLinear": {
        "src": "lib/v2-core/src/types/DataTypes.sol:180",
        "version": {
          "withMetadata": "c546d49fb56f805313fd167ca0782de1640b85d363d2ff6152954f1edfffc177",
          "withoutMetadata": "c546d49fb56f805313fd167ca0782de1640b85d363d2ff6152954f1edfffc177",
          "linkedWithoutMetadata": "c546d49fb56f805313fd167ca0782de1640b85d363d2ff6152954f1edfffc177"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/auth/Ownable.sol:Ownable": {
        "src": "solady/src/auth/Ownable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "renounceOwnership()",
          "requestOwnershipHandover()",
          "cancelOwnershipHandover()",
          "completeOwnershipHandover(address)",
          "owner()",
          "ownershipHandoverExpiresAt(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC20.sol:ERC20": {
        "src": "solady/src/tokens/ERC20.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC721.sol:ERC721": {
        "src": "solady/src/tokens/ERC721.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "balanceOf(address)",
          "getApproved(uint256)",
          "approve(address,uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/CREATE3.sol:CREATE3": {
        "src": "solady/src/utils/CREATE3.sol:8",
        "version": {
          "withMetadata": "17ca8ff58519effe895b2ec4b47f37bdedc2fcc2af6598c07a195999b7ef145e",
          "withoutMetadata": "17ca8ff58519effe895b2ec4b47f37bdedc2fcc2af6598c07a195999b7ef145e",
          "linkedWithoutMetadata": "17ca8ff58519effe895b2ec4b47f37bdedc2fcc2af6598c07a195999b7ef145e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/SafeTransferLib.sol:SafeTransferLib": {
        "src": "solady/src/utils/SafeTransferLib.sol:12",
        "version": {
          "withMetadata": "91e25adb79636a77beb2a69214af7d543301c3349d070c18a59060cf4c96b106",
          "withoutMetadata": "91e25adb79636a77beb2a69214af7d543301c3349d070c18a59060cf4c96b106",
          "linkedWithoutMetadata": "91e25adb79636a77beb2a69214af7d543301c3349d070c18a59060cf4c96b106"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      }
    }
  ]
}
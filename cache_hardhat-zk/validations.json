{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "6e6b6dadf481256da5a718ebeb47e2f23b4dcd98599ea736409a7bcc4d5b95b3",
          "withoutMetadata": "6e6b6dadf481256da5a718ebeb47e2f23b4dcd98599ea736409a7bcc4d5b95b3",
          "linkedWithoutMetadata": "6e6b6dadf481256da5a718ebeb47e2f23b4dcd98599ea736409a7bcc4d5b95b3"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "b3aa6b2d0dae890cec41037db495285a8ee6a29922e0d4f48813362c5349a8e7",
          "withoutMetadata": "b3aa6b2d0dae890cec41037db495285a8ee6a29922e0d4f48813362c5349a8e7",
          "linkedWithoutMetadata": "b3aa6b2d0dae890cec41037db495285a8ee6a29922e0d4f48813362c5349a8e7"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "fb740371d8bd7ec2c5093e81bd1eb1769bf3074a7818985c2c144c8020bfe05c",
          "withoutMetadata": "fb740371d8bd7ec2c5093e81bd1eb1769bf3074a7818985c2c144c8020bfe05c",
          "linkedWithoutMetadata": "fb740371d8bd7ec2c5093e81bd1eb1769bf3074a7818985c2c144c8020bfe05c"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "ffb33d09b0c730856232e6e29010110c5d0c6ab6a9cd4cb151662d183a95ca91",
          "withoutMetadata": "ffb33d09b0c730856232e6e29010110c5d0c6ab6a9cd4cb151662d183a95ca91",
          "linkedWithoutMetadata": "ffb33d09b0c730856232e6e29010110c5d0c6ab6a9cd4cb151662d183a95ca91"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "8e3841872bb69de6e2b906edddf2ddcebf30e7c64315ad516ccd9d117054cec3",
          "withoutMetadata": "8e3841872bb69de6e2b906edddf2ddcebf30e7c64315ad516ccd9d117054cec3",
          "linkedWithoutMetadata": "8e3841872bb69de6e2b906edddf2ddcebf30e7c64315ad516ccd9d117054cec3"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "a04db63132492e02b8286b50d6d1fe4aed407db3ae19f48ea835a0644b1c2494",
          "withoutMetadata": "a04db63132492e02b8286b50d6d1fe4aed407db3ae19f48ea835a0644b1c2494",
          "linkedWithoutMetadata": "a04db63132492e02b8286b50d6d1fe4aed407db3ae19f48ea835a0644b1c2494"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "e92a70401db627905aa7734a88b5b0e0f079f418b257f33f62897efb5df8dd5e",
          "withoutMetadata": "e92a70401db627905aa7734a88b5b0e0f079f418b257f33f62897efb5df8dd5e",
          "linkedWithoutMetadata": "e92a70401db627905aa7734a88b5b0e0f079f418b257f33f62897efb5df8dd5e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Allo.sol:Allo": {
        "src": "contracts/core/Allo.sol:89",
        "version": {
          "withMetadata": "1fd326dc0e9452397b7a8469df88e02de32eb0bf759099ff282127800c145fde",
          "withoutMetadata": "1fd326dc0e9452397b7a8469df88e02de32eb0bf759099ff282127800c145fde",
          "linkedWithoutMetadata": "1fd326dc0e9452397b7a8469df88e02de32eb0bf759099ff282127800c145fde"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "solady/src/auth/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IAllo.sol:IAllo"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "getFeeDenominator()",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "isCloneableStrategy(address)",
          "getPool(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "percentFee",
              "offset": 0,
              "slot": "52",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:114"
            },
            {
              "label": "baseFee",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:129"
            },
            {
              "label": "_poolIndex",
              "offset": 0,
              "slot": "54",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "55",
              "type": "t_address_payable",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "56",
              "type": "t_contract(IRegistry)4234",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:133"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "57",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:134"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "58",
              "type": "t_mapping(t_uint256,t_struct(Pool)3753_storage)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:135"
            },
            {
              "label": "cloneableStrategies",
              "offset": 0,
              "slot": "59",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)4405": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)3753_storage)": {
              "label": "mapping(uint256 => struct IAllo.Pool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Pool)3753_storage": {
              "label": "struct IAllo.Pool",
              "members": [
                {
                  "label": "profileId",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "strategy",
                  "type": "t_contract(IStrategy)4405",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "managerRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)19902_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Anchor.sol:Anchor": {
        "src": "contracts/core/Anchor.sol:89",
        "version": {
          "withMetadata": "c8464733f370d2e32a1652bea805a9ea0fbb56b12000818ed1501cd3735b6eef",
          "withoutMetadata": "c8464733f370d2e32a1652bea805a9ea0fbb56b12000818ed1501cd3735b6eef",
          "linkedWithoutMetadata": "c8464733f370d2e32a1652bea805a9ea0fbb56b12000818ed1501cd3735b6eef"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "execute(address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Anchor",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "profileId",
            "src": "contracts/core/Anchor.sol:89"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Registry.sol:Registry": {
        "src": "contracts/core/Registry.sol:103",
        "version": {
          "withMetadata": "911c7298fc6e0bf4813b36ba9cef7fb6c841091009b5eef5d472b2e20cfe2e25",
          "withoutMetadata": "911c7298fc6e0bf4813b36ba9cef7fb6c841091009b5eef5d472b2e20cfe2e25",
          "linkedWithoutMetadata": "911c7298fc6e0bf4813b36ba9cef7fb6c841091009b5eef5d472b2e20cfe2e25"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "contracts/core/libraries/Native.sol:Native",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "contracts/core/interfaces/IRegistry.sol:IRegistry"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "anchorToProfileId",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:109"
            },
            {
              "label": "profilesById",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_struct(Profile)4061_storage)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:111"
            },
            {
              "label": "profileIdToPendingOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:113"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Profile)4061_storage)": {
              "label": "mapping(bytes32 => struct IRegistry.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Profile)4061_storage": {
              "label": "struct IRegistry.Profile",
              "members": [
                {
                  "label": "id",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "anchor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)19902_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IAllo.sol:IAllo": {
        "src": "contracts/core/interfaces/IAllo.sol:97",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "isCloneableStrategy(address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "getPool(uint256)",
          "getFeeDenominator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IRegistry.sol:IRegistry": {
        "src": "contracts/core/interfaces/IRegistry.sol:92",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/core/interfaces/IStrategy.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "isValidAllocator(address)",
          "isPoolActive()",
          "getPoolAmount()",
          "increasePoolAmount(uint256)",
          "getRecipientStatus(address)",
          "getPayouts(address[],bytes[])",
          "initialize(uint256,bytes)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Clone.sol:Clone": {
        "src": "contracts/core/libraries/Clone.sol:37",
        "version": {
          "withMetadata": "dc16aa1fb9dd6b4b9272483f597c275e352f917973188aaca90f40b506e79608",
          "withoutMetadata": "dc16aa1fb9dd6b4b9272483f597c275e352f917973188aaca90f40b506e79608",
          "linkedWithoutMetadata": "dc16aa1fb9dd6b4b9272483f597c275e352f917973188aaca90f40b506e79608"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Errors.sol:Errors": {
        "src": "contracts/core/libraries/Errors.sol:109",
        "version": {
          "withMetadata": "d91404cd60ead4505935cbf5b373b19bf3c98b89baa8896cadfe2257b26204db",
          "withoutMetadata": "d91404cd60ead4505935cbf5b373b19bf3c98b89baa8896cadfe2257b26204db",
          "linkedWithoutMetadata": "d91404cd60ead4505935cbf5b373b19bf3c98b89baa8896cadfe2257b26204db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Native.sol:Native": {
        "src": "contracts/core/libraries/Native.sol:26",
        "version": {
          "withMetadata": "b6e4cc2ca13982649165b7ada17bd81ca180706fdd8cafb679750bb4736d9bfe",
          "withoutMetadata": "b6e4cc2ca13982649165b7ada17bd81ca180706fdd8cafb679750bb4736d9bfe",
          "linkedWithoutMetadata": "b6e4cc2ca13982649165b7ada17bd81ca180706fdd8cafb679750bb4736d9bfe"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Transfer.sol:Transfer": {
        "src": "contracts/core/libraries/Transfer.sol:95",
        "version": {
          "withMetadata": "4de5b07d1febac4a59ce18e1bcad752c839d638846184ff50052ef88155e4544",
          "withoutMetadata": "4de5b07d1febac4a59ce18e1bcad752c839d638846184ff50052ef88155e4544",
          "linkedWithoutMetadata": "4de5b07d1febac4a59ce18e1bcad752c839d638846184ff50052ef88155e4544"
        },
        "inherit": [
          "contracts/core/libraries/Native.sol:Native"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/factory/ContractFactory.sol:ContractFactory": {
        "src": "contracts/factory/ContractFactory.sol:107",
        "version": {
          "withMetadata": "4fa0e8f5edbc09017385034b30b5b987370bca6fdbed909ee21ca3263f43350b",
          "withoutMetadata": "4fa0e8f5edbc09017385034b30b5b987370bca6fdbed909ee21ca3263f43350b",
          "linkedWithoutMetadata": "4fa0e8f5edbc09017385034b30b5b987370bca6fdbed909ee21ca3263f43350b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "deploy(string,string,bytes)",
          "setDeployer(address,bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ContractFactory",
            "src": "contracts/factory/ContractFactory.sol:119"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "usedSalts",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            },
            {
              "label": "isDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/BaseStrategy.sol:BaseStrategy": {
        "src": "contracts/strategies/BaseStrategy.sol:111",
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "getPoolAmount()",
          "isPoolActive()",
          "getRecipientStatus(address)",
          "increasePoolAmount(uint256)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)",
          "getPayouts(address[],bytes[])",
          "isValidAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseStrategy",
            "src": "contracts/strategies/BaseStrategy.sol:129"
          },
          {
            "kind": "state-variable-immutable",
            "name": "allo",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          },
          {
            "kind": "state-variable-immutable",
            "name": "strategyId",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:DirectGrantsSimpleStrategy": {
        "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:112",
        "version": {
          "withMetadata": "3c0fc2fcd7eb59148926f4cf23d9a0b5097d498e88b79df810ec564a89ada852",
          "withoutMetadata": "3c0fc2fcd7eb59148926f4cf23d9a0b5097d498e88b79df810ec564a89ada852",
          "linkedWithoutMetadata": "3c0fc2fcd7eb59148926f4cf23d9a0b5097d498e88b79df810ec564a89ada852"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getMilestoneStatus(address,uint256)",
          "getMilestones(address)",
          "setMilestones(address,struct DirectGrantsSimpleStrategy.Milestone[])",
          "reviewSetMilestones(address,uint8)",
          "submitMilestone(address,uint256,(uint256,string))",
          "rejectMilestone(address,uint256)",
          "setRecipientStatusToInReview(address[])",
          "setPoolActive(bool)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DirectGrantsSimpleStrategy",
            "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:191"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:161"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:162"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:164"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:166"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:167"
            },
            {
              "label": "_acceptedRecipientIds",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:172"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)5493_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:177"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Milestone)5502_storage)dyn_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:179"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:184"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)5502_storage)dyn_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(Milestone)5502_storage)dyn_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Milestone[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5493_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)5502_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)5493_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "milestonesReviewStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:DonationVotingCustomRegistryStrategy": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51",
        "version": {
          "withMetadata": "5436430857dc9cbd25729b19154f8f2a416e11662c36f73bb0689f1ed88a435a",
          "withoutMetadata": "5436430857dc9cbd25729b19154f8f2a416e11662c36f73bb0689f1ed88a435a",
          "linkedWithoutMetadata": "5436430857dc9cbd25729b19154f8f2a416e11662c36f73bb0689f1ed88a435a"
        },
        "inherit": [
          "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingCustomRegistryStrategy",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7094_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(SimpleProjectRegistry)7065",
              "contract": "DonationVotingCustomRegistryStrategy",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(SimpleProjectRegistry)7065": {
              "label": "contract SimpleProjectRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7094_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4252_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7094_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:SimpleProjectRegistry": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:26",
        "version": {
          "withMetadata": "4872ecc84acced32728eed6343875a4d2bfaa01fdd643e8f15da29efd11e4b66",
          "withoutMetadata": "4872ecc84acced32728eed6343875a4d2bfaa01fdd643e8f15da29efd11e4b66",
          "linkedWithoutMetadata": "4872ecc84acced32728eed6343875a4d2bfaa01fdd643e8f15da29efd11e4b66"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addProject(address)",
          "addProjects(address[])",
          "removeProject(address)",
          "removeProjects(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleProjectRegistry",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "projects",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleProjectRegistry",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy": {
        "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:100",
        "version": {
          "withMetadata": "7dba3a5ab68843aa26556498acde934160834e54fd4f950e08a39ca52bd0c942",
          "withoutMetadata": "7dba3a5ab68843aa26556498acde934160834e54fd4f950e08a39ca52bd0c942",
          "linkedWithoutMetadata": "7dba3a5ab68843aa26556498acde934160834e54fd4f950e08a39ca52bd0c942"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "setPayout(address[],uint256[])",
          "claim(struct DonationVotingStrategy.Claim[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingStrategy",
            "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:198"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7094_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7094_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4252_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7094_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:ProportionalPayoutStrategy": {
        "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:112",
        "version": {
          "withMetadata": "47b6c4732b7532505ee90a002b1c3e4429ef81452c3fc2a193702e9478143163",
          "withoutMetadata": "47b6c4732b7532505ee90a002b1c3e4429ef81452c3fc2a193702e9478143163",
          "linkedWithoutMetadata": "47b6c4732b7532505ee90a002b1c3e4429ef81452c3fc2a193702e9478143163"
        },
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "setAllocationTime(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProportionalPayoutStrategy",
            "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:166"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Recipient)8501_storage)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:151"
            },
            {
              "label": "hasAllocated",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:152"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:153"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ERC721)32389",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "maxRecipientsAllowed",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:157"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:158"
            },
            {
              "label": "totalAllocations",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:159"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)32389": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)8501_storage)": {
              "label": "mapping(address => struct ProportionalPayoutStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)8501_storage": {
              "label": "struct ProportionalPayoutStrategy.Recipient",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:QVGovernanceERC20Votes": {
        "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:89",
        "version": {
          "withMetadata": "fe3039d435566705ba44de0c2bc10dc2f582b488503906316b12e363420046e6",
          "withoutMetadata": "fe3039d435566705ba44de0c2bc10dc2f582b488503906316b12e363420046e6",
          "linkedWithoutMetadata": "fe3039d435566705ba44de0c2bc10dc2f582b488503906316b12e363420046e6"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVGovernanceERC20Votes",
            "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:104"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "govToken",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IVotes)20349",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:97"
            },
            {
              "label": "timestamp",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:98"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IVotes)20349": {
              "label": "contract IVotes",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:HackathonQVStrategy": {
        "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:111",
        "version": {
          "withMetadata": "337c0d03719a5a2d0d2b2d1712cc225a491302e6b6b4646116221ad6796448e4",
          "withoutMetadata": "337c0d03719a5a2d0d2b2d1712cc225a491302e6b6b4646116221ad6796448e4",
          "linkedWithoutMetadata": "337c0d03719a5a2d0d2b2d1712cc225a491302e6b6b4646116221ad6796448e4"
        },
        "inherit": [
          "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver",
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllowedRecipientIds(address[],uint64,bytes)",
          "setPayoutPercentages(uint256[])",
          "getPayouts(address[],bytes[])",
          "getAttestation(bytes32)",
          "getSchema(bytes32)",
          "isPayable()",
          "isAttestationExpired(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HackathonQVStrategy",
            "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:148"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "_eas",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IEAS)19040",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            },
            {
              "label": "payoutPercentages",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:130"
            },
            {
              "label": "votesByRank",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:131"
            },
            {
              "label": "easInfo",
              "offset": 0,
              "slot": "14",
              "type": "t_struct(EASInfo)9390_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "19",
              "type": "t_contract(ERC721)32389",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "recipientIdToUID",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:135"
            },
            {
              "label": "recipientIdToIndex",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:137"
            },
            {
              "label": "indexToRecipientId",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:143"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ERC721)32389": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IEAS)19040": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(ISchemaRegistry)19085": {
              "label": "contract ISchemaRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(EASInfo)9390_storage": {
              "label": "struct HackathonQVStrategy.EASInfo",
              "members": [
                {
                  "label": "eas",
                  "type": "t_contract(IEAS)19040",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "schemaRegistry",
                  "type": "t_contract(ISchemaRegistry)19085",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "schemaUID",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "schema",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "revocable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver": {
        "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:19",
        "inherit": [
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver"
        ],
        "libraries": [],
        "methods": [
          "isPayable()",
          "()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_eas",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IEAS)19040",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            }
          ],
          "types": {
            "t_contract(IEAS)19040": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:QVNftTieredStrategy": {
        "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:96",
        "version": {
          "withMetadata": "8ce2b2d04d2cbc4075c9e192aae0f21ad758c8bf41c6bf9f171411cecbff895b",
          "withoutMetadata": "8ce2b2d04d2cbc4075c9e192aae0f21ad758c8bf41c6bf9f171411cecbff895b",
          "linkedWithoutMetadata": "8ce2b2d04d2cbc4075c9e192aae0f21ad758c8bf41c6bf9f171411cecbff895b"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVNftTieredStrategy",
            "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "nfts",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_contract(ERC721)32389)dyn_storage",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:112"
            },
            {
              "label": "maxVoiceCreditsPerNft",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_contract(ERC721)32389,t_uint256)",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:113"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_contract(ERC721)32389,t_mapping(t_uint256,t_uint256))",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(ERC721)32389)dyn_storage": {
              "label": "contract ERC721[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)32389": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)32389,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(contract ERC721 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)32389,t_uint256)": {
              "label": "mapping(contract ERC721 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:LockupDynamicStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:16",
        "version": {
          "withMetadata": "78a29a28f36ddff7c429a2ee168decae3bf8daa6a77af68ae71724fdafb8ef7f",
          "withoutMetadata": "78a29a28f36ddff7c429a2ee168decae3bf8daa6a77af68ae71724fdafb8ef7f",
          "linkedWithoutMetadata": "78a29a28f36ddff7c429a2ee168decae3bf8daa6a77af68ae71724fdafb8ef7f"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientSegments(address,struct LockupDynamic.SegmentWithDelta[])",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupDynamicStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:42"
            },
            {
              "label": "lockupDynamic",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupDynamic)30800",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)30920_storage",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)11146_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(SegmentWithDelta)31004_storage)dyn_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupDynamic)30800": {
              "label": "contract ISablierV2LockupDynamic",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)11146_storage)": {
              "label": "mapping(address => struct LockupDynamicStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)30920_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)30161",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)11146_storage": {
              "label": "struct LockupDynamicStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "segments",
                  "type": "t_array(t_struct(SegmentWithDelta)31004_storage)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(SegmentWithDelta)31004_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exponent",
                  "type": "t_userDefinedValueType(UD2x18)28357",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "delta",
                  "type": "t_uint40",
                  "offset": 24,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD2x18)28357": {
              "label": "UD2x18",
              "numberOfBytes": "8",
              "underlying": "t_uint64"
            },
            "t_userDefinedValueType(UD60x18)30161": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:LockupLinearStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:16",
        "version": {
          "withMetadata": "bfeeb0651fead05e0c72afae72706b21657fa2de9edf67a1012c76c3864e90d6",
          "withoutMetadata": "bfeeb0651fead05e0c72afae72706b21657fa2de9edf67a1012c76c3864e90d6",
          "linkedWithoutMetadata": "bfeeb0651fead05e0c72afae72706b21657fa2de9edf67a1012c76c3864e90d6"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientDurations(address,(uint40,uint40))",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupLinearStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:42"
            },
            {
              "label": "lockupLinear",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupLinear)30889",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)30920_storage",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)12323_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupLinear)30889": {
              "label": "contract ISablierV2LockupLinear",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12323_storage)": {
              "label": "mapping(address => struct LockupLinearStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)30920_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)30161",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Durations)31072_storage": {
              "label": "struct LockupLinear.Durations",
              "members": [
                {
                  "label": "cliff",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "total",
                  "type": "t_uint40",
                  "offset": 5,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12323_storage": {
              "label": "struct LockupLinearStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durations",
                  "type": "t_struct(Durations)31072_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD60x18)30161": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:NFT": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:8",
        "version": {
          "withMetadata": "1d96dede4e4bf1a487a335c1a7f41b8ceb1dde94a7175cfe1b65a0276db974ef",
          "withoutMetadata": "1d96dede4e4bf1a487a335c1a7f41b8ceb1dde94a7175cfe1b65a0276db974ef",
          "linkedWithoutMetadata": "1d96dede4e4bf1a487a335c1a7f41b8ceb1dde94a7175cfe1b65a0276db974ef"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable",
          "solady/src/tokens/ERC721.sol:ERC721"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)",
          "name()",
          "symbol()",
          "mintTo(address)",
          "tokenURI(uint256)",
          "withdrawPayments(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFT",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTokenId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:16"
            },
            {
              "label": "MINT_PRICE",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:17"
            },
            {
              "label": "__name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:20"
            },
            {
              "label": "__symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:NFTFactory": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:6",
        "version": {
          "withMetadata": "aa5d8ba55d2e9bddefa5d7dd4fead5d7ab79f2686e534557832aa8e5bdbbd445",
          "withoutMetadata": "aa5d8ba55d2e9bddefa5d7dd4fead5d7ab79f2686e534557832aa8e5bdbbd445",
          "linkedWithoutMetadata": "aa5d8ba55d2e9bddefa5d7dd4fead5d7ab79f2686e534557832aa8e5bdbbd445"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createNFTContract(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isNFTContract",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NFTFactory",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:WrappedVotingNftMintStrategy": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:100",
        "version": {
          "withMetadata": "8db4ed40895f39ee1913a60d6fec3f3cd3a6c082b04f191a55b0dd3edd52a030",
          "withoutMetadata": "8db4ed40895f39ee1913a60d6fec3f3cd3a6c082b04f191a55b0dd3edd52a030",
          "linkedWithoutMetadata": "8db4ed40895f39ee1913a60d6fec3f3cd3a6c082b04f191a55b0dd3edd52a030"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllocationTimes(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrappedVotingNftMintStrategy",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:147"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "nftFactory",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(NFTFactory)13537",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:134"
            },
            {
              "label": "allocationStartTime",
              "offset": 20,
              "slot": "4",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "currentWinner",
              "offset": 8,
              "slot": "5",
              "type": "t_address",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "allocations",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(NFTFactory)13537": {
              "label": "contract NFTFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:99",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(struct DonationVotingMerkleDistributionBaseStrategy.ApplicationStatus[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "updateDistribution(bytes32,(uint256,string))",
          "isDistributionSet()",
          "hasBeenDistributed(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionBaseStrategy",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:286"
          },
          {
            "kind": "state-variable-immutable",
            "name": "PERMIT2",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:230"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4531_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)14108_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14108_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14108_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:DonationVotingMerkleDistributionDirectTransferStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76",
        "version": {
          "withMetadata": "e6832de21474c500956967331c1c1fb2e065816bcbc49e6f30ec644620d9367a",
          "withoutMetadata": "e6832de21474c500956967331c1c1fb2e065816bcbc49e6f30ec644620d9367a",
          "linkedWithoutMetadata": "e6832de21474c500956967331c1c1fb2e065816bcbc49e6f30ec644620d9367a"
        },
        "inherit": [
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionDirectTransferStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4531_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)14108_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14108_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14108_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:DonationVotingMerkleDistributionVaultStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:92",
        "version": {
          "withMetadata": "a5219a82b1a79832a2da5b55044857a54cbe9fd0e75d93d6634708ef5895b194",
          "withoutMetadata": "a5219a82b1a79832a2da5b55044857a54cbe9fd0e75d93d6634708ef5895b194",
          "linkedWithoutMetadata": "a5219a82b1a79832a2da5b55044857a54cbe9fd0e75d93d6634708ef5895b194"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)",
          "claim(struct DonationVotingMerkleDistributionVaultStrategy.Claim[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionVaultStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4531_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)14108_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "16",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "16",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "18",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "67",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14108_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14108_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy": {
        "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:89",
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVBaseStrategy",
            "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:258"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-simple/QVSimpleStrategy.sol:QVSimpleStrategy": {
        "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:89",
        "version": {
          "withMetadata": "aacb8075e5bd0625fa1640d479dd384cb2d1a20820fe83aa04e6a7feb520ba2f",
          "withoutMetadata": "aacb8075e5bd0625fa1640d479dd384cb2d1a20820fe83aa04e6a7feb520ba2f",
          "linkedWithoutMetadata": "aacb8075e5bd0625fa1640d479dd384cb2d1a20820fe83aa04e6a7feb520ba2f"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "addAllocator(address)",
          "removeAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVSimpleStrategy",
            "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:121"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16160_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16171_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:108"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:111"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16171_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16160_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16171_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16160_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:RFPCommitteeStrategy": {
        "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:83",
        "version": {
          "withMetadata": "fabb72fa13ca42e8713616a60823dca80a6199879487dd1b3219225aeee674b6",
          "withoutMetadata": "fabb72fa13ca42e8713616a60823dca80a6199879487dd1b3219225aeee674b6",
          "linkedWithoutMetadata": "fabb72fa13ca42e8713616a60823dca80a6199879487dd1b3219225aeee674b6"
        },
        "inherit": [
          "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPCommitteeStrategy",
            "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4234",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)17670_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)17661_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "voteThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:104"
            },
            {
              "label": "votedFor",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:109"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:114"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)17670_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17661_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)17670_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)17661_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy": {
        "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:107",
        "version": {
          "withMetadata": "14c4702620d2a24cf0252e5a06c37de9594d71fe84e9fbf0cff0a775ebab83cc",
          "withoutMetadata": "14c4702620d2a24cf0252e5a06c37de9594d71fe84e9fbf0cff0a775ebab83cc",
          "linkedWithoutMetadata": "14c4702620d2a24cf0252e5a06c37de9594d71fe84e9fbf0cff0a775ebab83cc"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getPayouts(address[],bytes[])",
          "getMilestone(uint256)",
          "getMilestoneStatus(uint256)",
          "setPoolActive(bool)",
          "setMilestones(struct RFPSimpleStrategy.Milestone[])",
          "submitUpcomingMilestone((uint256,string))",
          "increaseMaxBid(uint256)",
          "rejectMilestone(uint256)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPSimpleStrategy",
            "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:199"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4234",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)17670_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)17661_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)17670_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Recipient)17661_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)17670_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)17661_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/IEAS.sol:IEAS": {
        "src": "lib/eas-contracts/contracts/IEAS.sol:82",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSchemaRegistry()",
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))",
          "multiAttest(struct MultiAttestationRequest[])",
          "multiAttestByDelegation(struct MultiDelegatedAttestationRequest[])",
          "revoke((bytes32,(bytes32,uint256)))",
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))",
          "multiRevoke(struct MultiRevocationRequest[])",
          "multiRevokeByDelegation(struct MultiDelegatedRevocationRequest[])",
          "timestamp(bytes32)",
          "multiTimestamp(bytes32[])",
          "revokeOffchain(bytes32)",
          "multiRevokeOffchain(bytes32[])",
          "getAttestation(bytes32)",
          "isAttestationValid(bytes32)",
          "getTimestamp(bytes32)",
          "getRevokeOffchain(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol:ISchemaRegistry": {
        "src": "lib/eas-contracts/contracts/ISchemaRegistry.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "register(string,address,bool)",
          "getSchema(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver": {
        "src": "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:19",
        "version": {
          "withMetadata": "ed16f8429eb254d93d9630c2d2344a49a2a1851803d9bfa0370770923da86197",
          "withoutMetadata": "ed16f8429eb254d93d9630c2d2344a49a2a1851803d9bfa0370770923da86197",
          "linkedWithoutMetadata": "ed16f8429eb254d93d9630c2d2344a49a2a1851803d9bfa0370770923da86197"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "1f8def96aa7a82e95878f61f697fb087b9e4ddfda2277db9d45f856d0a1d4562",
          "withoutMetadata": "1f8def96aa7a82e95878f61f697fb087b9e4ddfda2277db9d45f856d0a1d4562",
          "linkedWithoutMetadata": "1f8def96aa7a82e95878f61f697fb087b9e4ddfda2277db9d45f856d0a1d4562"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:50",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19902_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19902_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "0d4cf4baed82839eb852a6f9e82eb53e59cb876e75a90b36d70e45016331267f",
          "withoutMetadata": "0d4cf4baed82839eb852a6f9e82eb53e59cb876e75a90b36d70e45016331267f",
          "linkedWithoutMetadata": "0d4cf4baed82839eb852a6f9e82eb53e59cb876e75a90b36d70e45016331267f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "76b6a2d9fed7655756962087153015babe29bd98f3a08ff2447561fb430faa10",
          "withoutMetadata": "76b6a2d9fed7655756962087153015babe29bd98f3a08ff2447561fb430faa10",
          "linkedWithoutMetadata": "76b6a2d9fed7655756962087153015babe29bd98f3a08ff2447561fb430faa10"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "ab9dde492f795b94a8f7797f8d3a8dcc3d0ed91e55584caeb7c7a0d8aed2514a",
          "withoutMetadata": "ab9dde492f795b94a8f7797f8d3a8dcc3d0ed91e55584caeb7c7a0d8aed2514a",
          "linkedWithoutMetadata": "ab9dde492f795b94a8f7797f8d3a8dcc3d0ed91e55584caeb7c7a0d8aed2514a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "8f85ccd77a8097742925e67e249116e51ca4d73921171937c0e07e4a15f7ecab",
          "withoutMetadata": "8f85ccd77a8097742925e67e249116e51ca4d73921171937c0e07e4a15f7ecab",
          "linkedWithoutMetadata": "8f85ccd77a8097742925e67e249116e51ca4d73921171937c0e07e4a15f7ecab"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "a7ca15121e0b9a05cf300ae7132e86543ccba4d722fce3efeea4df175094c354",
          "withoutMetadata": "a7ca15121e0b9a05cf300ae7132e86543ccba4d722fce3efeea4df175094c354",
          "linkedWithoutMetadata": "a7ca15121e0b9a05cf300ae7132e86543ccba4d722fce3efeea4df175094c354"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "ef4d490b822cc99cbe5f4e65c2c7a533b01f5759c661f7b2c993a5b8f2501ebe",
          "withoutMetadata": "ef4d490b822cc99cbe5f4e65c2c7a533b01f5759c661f7b2c993a5b8f2501ebe",
          "linkedWithoutMetadata": "ef4d490b822cc99cbe5f4e65c2c7a533b01f5759c661f7b2c993a5b8f2501ebe"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/IEIP712.sol:IEIP712": {
        "src": "lib/permit2/src/interfaces/IEIP712.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/ISignatureTransfer.sol:ISignatureTransfer": {
        "src": "lib/permit2/src/interfaces/ISignatureTransfer.sol:9",
        "inherit": [
          "lib/permit2/src/interfaces/IEIP712.sol:IEIP712"
        ],
        "libraries": [],
        "methods": [
          "nonceBitmap(address,uint256)",
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)",
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)",
          "permitTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes)",
          "permitWitnessTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes32,string,bytes)",
          "invalidateUnorderedNonces(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable": {
        "src": "lib/v2-core/src/interfaces/IAdminable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "transferAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Base.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "comptroller()",
          "protocolRevenues(address)",
          "claimProtocolRevenues(address)",
          "setComptroller(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:ISablierV2Comptroller": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "flashFee()",
          "isFlashAsset(address)",
          "protocolFees(address)",
          "setFlashFee(uint256)",
          "setProtocolFee(address,uint256)",
          "toggleFlashAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:13",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getAsset(uint256)",
          "getDepositedAmount(uint256)",
          "getEndTime(uint256)",
          "getRecipient(uint256)",
          "getRefundedAmount(uint256)",
          "getSender(uint256)",
          "getStartTime(uint256)",
          "getWithdrawnAmount(uint256)",
          "isCancelable(uint256)",
          "isCold(uint256)",
          "isDepleted(uint256)",
          "isStream(uint256)",
          "isWarm(uint256)",
          "nextStreamId()",
          "refundableAmountOf(uint256)",
          "statusOf(uint256)",
          "streamedAmountOf(uint256)",
          "wasCanceled(uint256)",
          "withdrawableAmountOf(uint256)",
          "burn(uint256)",
          "cancel(uint256)",
          "cancelMultiple(uint256[])",
          "renounce(uint256)",
          "setNFTDescriptor(address)",
          "withdraw(uint256,address,uint128)",
          "withdrawMax(uint256,address)",
          "withdrawMaxAndTransfer(uint256,address)",
          "withdrawMultiple(uint256[],address,uint128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:ISablierV2LockupDynamic": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_SEGMENT_COUNT()",
          "getRange(uint256)",
          "getSegments(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDeltas((address,bool,address,uint128,address,(address,uint256),struct LockupDynamic.SegmentWithDelta[]))",
          "createWithMilestones((address,uint40,bool,address,uint128,address,(address,uint256),struct LockupDynamic.Segment[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:ISablierV2LockupLinear": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getCliffTime(uint256)",
          "getRange(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))",
          "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:ISablierV2NFTDescriptor": {
        "src": "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:Lockup": {
        "src": "lib/v2-core/src/types/DataTypes.sol:29",
        "version": {
          "withMetadata": "ef8dc1b1fc67ff7ed0bb9c3cc767cf2d8a0deb1a39286158b8016c9d1dc56956",
          "withoutMetadata": "ef8dc1b1fc67ff7ed0bb9c3cc767cf2d8a0deb1a39286158b8016c9d1dc56956",
          "linkedWithoutMetadata": "ef8dc1b1fc67ff7ed0bb9c3cc767cf2d8a0deb1a39286158b8016c9d1dc56956"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupDynamic": {
        "src": "lib/v2-core/src/types/DataTypes.sol:72",
        "version": {
          "withMetadata": "ee2e3b7d2092b3c4e547e5df35693377861bb3b269f1425d0fd93bf07f237125",
          "withoutMetadata": "ee2e3b7d2092b3c4e547e5df35693377861bb3b269f1425d0fd93bf07f237125",
          "linkedWithoutMetadata": "ee2e3b7d2092b3c4e547e5df35693377861bb3b269f1425d0fd93bf07f237125"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupLinear": {
        "src": "lib/v2-core/src/types/DataTypes.sol:180",
        "version": {
          "withMetadata": "555688ae1daca598f547d0a82f93ad62e41d1fc7db3d89b9a435eaa9873b3b6b",
          "withoutMetadata": "555688ae1daca598f547d0a82f93ad62e41d1fc7db3d89b9a435eaa9873b3b6b",
          "linkedWithoutMetadata": "555688ae1daca598f547d0a82f93ad62e41d1fc7db3d89b9a435eaa9873b3b6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/auth/Ownable.sol:Ownable": {
        "src": "solady/src/auth/Ownable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "renounceOwnership()",
          "requestOwnershipHandover()",
          "cancelOwnershipHandover()",
          "completeOwnershipHandover(address)",
          "owner()",
          "ownershipHandoverExpiresAt(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC20.sol:ERC20": {
        "src": "solady/src/tokens/ERC20.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC721.sol:ERC721": {
        "src": "solady/src/tokens/ERC721.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "balanceOf(address)",
          "getApproved(uint256)",
          "approve(address,uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/CREATE3.sol:CREATE3": {
        "src": "solady/src/utils/CREATE3.sol:8",
        "version": {
          "withMetadata": "4eefab8a49edfc43346a3cd34173d22ca90a5cc1524d6842f86e7a459d0130d6",
          "withoutMetadata": "4eefab8a49edfc43346a3cd34173d22ca90a5cc1524d6842f86e7a459d0130d6",
          "linkedWithoutMetadata": "4eefab8a49edfc43346a3cd34173d22ca90a5cc1524d6842f86e7a459d0130d6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/SafeTransferLib.sol:SafeTransferLib": {
        "src": "solady/src/utils/SafeTransferLib.sol:12",
        "version": {
          "withMetadata": "c43e1383ef3d8e1a40d60d83ec455ce207f2c76fd422e4a516d243f0cad20e86",
          "withoutMetadata": "c43e1383ef3d8e1a40d60d83ec455ce207f2c76fd422e4a516d243f0cad20e86",
          "linkedWithoutMetadata": "c43e1383ef3d8e1a40d60d83ec455ce207f2c76fd422e4a516d243f0cad20e86"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "df878802c17702b9939190e59d6a0dd7e7d13e6fcba4edc998868b2ce3d5e161",
          "withoutMetadata": "df878802c17702b9939190e59d6a0dd7e7d13e6fcba4edc998868b2ce3d5e161",
          "linkedWithoutMetadata": "df878802c17702b9939190e59d6a0dd7e7d13e6fcba4edc998868b2ce3d5e161"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "49870c267861c05cd8851a77a18693ff9afc1b813d708a024b11a5fd11e6cbbd",
          "withoutMetadata": "49870c267861c05cd8851a77a18693ff9afc1b813d708a024b11a5fd11e6cbbd",
          "linkedWithoutMetadata": "49870c267861c05cd8851a77a18693ff9afc1b813d708a024b11a5fd11e6cbbd"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "7311e22e67d3e0985e1d9c6412f73bb7143b013bace73c620b759f0b4bded87a",
          "withoutMetadata": "7311e22e67d3e0985e1d9c6412f73bb7143b013bace73c620b759f0b4bded87a",
          "linkedWithoutMetadata": "7311e22e67d3e0985e1d9c6412f73bb7143b013bace73c620b759f0b4bded87a"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "d0614e13d02020e7b61eea4f5b1883c7ea75979b88d26e83deca96797439c019",
          "withoutMetadata": "d0614e13d02020e7b61eea4f5b1883c7ea75979b88d26e83deca96797439c019",
          "linkedWithoutMetadata": "d0614e13d02020e7b61eea4f5b1883c7ea75979b88d26e83deca96797439c019"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "2a71c32e332df633d3ff6bb9d45333666432674b0dc212b28731ca5008d2210f",
          "withoutMetadata": "2a71c32e332df633d3ff6bb9d45333666432674b0dc212b28731ca5008d2210f",
          "linkedWithoutMetadata": "2a71c32e332df633d3ff6bb9d45333666432674b0dc212b28731ca5008d2210f"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "5c2650967379de439d1eb4f4398e9ba0fb06a752ebf5d90dd95a2971e8201749",
          "withoutMetadata": "5c2650967379de439d1eb4f4398e9ba0fb06a752ebf5d90dd95a2971e8201749",
          "linkedWithoutMetadata": "5c2650967379de439d1eb4f4398e9ba0fb06a752ebf5d90dd95a2971e8201749"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "f006eaba308a27f94f0952f78e301b7333f863ae4e1d47cb722291acc4ab9b15",
          "withoutMetadata": "f006eaba308a27f94f0952f78e301b7333f863ae4e1d47cb722291acc4ab9b15",
          "linkedWithoutMetadata": "f006eaba308a27f94f0952f78e301b7333f863ae4e1d47cb722291acc4ab9b15"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Allo.sol:Allo": {
        "src": "contracts/core/Allo.sol:89",
        "version": {
          "withMetadata": "6f13e85c69cd3fe5914d666be2e9b8945bab5edc27adde21c32c235a026a4ce1",
          "withoutMetadata": "6f13e85c69cd3fe5914d666be2e9b8945bab5edc27adde21c32c235a026a4ce1",
          "linkedWithoutMetadata": "6f13e85c69cd3fe5914d666be2e9b8945bab5edc27adde21c32c235a026a4ce1"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "solady/src/auth/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IAllo.sol:IAllo"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "getFeeDenominator()",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "isCloneableStrategy(address)",
          "getPool(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19903_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "percentFee",
              "offset": 0,
              "slot": "52",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:114"
            },
            {
              "label": "baseFee",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:129"
            },
            {
              "label": "_poolIndex",
              "offset": 0,
              "slot": "54",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "55",
              "type": "t_address_payable",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "56",
              "type": "t_contract(IRegistry)4234",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:133"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "57",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:134"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "58",
              "type": "t_mapping(t_uint256,t_struct(Pool)3753_storage)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:135"
            },
            {
              "label": "cloneableStrategies",
              "offset": 0,
              "slot": "59",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)4405": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19903_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)3753_storage)": {
              "label": "mapping(uint256 => struct IAllo.Pool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Pool)3753_storage": {
              "label": "struct IAllo.Pool",
              "members": [
                {
                  "label": "profileId",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "strategy",
                  "type": "t_contract(IStrategy)4405",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "managerRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)19903_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Anchor.sol:Anchor": {
        "src": "contracts/core/Anchor.sol:89",
        "version": {
          "withMetadata": "612d1e183db7e5c51df32dcc5486e0fa72ed8341f9b2db7f95269595c087d4be",
          "withoutMetadata": "612d1e183db7e5c51df32dcc5486e0fa72ed8341f9b2db7f95269595c087d4be",
          "linkedWithoutMetadata": "612d1e183db7e5c51df32dcc5486e0fa72ed8341f9b2db7f95269595c087d4be"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "execute(address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Anchor",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "profileId",
            "src": "contracts/core/Anchor.sol:89"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Registry.sol:Registry": {
        "src": "contracts/core/Registry.sol:103",
        "version": {
          "withMetadata": "62e79c123ebb73199bf97ca06f207368292fe8e246dcb65f1cba0b4b0d240788",
          "withoutMetadata": "62e79c123ebb73199bf97ca06f207368292fe8e246dcb65f1cba0b4b0d240788",
          "linkedWithoutMetadata": "62e79c123ebb73199bf97ca06f207368292fe8e246dcb65f1cba0b4b0d240788"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "contracts/core/libraries/Native.sol:Native",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "contracts/core/interfaces/IRegistry.sol:IRegistry"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19903_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "anchorToProfileId",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:109"
            },
            {
              "label": "profilesById",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_struct(Profile)4061_storage)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:111"
            },
            {
              "label": "profileIdToPendingOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:113"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Profile)4061_storage)": {
              "label": "mapping(bytes32 => struct IRegistry.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19903_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Profile)4061_storage": {
              "label": "struct IRegistry.Profile",
              "members": [
                {
                  "label": "id",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "anchor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)19903_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IAllo.sol:IAllo": {
        "src": "contracts/core/interfaces/IAllo.sol:97",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "isCloneableStrategy(address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "getPool(uint256)",
          "getFeeDenominator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IRegistry.sol:IRegistry": {
        "src": "contracts/core/interfaces/IRegistry.sol:92",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/core/interfaces/IStrategy.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "isValidAllocator(address)",
          "isPoolActive()",
          "getPoolAmount()",
          "increasePoolAmount(uint256)",
          "getRecipientStatus(address)",
          "getPayouts(address[],bytes[])",
          "initialize(uint256,bytes)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Clone.sol:Clone": {
        "src": "contracts/core/libraries/Clone.sol:37",
        "version": {
          "withMetadata": "236d86aa7b15e425a2d1615b014efebda6c6a89dd2f419c478eeae3f06661d04",
          "withoutMetadata": "236d86aa7b15e425a2d1615b014efebda6c6a89dd2f419c478eeae3f06661d04",
          "linkedWithoutMetadata": "236d86aa7b15e425a2d1615b014efebda6c6a89dd2f419c478eeae3f06661d04"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Errors.sol:Errors": {
        "src": "contracts/core/libraries/Errors.sol:109",
        "version": {
          "withMetadata": "1d6a3226826e878ef2f1304b4100c6b2e3ac951584622bbf4c64573ba26b6846",
          "withoutMetadata": "1d6a3226826e878ef2f1304b4100c6b2e3ac951584622bbf4c64573ba26b6846",
          "linkedWithoutMetadata": "1d6a3226826e878ef2f1304b4100c6b2e3ac951584622bbf4c64573ba26b6846"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Native.sol:Native": {
        "src": "contracts/core/libraries/Native.sol:26",
        "version": {
          "withMetadata": "8f49bf8218f6d1dd8f4a2f6bc604a9be7f07fe699d47c5cb0d0ce841c4f60316",
          "withoutMetadata": "8f49bf8218f6d1dd8f4a2f6bc604a9be7f07fe699d47c5cb0d0ce841c4f60316",
          "linkedWithoutMetadata": "8f49bf8218f6d1dd8f4a2f6bc604a9be7f07fe699d47c5cb0d0ce841c4f60316"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Transfer.sol:Transfer": {
        "src": "contracts/core/libraries/Transfer.sol:95",
        "version": {
          "withMetadata": "6d09a50898a120281754a0372b028f52fefcd816bc174b40a393cc9e7efae73c",
          "withoutMetadata": "6d09a50898a120281754a0372b028f52fefcd816bc174b40a393cc9e7efae73c",
          "linkedWithoutMetadata": "6d09a50898a120281754a0372b028f52fefcd816bc174b40a393cc9e7efae73c"
        },
        "inherit": [
          "contracts/core/libraries/Native.sol:Native"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/factory/ContractFactory.sol:ContractFactory": {
        "src": "contracts/factory/ContractFactory.sol:107",
        "version": {
          "withMetadata": "e61e3400478278b7d2d32ebb3d335b710c5998a60e28a56d485183b416058fad",
          "withoutMetadata": "e61e3400478278b7d2d32ebb3d335b710c5998a60e28a56d485183b416058fad",
          "linkedWithoutMetadata": "e61e3400478278b7d2d32ebb3d335b710c5998a60e28a56d485183b416058fad"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "deploy(string,string,bytes)",
          "setDeployer(address,bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ContractFactory",
            "src": "contracts/factory/ContractFactory.sol:119"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "usedSalts",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            },
            {
              "label": "isDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/BaseStrategy.sol:BaseStrategy": {
        "src": "contracts/strategies/BaseStrategy.sol:111",
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "getPoolAmount()",
          "isPoolActive()",
          "getRecipientStatus(address)",
          "increasePoolAmount(uint256)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)",
          "getPayouts(address[],bytes[])",
          "isValidAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseStrategy",
            "src": "contracts/strategies/BaseStrategy.sol:129"
          },
          {
            "kind": "state-variable-immutable",
            "name": "allo",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          },
          {
            "kind": "state-variable-immutable",
            "name": "strategyId",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:DirectGrantsSimpleStrategy": {
        "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:112",
        "version": {
          "withMetadata": "79c1f218d1533286b0ef091aaa0bc6835187e517bc3388fe999d1b881cf40e6d",
          "withoutMetadata": "79c1f218d1533286b0ef091aaa0bc6835187e517bc3388fe999d1b881cf40e6d",
          "linkedWithoutMetadata": "79c1f218d1533286b0ef091aaa0bc6835187e517bc3388fe999d1b881cf40e6d"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getMilestoneStatus(address,uint256)",
          "getMilestones(address)",
          "setMilestones(address,struct DirectGrantsSimpleStrategy.Milestone[])",
          "reviewSetMilestones(address,uint8)",
          "submitMilestone(address,uint256,(uint256,string))",
          "rejectMilestone(address,uint256)",
          "setRecipientStatusToInReview(address[])",
          "setPoolActive(bool)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DirectGrantsSimpleStrategy",
            "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:191"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:161"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:162"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:164"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:166"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:167"
            },
            {
              "label": "_acceptedRecipientIds",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:172"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)5493_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:177"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Milestone)5502_storage)dyn_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:179"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:184"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)5502_storage)dyn_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(Milestone)5502_storage)dyn_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Milestone[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5493_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)5502_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)5493_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "milestonesReviewStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:DonationVotingCustomRegistryStrategy": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51",
        "version": {
          "withMetadata": "a4f72afbf978721c4ed97ae1c04f3df39e723761e27e7b9bc2f619711e1fd2d9",
          "withoutMetadata": "a4f72afbf978721c4ed97ae1c04f3df39e723761e27e7b9bc2f619711e1fd2d9",
          "linkedWithoutMetadata": "a4f72afbf978721c4ed97ae1c04f3df39e723761e27e7b9bc2f619711e1fd2d9"
        },
        "inherit": [
          "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingCustomRegistryStrategy",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7094_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(SimpleProjectRegistry)7065",
              "contract": "DonationVotingCustomRegistryStrategy",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(SimpleProjectRegistry)7065": {
              "label": "contract SimpleProjectRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7094_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4252_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7094_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:SimpleProjectRegistry": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:26",
        "version": {
          "withMetadata": "e42b32c0659ffeb1e27c9bfd4af48169940da8d5fe2846cc4b1512902e44f040",
          "withoutMetadata": "e42b32c0659ffeb1e27c9bfd4af48169940da8d5fe2846cc4b1512902e44f040",
          "linkedWithoutMetadata": "e42b32c0659ffeb1e27c9bfd4af48169940da8d5fe2846cc4b1512902e44f040"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addProject(address)",
          "addProjects(address[])",
          "removeProject(address)",
          "removeProjects(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleProjectRegistry",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "projects",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleProjectRegistry",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy": {
        "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:100",
        "version": {
          "withMetadata": "7cd7e816d080a83f7588d9e04490f99519a059d7bb4d7ffcb19173933f66a327",
          "withoutMetadata": "7cd7e816d080a83f7588d9e04490f99519a059d7bb4d7ffcb19173933f66a327",
          "linkedWithoutMetadata": "7cd7e816d080a83f7588d9e04490f99519a059d7bb4d7ffcb19173933f66a327"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "setPayout(address[],uint256[])",
          "claim(struct DonationVotingStrategy.Claim[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingStrategy",
            "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:198"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)7094_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)4252_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)7094_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)4252_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)7094_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:ProportionalPayoutStrategy": {
        "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:112",
        "version": {
          "withMetadata": "40285487b462cb6caefa040d9b09ab2ce9fed729365f8dbbcbcc0306c6a8a867",
          "withoutMetadata": "40285487b462cb6caefa040d9b09ab2ce9fed729365f8dbbcbcc0306c6a8a867",
          "linkedWithoutMetadata": "40285487b462cb6caefa040d9b09ab2ce9fed729365f8dbbcbcc0306c6a8a867"
        },
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "setAllocationTime(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProportionalPayoutStrategy",
            "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:166"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Recipient)8501_storage)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:151"
            },
            {
              "label": "hasAllocated",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:152"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:153"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ERC721)32390",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "maxRecipientsAllowed",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:157"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:158"
            },
            {
              "label": "totalAllocations",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:159"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)32390": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)8501_storage)": {
              "label": "mapping(address => struct ProportionalPayoutStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)8501_storage": {
              "label": "struct ProportionalPayoutStrategy.Recipient",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:QVGovernanceERC20Votes": {
        "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:89",
        "version": {
          "withMetadata": "13288ad412599359e2221dc690d74eb72f7edb248e60ca921297f4f799aa5e58",
          "withoutMetadata": "13288ad412599359e2221dc690d74eb72f7edb248e60ca921297f4f799aa5e58",
          "linkedWithoutMetadata": "13288ad412599359e2221dc690d74eb72f7edb248e60ca921297f4f799aa5e58"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVGovernanceERC20Votes",
            "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:104"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16161_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16172_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "govToken",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IVotes)20350",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:97"
            },
            {
              "label": "timestamp",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:98"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IVotes)20350": {
              "label": "contract IVotes",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16172_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16161_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16172_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16161_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:HackathonQVStrategy": {
        "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:111",
        "version": {
          "withMetadata": "71a6412e0f062fa637a8fd176f5b594264c9befa635577caf9a5e66f33f85a16",
          "withoutMetadata": "71a6412e0f062fa637a8fd176f5b594264c9befa635577caf9a5e66f33f85a16",
          "linkedWithoutMetadata": "71a6412e0f062fa637a8fd176f5b594264c9befa635577caf9a5e66f33f85a16"
        },
        "inherit": [
          "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver",
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllowedRecipientIds(address[],uint64,bytes)",
          "setPayoutPercentages(uint256[])",
          "getPayouts(address[],bytes[])",
          "getAttestation(bytes32)",
          "getSchema(bytes32)",
          "isPayable()",
          "isAttestationExpired(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HackathonQVStrategy",
            "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:148"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16161_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16172_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "_eas",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IEAS)19041",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            },
            {
              "label": "payoutPercentages",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:130"
            },
            {
              "label": "votesByRank",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:131"
            },
            {
              "label": "easInfo",
              "offset": 0,
              "slot": "14",
              "type": "t_struct(EASInfo)9391_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "19",
              "type": "t_contract(ERC721)32390",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "recipientIdToUID",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:135"
            },
            {
              "label": "recipientIdToIndex",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:137"
            },
            {
              "label": "indexToRecipientId",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:143"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ERC721)32390": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IEAS)19041": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(ISchemaRegistry)19086": {
              "label": "contract ISchemaRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16172_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16161_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16172_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(EASInfo)9391_storage": {
              "label": "struct HackathonQVStrategy.EASInfo",
              "members": [
                {
                  "label": "eas",
                  "type": "t_contract(IEAS)19041",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "schemaRegistry",
                  "type": "t_contract(ISchemaRegistry)19086",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "schemaUID",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "schema",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "revocable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16161_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver": {
        "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:19",
        "inherit": [
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver"
        ],
        "libraries": [],
        "methods": [
          "isPayable()",
          "()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_eas",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IEAS)19041",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            }
          ],
          "types": {
            "t_contract(IEAS)19041": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:QVNftTieredStrategy": {
        "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:96",
        "version": {
          "withMetadata": "f9df2486aebbf977bc72dd9d3c00ac84447b0fa86d9a0895415a4ab5debab5b0",
          "withoutMetadata": "f9df2486aebbf977bc72dd9d3c00ac84447b0fa86d9a0895415a4ab5debab5b0",
          "linkedWithoutMetadata": "f9df2486aebbf977bc72dd9d3c00ac84447b0fa86d9a0895415a4ab5debab5b0"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVNftTieredStrategy",
            "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16161_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16172_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "nfts",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_contract(ERC721)32390)dyn_storage",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:112"
            },
            {
              "label": "maxVoiceCreditsPerNft",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_contract(ERC721)32390,t_uint256)",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:113"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_contract(ERC721)32390,t_mapping(t_uint256,t_uint256))",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(ERC721)32390)dyn_storage": {
              "label": "contract ERC721[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)32390": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16172_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16161_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)32390,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(contract ERC721 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)32390,t_uint256)": {
              "label": "mapping(contract ERC721 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16172_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16161_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:LockupDynamicStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:16",
        "version": {
          "withMetadata": "efd9cbcad460f7ae9c8cb9ee3ff197b23c997eacf8f77f14fa8fdb5a70b1cac0",
          "withoutMetadata": "efd9cbcad460f7ae9c8cb9ee3ff197b23c997eacf8f77f14fa8fdb5a70b1cac0",
          "linkedWithoutMetadata": "efd9cbcad460f7ae9c8cb9ee3ff197b23c997eacf8f77f14fa8fdb5a70b1cac0"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientSegments(address,struct LockupDynamic.SegmentWithDelta[])",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupDynamicStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:42"
            },
            {
              "label": "lockupDynamic",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupDynamic)30801",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)30921_storage",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)11147_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(SegmentWithDelta)31005_storage)dyn_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupDynamic)30801": {
              "label": "contract ISablierV2LockupDynamic",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)11147_storage)": {
              "label": "mapping(address => struct LockupDynamicStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)30921_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)30162",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)11147_storage": {
              "label": "struct LockupDynamicStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "segments",
                  "type": "t_array(t_struct(SegmentWithDelta)31005_storage)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(SegmentWithDelta)31005_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exponent",
                  "type": "t_userDefinedValueType(UD2x18)28358",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "delta",
                  "type": "t_uint40",
                  "offset": 24,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD2x18)28358": {
              "label": "UD2x18",
              "numberOfBytes": "8",
              "underlying": "t_uint64"
            },
            "t_userDefinedValueType(UD60x18)30162": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:LockupLinearStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:16",
        "version": {
          "withMetadata": "747a9a779da0f3cbd2cd4712b382d61dc90a0365cdbd98c4f82b933f6b4b4c39",
          "withoutMetadata": "747a9a779da0f3cbd2cd4712b382d61dc90a0365cdbd98c4f82b933f6b4b4c39",
          "linkedWithoutMetadata": "747a9a779da0f3cbd2cd4712b382d61dc90a0365cdbd98c4f82b933f6b4b4c39"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientDurations(address,(uint40,uint40))",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupLinearStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:42"
            },
            {
              "label": "lockupLinear",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupLinear)30890",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)30921_storage",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)12324_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupLinear)30890": {
              "label": "contract ISablierV2LockupLinear",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12324_storage)": {
              "label": "mapping(address => struct LockupLinearStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)30921_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)30162",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Durations)31073_storage": {
              "label": "struct LockupLinear.Durations",
              "members": [
                {
                  "label": "cliff",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "total",
                  "type": "t_uint40",
                  "offset": 5,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12324_storage": {
              "label": "struct LockupLinearStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durations",
                  "type": "t_struct(Durations)31073_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD60x18)30162": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:NFT": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:8",
        "version": {
          "withMetadata": "a8754be6c96feddefc4b616e8e38a01f945a15053d980111a7672347c0f29a74",
          "withoutMetadata": "a8754be6c96feddefc4b616e8e38a01f945a15053d980111a7672347c0f29a74",
          "linkedWithoutMetadata": "a8754be6c96feddefc4b616e8e38a01f945a15053d980111a7672347c0f29a74"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable",
          "solady/src/tokens/ERC721.sol:ERC721"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)",
          "name()",
          "symbol()",
          "mintTo(address)",
          "tokenURI(uint256)",
          "withdrawPayments(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFT",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTokenId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:16"
            },
            {
              "label": "MINT_PRICE",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:17"
            },
            {
              "label": "__name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:20"
            },
            {
              "label": "__symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:NFTFactory": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:6",
        "version": {
          "withMetadata": "bb4400223a73338e197bb14987e2d53b7d8a4bcfdd6f42e936521de96e39cace",
          "withoutMetadata": "bb4400223a73338e197bb14987e2d53b7d8a4bcfdd6f42e936521de96e39cace",
          "linkedWithoutMetadata": "bb4400223a73338e197bb14987e2d53b7d8a4bcfdd6f42e936521de96e39cace"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createNFTContract(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isNFTContract",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NFTFactory",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:WrappedVotingNftMintStrategy": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:100",
        "version": {
          "withMetadata": "0c3c9f9794d8f716e36e1f6f654720844b350405b81d2dc6d8f2f035242206bd",
          "withoutMetadata": "0c3c9f9794d8f716e36e1f6f654720844b350405b81d2dc6d8f2f035242206bd",
          "linkedWithoutMetadata": "0c3c9f9794d8f716e36e1f6f654720844b350405b81d2dc6d8f2f035242206bd"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllocationTimes(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrappedVotingNftMintStrategy",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:147"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "nftFactory",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(NFTFactory)13538",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:134"
            },
            {
              "label": "allocationStartTime",
              "offset": 20,
              "slot": "4",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "currentWinner",
              "offset": 8,
              "slot": "5",
              "type": "t_address",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "allocations",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(NFTFactory)13538": {
              "label": "contract NFTFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:99",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(struct DonationVotingMerkleDistributionBaseStrategy.ApplicationStatus[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "updateDistribution(bytes32,(uint256,string))",
          "isDistributionSet()",
          "hasBeenDistributed(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionBaseStrategy",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:286"
          },
          {
            "kind": "state-variable-immutable",
            "name": "PERMIT2",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:230"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4531_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)14109_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14109_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14109_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:DonationVotingMerkleDistributionDirectTransferStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76",
        "version": {
          "withMetadata": "b02896c15ccced04c8a3d4050285d525bde8246f4c5148bcedc980d91b2bc1c5",
          "withoutMetadata": "b02896c15ccced04c8a3d4050285d525bde8246f4c5148bcedc980d91b2bc1c5",
          "linkedWithoutMetadata": "b02896c15ccced04c8a3d4050285d525bde8246f4c5148bcedc980d91b2bc1c5"
        },
        "inherit": [
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionDirectTransferStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4531_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)14109_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14109_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14109_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:DonationVotingMerkleDistributionVaultStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:92",
        "version": {
          "withMetadata": "3622a22ab5d17e3cb264b552dd78c8779ebbf20f43c3d50e0622ec045c97037d",
          "withoutMetadata": "3622a22ab5d17e3cb264b552dd78c8779ebbf20f43c3d50e0622ec045c97037d",
          "linkedWithoutMetadata": "3622a22ab5d17e3cb264b552dd78c8779ebbf20f43c3d50e0622ec045c97037d"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string,address)",
          "claim(struct DonationVotingMerkleDistributionVaultStrategy.Claim[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionVaultStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)4531_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)4234",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)14109_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "16",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "16",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "18",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "67",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14109_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14109_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy": {
        "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:89",
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVBaseStrategy",
            "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:258"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16161_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16172_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16172_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16161_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16172_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16161_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-simple/QVSimpleStrategy.sol:QVSimpleStrategy": {
        "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:89",
        "version": {
          "withMetadata": "98a41ce2dfed2ec9dd143212278df4e30fc9b713dfaec4a69b3de2b5db48fb46",
          "withoutMetadata": "98a41ce2dfed2ec9dd143212278df4e30fc9b713dfaec4a69b3de2b5db48fb46",
          "linkedWithoutMetadata": "98a41ce2dfed2ec9dd143212278df4e30fc9b713dfaec4a69b3de2b5db48fb46"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "addAllocator(address)",
          "removeAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVSimpleStrategy",
            "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:121"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)4234",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)16161_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)16172_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:108"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:111"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)4247,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)16172_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16161_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)4247,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)16172_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)16161_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:RFPCommitteeStrategy": {
        "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:83",
        "version": {
          "withMetadata": "999adc1cb0a2b37ae8c62ba20986d8df4ebb612722f94258bd6cefc81ed119b3",
          "withoutMetadata": "999adc1cb0a2b37ae8c62ba20986d8df4ebb612722f94258bd6cefc81ed119b3",
          "linkedWithoutMetadata": "999adc1cb0a2b37ae8c62ba20986d8df4ebb612722f94258bd6cefc81ed119b3"
        },
        "inherit": [
          "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPCommitteeStrategy",
            "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4234",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)17671_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)17662_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "voteThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:104"
            },
            {
              "label": "votedFor",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:109"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:114"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)17671_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)17662_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)17671_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)17662_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy": {
        "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:107",
        "version": {
          "withMetadata": "2a159af57ac20780f3673dd79d486e3ac23c9ee8742635d1f49a80a6bb9735e3",
          "withoutMetadata": "2a159af57ac20780f3673dd79d486e3ac23c9ee8742635d1f49a80a6bb9735e3",
          "linkedWithoutMetadata": "2a159af57ac20780f3673dd79d486e3ac23c9ee8742635d1f49a80a6bb9735e3"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getPayouts(address[],bytes[])",
          "getMilestone(uint256)",
          "getMilestoneStatus(uint256)",
          "setPoolActive(bool)",
          "setMilestones(struct RFPSimpleStrategy.Milestone[])",
          "submitUpcomingMilestone((uint256,string))",
          "increaseMaxBid(uint256)",
          "rejectMilestone(uint256)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPSimpleStrategy",
            "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:199"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)4234",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)17671_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)17662_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)17671_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)4234": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)4247": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Recipient)17662_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)4531_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)17671_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)4531_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)17662_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)4247",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/IEAS.sol:IEAS": {
        "src": "lib/eas-contracts/contracts/IEAS.sol:82",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSchemaRegistry()",
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))",
          "multiAttest(struct MultiAttestationRequest[])",
          "multiAttestByDelegation(struct MultiDelegatedAttestationRequest[])",
          "revoke((bytes32,(bytes32,uint256)))",
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))",
          "multiRevoke(struct MultiRevocationRequest[])",
          "multiRevokeByDelegation(struct MultiDelegatedRevocationRequest[])",
          "timestamp(bytes32)",
          "multiTimestamp(bytes32[])",
          "revokeOffchain(bytes32)",
          "multiRevokeOffchain(bytes32[])",
          "getAttestation(bytes32)",
          "isAttestationValid(bytes32)",
          "getTimestamp(bytes32)",
          "getRevokeOffchain(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol:ISchemaRegistry": {
        "src": "lib/eas-contracts/contracts/ISchemaRegistry.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "register(string,address,bool)",
          "getSchema(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver": {
        "src": "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:19",
        "version": {
          "withMetadata": "d8605e6a62fb16ecee500cf5e8e23be2b13cf45e7b94a110819c98c983b44962",
          "withoutMetadata": "d8605e6a62fb16ecee500cf5e8e23be2b13cf45e7b94a110819c98c983b44962",
          "linkedWithoutMetadata": "d8605e6a62fb16ecee500cf5e8e23be2b13cf45e7b94a110819c98c983b44962"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "d7300f3f571677d35afe2cd1089da8ecc9ad7f5e5cdae20bce4bf8666c6578b7",
          "withoutMetadata": "d7300f3f571677d35afe2cd1089da8ecc9ad7f5e5cdae20bce4bf8666c6578b7",
          "linkedWithoutMetadata": "d7300f3f571677d35afe2cd1089da8ecc9ad7f5e5cdae20bce4bf8666c6578b7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:50",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19903_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19903_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19903_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "6ece51211cd14fe2ae1b56573ef5c0557b37d702b0c5435857004ab32ffce918",
          "withoutMetadata": "6ece51211cd14fe2ae1b56573ef5c0557b37d702b0c5435857004ab32ffce918",
          "linkedWithoutMetadata": "6ece51211cd14fe2ae1b56573ef5c0557b37d702b0c5435857004ab32ffce918"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "a69c7739cee64ce62295470c5dd8b5590e1e0a0796d87eed8ea9bd1ef407e5e6",
          "withoutMetadata": "a69c7739cee64ce62295470c5dd8b5590e1e0a0796d87eed8ea9bd1ef407e5e6",
          "linkedWithoutMetadata": "a69c7739cee64ce62295470c5dd8b5590e1e0a0796d87eed8ea9bd1ef407e5e6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "8db0d67d151581b903cce52d8209c546f89ef49df512e8301a035808e1443a4b",
          "withoutMetadata": "8db0d67d151581b903cce52d8209c546f89ef49df512e8301a035808e1443a4b",
          "linkedWithoutMetadata": "8db0d67d151581b903cce52d8209c546f89ef49df512e8301a035808e1443a4b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "08e1aba516af812d17e59b79357c20bf98840c02d82f89d87996cb0a0df33b10",
          "withoutMetadata": "08e1aba516af812d17e59b79357c20bf98840c02d82f89d87996cb0a0df33b10",
          "linkedWithoutMetadata": "08e1aba516af812d17e59b79357c20bf98840c02d82f89d87996cb0a0df33b10"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "d69cd1280d30192ee420c76ca95092d79b1cd3479b1c50944cd1335935038b85",
          "withoutMetadata": "d69cd1280d30192ee420c76ca95092d79b1cd3479b1c50944cd1335935038b85",
          "linkedWithoutMetadata": "d69cd1280d30192ee420c76ca95092d79b1cd3479b1c50944cd1335935038b85"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "b7f4ddb84860f8edf3acb174a58668d0479e02842b50728bbcd434ac45b051d1",
          "withoutMetadata": "b7f4ddb84860f8edf3acb174a58668d0479e02842b50728bbcd434ac45b051d1",
          "linkedWithoutMetadata": "b7f4ddb84860f8edf3acb174a58668d0479e02842b50728bbcd434ac45b051d1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/IEIP712.sol:IEIP712": {
        "src": "lib/permit2/src/interfaces/IEIP712.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/ISignatureTransfer.sol:ISignatureTransfer": {
        "src": "lib/permit2/src/interfaces/ISignatureTransfer.sol:9",
        "inherit": [
          "lib/permit2/src/interfaces/IEIP712.sol:IEIP712"
        ],
        "libraries": [],
        "methods": [
          "nonceBitmap(address,uint256)",
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)",
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)",
          "permitTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes)",
          "permitWitnessTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes32,string,bytes)",
          "invalidateUnorderedNonces(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable": {
        "src": "lib/v2-core/src/interfaces/IAdminable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "transferAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Base.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "comptroller()",
          "protocolRevenues(address)",
          "claimProtocolRevenues(address)",
          "setComptroller(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:ISablierV2Comptroller": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "flashFee()",
          "isFlashAsset(address)",
          "protocolFees(address)",
          "setFlashFee(uint256)",
          "setProtocolFee(address,uint256)",
          "toggleFlashAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:13",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getAsset(uint256)",
          "getDepositedAmount(uint256)",
          "getEndTime(uint256)",
          "getRecipient(uint256)",
          "getRefundedAmount(uint256)",
          "getSender(uint256)",
          "getStartTime(uint256)",
          "getWithdrawnAmount(uint256)",
          "isCancelable(uint256)",
          "isCold(uint256)",
          "isDepleted(uint256)",
          "isStream(uint256)",
          "isWarm(uint256)",
          "nextStreamId()",
          "refundableAmountOf(uint256)",
          "statusOf(uint256)",
          "streamedAmountOf(uint256)",
          "wasCanceled(uint256)",
          "withdrawableAmountOf(uint256)",
          "burn(uint256)",
          "cancel(uint256)",
          "cancelMultiple(uint256[])",
          "renounce(uint256)",
          "setNFTDescriptor(address)",
          "withdraw(uint256,address,uint128)",
          "withdrawMax(uint256,address)",
          "withdrawMaxAndTransfer(uint256,address)",
          "withdrawMultiple(uint256[],address,uint128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:ISablierV2LockupDynamic": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_SEGMENT_COUNT()",
          "getRange(uint256)",
          "getSegments(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDeltas((address,bool,address,uint128,address,(address,uint256),struct LockupDynamic.SegmentWithDelta[]))",
          "createWithMilestones((address,uint40,bool,address,uint128,address,(address,uint256),struct LockupDynamic.Segment[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:ISablierV2LockupLinear": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getCliffTime(uint256)",
          "getRange(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))",
          "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:ISablierV2NFTDescriptor": {
        "src": "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:Lockup": {
        "src": "lib/v2-core/src/types/DataTypes.sol:29",
        "version": {
          "withMetadata": "814f821916f4f8cb441a57c6b08b10bc356da8c09515af9d94bedaf45af9e7cb",
          "withoutMetadata": "814f821916f4f8cb441a57c6b08b10bc356da8c09515af9d94bedaf45af9e7cb",
          "linkedWithoutMetadata": "814f821916f4f8cb441a57c6b08b10bc356da8c09515af9d94bedaf45af9e7cb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupDynamic": {
        "src": "lib/v2-core/src/types/DataTypes.sol:72",
        "version": {
          "withMetadata": "82956b4b9689d8008c1c8db1deb17a610b4d06beaa67eff4c83ab0afefc9ccf1",
          "withoutMetadata": "82956b4b9689d8008c1c8db1deb17a610b4d06beaa67eff4c83ab0afefc9ccf1",
          "linkedWithoutMetadata": "82956b4b9689d8008c1c8db1deb17a610b4d06beaa67eff4c83ab0afefc9ccf1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupLinear": {
        "src": "lib/v2-core/src/types/DataTypes.sol:180",
        "version": {
          "withMetadata": "c546d49fb56f805313fd167ca0782de1640b85d363d2ff6152954f1edfffc177",
          "withoutMetadata": "c546d49fb56f805313fd167ca0782de1640b85d363d2ff6152954f1edfffc177",
          "linkedWithoutMetadata": "c546d49fb56f805313fd167ca0782de1640b85d363d2ff6152954f1edfffc177"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/auth/Ownable.sol:Ownable": {
        "src": "solady/src/auth/Ownable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "renounceOwnership()",
          "requestOwnershipHandover()",
          "cancelOwnershipHandover()",
          "completeOwnershipHandover(address)",
          "owner()",
          "ownershipHandoverExpiresAt(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC20.sol:ERC20": {
        "src": "solady/src/tokens/ERC20.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC721.sol:ERC721": {
        "src": "solady/src/tokens/ERC721.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "balanceOf(address)",
          "getApproved(uint256)",
          "approve(address,uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/CREATE3.sol:CREATE3": {
        "src": "solady/src/utils/CREATE3.sol:8",
        "version": {
          "withMetadata": "17ca8ff58519effe895b2ec4b47f37bdedc2fcc2af6598c07a195999b7ef145e",
          "withoutMetadata": "17ca8ff58519effe895b2ec4b47f37bdedc2fcc2af6598c07a195999b7ef145e",
          "linkedWithoutMetadata": "17ca8ff58519effe895b2ec4b47f37bdedc2fcc2af6598c07a195999b7ef145e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/SafeTransferLib.sol:SafeTransferLib": {
        "src": "solady/src/utils/SafeTransferLib.sol:12",
        "version": {
          "withMetadata": "91e25adb79636a77beb2a69214af7d543301c3349d070c18a59060cf4c96b106",
          "withoutMetadata": "91e25adb79636a77beb2a69214af7d543301c3349d070c18a59060cf4c96b106",
          "linkedWithoutMetadata": "91e25adb79636a77beb2a69214af7d543301c3349d070c18a59060cf4c96b106"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      }
    }
  ]
}
{
  "version": "3.4",
  "log": [
    {
      "contracts/core/Allo.sol:Allo": {
        "src": "contracts/core/Allo.sol:89",
        "version": {
          "withMetadata": "26eecef629bd32b7c84dfedafff0c10f1bf15f3bda1bbd47c87185f43c6bf4fe",
          "withoutMetadata": "2f0bb5c05d4ff444357fef42d369f70e73f71d58052d6c259b2c1010039dd8a3",
          "linkedWithoutMetadata": "2f0bb5c05d4ff444357fef42d369f70e73f71d58052d6c259b2c1010039dd8a3"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "solady/src/auth/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IAllo.sol:IAllo"
        ],
        "libraries": [
          "contracts/core/libraries/Clone.sol:Clone"
        ],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "getFeeDenominator()",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "isCloneableStrategy(address)",
          "getPool(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)18365_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "percentFee",
              "offset": 0,
              "slot": "52",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:114"
            },
            {
              "label": "baseFee",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:129"
            },
            {
              "label": "_poolIndex",
              "offset": 0,
              "slot": "54",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "55",
              "type": "t_address_payable",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "56",
              "type": "t_contract(IRegistry)2625",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:133"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "57",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:134"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "58",
              "type": "t_mapping(t_uint256,t_struct(Pool)2144_storage)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:135"
            },
            {
              "label": "cloneableStrategies",
              "offset": 0,
              "slot": "59",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)2792": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)18365_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)2144_storage)": {
              "label": "mapping(uint256 => struct IAllo.Pool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Pool)2144_storage": {
              "label": "struct IAllo.Pool",
              "members": [
                {
                  "label": "profileId",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "strategy",
                  "type": "t_contract(IStrategy)2792",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "managerRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)18365_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Anchor.sol:Anchor": {
        "src": "contracts/core/Anchor.sol:89",
        "version": {
          "withMetadata": "6701544836061fd0da44f5510f273e5642b7d56374516627f9433eaf2353bb49",
          "withoutMetadata": "7c387b18ca48b348b1f66a70ba201e3a467bf09f94fc5b8e83ff8746c22ec24a",
          "linkedWithoutMetadata": "7c387b18ca48b348b1f66a70ba201e3a467bf09f94fc5b8e83ff8746c22ec24a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "execute(address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Anchor",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "profileId",
            "src": "contracts/core/Anchor.sol:89"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Registry.sol:Registry": {
        "src": "contracts/core/Registry.sol:103",
        "version": {
          "withMetadata": "11133c989979628dd4c5ac762f79fb7950c8ae0f371c6ae1add7a1cd0fc7cd72",
          "withoutMetadata": "f4d153f89ea4e6dcb69ba394d89c384dd41f46e9099a0ca48cbe23f4a45bb872",
          "linkedWithoutMetadata": "f4d153f89ea4e6dcb69ba394d89c384dd41f46e9099a0ca48cbe23f4a45bb872"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "contracts/core/libraries/Native.sol:Native",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "contracts/core/interfaces/IRegistry.sol:IRegistry"
        ],
        "libraries": [
          "solady/src/utils/CREATE3.sol:CREATE3"
        ],
        "methods": [
          "initialize(address)",
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)18365_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "anchorToProfileId",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:109"
            },
            {
              "label": "profilesById",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_struct(Profile)2452_storage)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:111"
            },
            {
              "label": "profileIdToPendingOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:113"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Profile)2452_storage)": {
              "label": "mapping(bytes32 => struct IRegistry.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)18365_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Profile)2452_storage": {
              "label": "struct IRegistry.Profile",
              "members": [
                {
                  "label": "id",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "anchor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)18365_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IAllo.sol:IAllo": {
        "src": "contracts/core/interfaces/IAllo.sol:97",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "isCloneableStrategy(address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "getPool(uint256)",
          "getFeeDenominator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IRegistry.sol:IRegistry": {
        "src": "contracts/core/interfaces/IRegistry.sol:92",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/core/interfaces/IStrategy.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "isValidAllocator(address)",
          "isPoolActive()",
          "getPoolAmount()",
          "increasePoolAmount(uint256)",
          "getRecipientStatus(address)",
          "getPayouts(address[],bytes[])",
          "initialize(uint256,bytes)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Clone.sol:Clone": {
        "src": "contracts/core/libraries/Clone.sol:37",
        "version": {
          "withMetadata": "7f86f789fa31f1ce1ea7cb1baf16ae7e10608d85af939d17d06b466e625c1251",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Errors.sol:Errors": {
        "src": "contracts/core/libraries/Errors.sol:109",
        "version": {
          "withMetadata": "c4c851198b9f4da72fb30a1b324dd2db2383065baf15235471ed4be5b27ff510",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Native.sol:Native": {
        "src": "contracts/core/libraries/Native.sol:26",
        "version": {
          "withMetadata": "3e76c9ee371e401dae4c3f5bcd71e479f97e3515a25fd2585869ae0126cbd0f2",
          "withoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466",
          "linkedWithoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Transfer.sol:Transfer": {
        "src": "contracts/core/libraries/Transfer.sol:95",
        "version": {
          "withMetadata": "a8179a170704b667fb87ebe8e2223da294ba9c80b27328af4e33d01433f088ce",
          "withoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466",
          "linkedWithoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466"
        },
        "inherit": [
          "contracts/core/libraries/Native.sol:Native"
        ],
        "libraries": [
          "solady/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/factory/ContractFactory.sol:ContractFactory": {
        "src": "contracts/factory/ContractFactory.sol:107",
        "version": {
          "withMetadata": "043c6cf13b32ff2b0dd1ef7bcd343c37c0f4e07e36a1e6cbf07c7a0f68800b80",
          "withoutMetadata": "0cd9f0333d78bdd2af9498d5d4adeec01b0e328ca33e6873216a037ccc439f13",
          "linkedWithoutMetadata": "0cd9f0333d78bdd2af9498d5d4adeec01b0e328ca33e6873216a037ccc439f13"
        },
        "inherit": [],
        "libraries": [
          "solady/src/utils/CREATE3.sol:CREATE3"
        ],
        "methods": [
          "()",
          "deploy(string,string,bytes)",
          "setDeployer(address,bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ContractFactory",
            "src": "contracts/factory/ContractFactory.sol:119"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "usedSalts",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            },
            {
              "label": "isDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/BaseStrategy.sol:BaseStrategy": {
        "src": "contracts/strategies/BaseStrategy.sol:111",
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "getPoolAmount()",
          "isPoolActive()",
          "getRecipientStatus(address)",
          "increasePoolAmount(uint256)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)",
          "getPayouts(address[],bytes[])",
          "isValidAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseStrategy",
            "src": "contracts/strategies/BaseStrategy.sol:129"
          },
          {
            "kind": "state-variable-immutable",
            "name": "allo",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          },
          {
            "kind": "state-variable-immutable",
            "name": "strategyId",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:DirectGrantsSimpleStrategy": {
        "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:110",
        "version": {
          "withMetadata": "f04d7040877bf5f4ae3966c90372caf9600bb09a359283bfe250581f8b59df25",
          "withoutMetadata": "33b0acc296454328d6f6001591129ade3cff6749c5cc63ef54de3ec43f329108",
          "linkedWithoutMetadata": "33b0acc296454328d6f6001591129ade3cff6749c5cc63ef54de3ec43f329108"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getMilestoneStatus(address,uint256)",
          "getMilestones(address)",
          "setMilestones(address,struct DirectGrantsSimpleStrategy.Milestone[])",
          "reviewSetMilestones(address,uint8)",
          "submitMilestone(address,uint256,(uint256,string))",
          "rejectMilestone(address,uint256)",
          "setRecipientStatusToInReview(address[])",
          "setPoolActive(bool)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DirectGrantsSimpleStrategy",
            "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:192"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:161"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:163"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:164"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(IRegistry)2625",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:167"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:168"
            },
            {
              "label": "_acceptedRecipientIds",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:172"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)3880_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:177"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Milestone)3889_storage)dyn_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:179"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:184"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)3889_storage)dyn_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(Milestone)3889_storage)dyn_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Milestone[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)3880_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)3889_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)3880_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "milestonesReviewStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:DonationVotingCustomRegistryStrategy": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52",
        "version": {
          "withMetadata": "5ce93b17fc84c2858c207fae70696c29fe610eb2372d539a2d29cbeb8a8f4e16",
          "withoutMetadata": "e9aa1a7f70aa9e3a912fdd5a07f6baa303be8a81ecf91dd4d928edbb4feb7a73",
          "linkedWithoutMetadata": "e9aa1a7f70aa9e3a912fdd5a07f6baa303be8a81ecf91dd4d928edbb4feb7a73"
        },
        "inherit": [
          "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingCustomRegistryStrategy",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:162"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)5494_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:165"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:167"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:172"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(SimpleProjectRegistry)5465",
              "contract": "DonationVotingCustomRegistryStrategy",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(SimpleProjectRegistry)5465": {
              "label": "contract SimpleProjectRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5494_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)2643_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)5494_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:SimpleProjectRegistry": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:26",
        "version": {
          "withMetadata": "b999d163f44f202e0736874f5d963341d67e32f6d74687067ccf7c2e483ae46d",
          "withoutMetadata": "c42152b6d8418493091034c29cc09b77be668156c32f57fa1f159cd5714b6a87",
          "linkedWithoutMetadata": "c42152b6d8418493091034c29cc09b77be668156c32f57fa1f159cd5714b6a87"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addProject(address)",
          "addProjects(address[])",
          "removeProject(address)",
          "removeProjects(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleProjectRegistry",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "projects",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleProjectRegistry",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy": {
        "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:100",
        "version": {
          "withMetadata": "20c27141552bd03a26ff696b4acf54c4e17a6b6aae340ca207a45d9a76d75b39",
          "withoutMetadata": "d6629663f0d8d6eef26b82a4fae61c35e68ce661e4ff9454bfe05bf53536f648",
          "linkedWithoutMetadata": "d6629663f0d8d6eef26b82a4fae61c35e68ce661e4ff9454bfe05bf53536f648"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "setPayout(address[],uint256[])",
          "claim(struct DonationVotingStrategy.Claim[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingStrategy",
            "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:198"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:162"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)5494_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:165"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:167"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:172"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5494_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)2643_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)5494_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:ProportionalPayoutStrategy": {
        "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:113",
        "version": {
          "withMetadata": "7a7c087fb2f0912c72c1c1c37ed0e0b53e7f0e48580ef26f4ae4bddd71665585",
          "withoutMetadata": "e13e75ca0a1cd1e21ea27c1fc34b7a64be3990d1b76eead1227e8c4527fca878",
          "linkedWithoutMetadata": "e13e75ca0a1cd1e21ea27c1fc34b7a64be3990d1b76eead1227e8c4527fca878"
        },
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "setAllocationTime(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProportionalPayoutStrategy",
            "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:163"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Recipient)6906_storage)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:151"
            },
            {
              "label": "hasAllocated",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:153"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ERC721)30852",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "maxRecipientsAllowed",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:155"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:157"
            },
            {
              "label": "totalAllocations",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:159"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:161"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)30852": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)6906_storage)": {
              "label": "mapping(address => struct ProportionalPayoutStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)6906_storage": {
              "label": "struct ProportionalPayoutStrategy.Recipient",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:QVGovernanceERC20Votes": {
        "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:89",
        "version": {
          "withMetadata": "eee8a112f8a17a22c02901f28fbb13dc7c98ed9cd4725a7f5419c54aae5c85cc",
          "withoutMetadata": "7e5fbcc2e95ff03b14af414cbad63924b6da212607218fac8c958ae1e504c966",
          "linkedWithoutMetadata": "7e5fbcc2e95ff03b14af414cbad63924b6da212607218fac8c958ae1e504c966"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVGovernanceERC20Votes",
            "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:102"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14605_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14616_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "govToken",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IVotes)18812",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:96"
            },
            {
              "label": "timestamp",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:98"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IVotes)18812": {
              "label": "contract IVotes",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14616_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14605_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14616_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14605_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:HackathonQVStrategy": {
        "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:110",
        "version": {
          "withMetadata": "82dfdbf7cd6402429b99e92598db9c2bb0a00da6ab0781acb7198479193edf45",
          "withoutMetadata": "aaa222244f9e7afe5c52f9c671f0886dd44c9cf9bc8d02a1a4d6480cc82aeadb",
          "linkedWithoutMetadata": "aaa222244f9e7afe5c52f9c671f0886dd44c9cf9bc8d02a1a4d6480cc82aeadb"
        },
        "inherit": [
          "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver",
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllowedRecipientIds(address[],uint64,bytes)",
          "setPayoutPercentages(uint256[])",
          "getPayouts(address[],bytes[])",
          "getAttestation(bytes32)",
          "getSchema(bytes32)",
          "isPayable()",
          "isAttestationExpired(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HackathonQVStrategy",
            "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:148"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14605_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14616_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "_eas",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IEAS)17503",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            },
            {
              "label": "payoutPercentages",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:130"
            },
            {
              "label": "votesByRank",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:131"
            },
            {
              "label": "easInfo",
              "offset": 0,
              "slot": "14",
              "type": "t_struct(EASInfo)7805_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "19",
              "type": "t_contract(ERC721)30852",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:133"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:133"
            },
            {
              "label": "recipientIdToUID",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:135"
            },
            {
              "label": "recipientIdToIndex",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:136"
            },
            {
              "label": "indexToRecipientId",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:143"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ERC721)30852": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IEAS)17503": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(ISchemaRegistry)17548": {
              "label": "contract ISchemaRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14616_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14605_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14616_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(EASInfo)7805_storage": {
              "label": "struct HackathonQVStrategy.EASInfo",
              "members": [
                {
                  "label": "eas",
                  "type": "t_contract(IEAS)17503",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "schemaRegistry",
                  "type": "t_contract(ISchemaRegistry)17548",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "schemaUID",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "schema",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "revocable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14605_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver": {
        "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:19",
        "inherit": [
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver"
        ],
        "libraries": [],
        "methods": [
          "isPayable()",
          "()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_eas",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IEAS)17503",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            }
          ],
          "types": {
            "t_contract(IEAS)17503": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:QVNftTieredStrategy": {
        "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:94",
        "version": {
          "withMetadata": "965f7ba1791fdf7fed8868b2d6b7ae477685310a82010d1c92d27da70de4b247",
          "withoutMetadata": "4683fae814d6fb023b0047ddb6d2222ddfad30789503cf8e32901179f6da7c69",
          "linkedWithoutMetadata": "4683fae814d6fb023b0047ddb6d2222ddfad30789503cf8e32901179f6da7c69"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVNftTieredStrategy",
            "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14605_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14616_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "nfts",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_contract(ERC721)30852)dyn_storage",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:111"
            },
            {
              "label": "maxVoiceCreditsPerNft",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_contract(ERC721)30852,t_uint256)",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:113"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_contract(ERC721)30852,t_mapping(t_uint256,t_uint256))",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:115"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(ERC721)30852)dyn_storage": {
              "label": "contract ERC721[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)30852": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14616_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14605_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)30852,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(contract ERC721 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)30852,t_uint256)": {
              "label": "mapping(contract ERC721 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14616_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14605_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:LockupDynamicStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:16",
        "version": {
          "withMetadata": "8813685408016dd8cd627fcd4884c0a18dcfce28c0b63ac05de170be81f5b490",
          "withoutMetadata": "760360c5ebebbe534e3ac2802d6b0ed1697372fd278e30a83bd5c0b0c6db06a2",
          "linkedWithoutMetadata": "760360c5ebebbe534e3ac2802d6b0ed1697372fd278e30a83bd5c0b0c6db06a2"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/v2-core/src/types/DataTypes.sol:LockupDynamic"
        ],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientSegments(address,struct LockupDynamic.SegmentWithDelta[])",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupDynamicStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:42"
            },
            {
              "label": "lockupDynamic",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupDynamic)29263",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)29383_storage",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)9571_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(SegmentWithDelta)29467_storage)dyn_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupDynamic)29263": {
              "label": "contract ISablierV2LockupDynamic",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)9571_storage)": {
              "label": "mapping(address => struct LockupDynamicStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)29383_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)28624",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)9571_storage": {
              "label": "struct LockupDynamicStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "segments",
                  "type": "t_array(t_struct(SegmentWithDelta)29467_storage)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(SegmentWithDelta)29467_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exponent",
                  "type": "t_userDefinedValueType(UD2x18)26820",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "delta",
                  "type": "t_uint40",
                  "offset": 24,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD2x18)26820": {
              "label": "UD2x18",
              "numberOfBytes": "8",
              "underlying": "t_uint64"
            },
            "t_userDefinedValueType(UD60x18)28624": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:LockupLinearStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:16",
        "version": {
          "withMetadata": "e95ba788855d0bb972f2f833f90313a4e7f7ab5353f82553c8e300458f3585ad",
          "withoutMetadata": "1b657f61f96addb8f1821d7677d27f3ae568d46d62cddd9deb6085a94e46afc5",
          "linkedWithoutMetadata": "1b657f61f96addb8f1821d7677d27f3ae568d46d62cddd9deb6085a94e46afc5"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/v2-core/src/types/DataTypes.sol:LockupLinear"
        ],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientDurations(address,(uint40,uint40))",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupLinearStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:42"
            },
            {
              "label": "lockupLinear",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupLinear)29352",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)29383_storage",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)10753_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupLinear)29352": {
              "label": "contract ISablierV2LockupLinear",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)10753_storage)": {
              "label": "mapping(address => struct LockupLinearStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)29383_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)28624",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Durations)29535_storage": {
              "label": "struct LockupLinear.Durations",
              "members": [
                {
                  "label": "cliff",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "total",
                  "type": "t_uint40",
                  "offset": 5,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)10753_storage": {
              "label": "struct LockupLinearStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durations",
                  "type": "t_struct(Durations)29535_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD60x18)28624": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:NFT": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:8",
        "version": {
          "withMetadata": "fba53ed4ae3ed8584f4e8db77b6e4869c99b8f3beb5a486e6bc22d9dc290a144",
          "withoutMetadata": "8cb56b13b3a28a0670458267486272612909f877d123a98977ab9be7c8239ceb",
          "linkedWithoutMetadata": "8cb56b13b3a28a0670458267486272612909f877d123a98977ab9be7c8239ceb"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable",
          "solady/src/tokens/ERC721.sol:ERC721"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string,uint256,address)",
          "name()",
          "symbol()",
          "mintTo(address)",
          "tokenURI(uint256)",
          "withdrawPayments(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFT",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTokenId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:16"
            },
            {
              "label": "MINT_PRICE",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:17"
            },
            {
              "label": "__name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:20"
            },
            {
              "label": "__symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:NFTFactory": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:6",
        "version": {
          "withMetadata": "01ea7e9c5d69e088ef3bbe2b8bd6e2172cf823284f86db5e419130ff4fb5051c",
          "withoutMetadata": "eec62f7d05472ace1775829a8f2b011695a8d545dd4b78e74d252c5210f6c49a",
          "linkedWithoutMetadata": "eec62f7d05472ace1775829a8f2b011695a8d545dd4b78e74d252c5210f6c49a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createNFTContract(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isNFTContract",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NFTFactory",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:WrappedVotingNftMintStrategy": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:101",
        "version": {
          "withMetadata": "4c37930ed54eb4224fa26c53db2ac59f1d5f3764d22da0f05244f543860675ad",
          "withoutMetadata": "7eb76765de287de6aa27ad742625a13ffb4a5184e79f1a46ae4b3e4bdceddf05",
          "linkedWithoutMetadata": "7eb76765de287de6aa27ad742625a13ffb4a5184e79f1a46ae4b3e4bdceddf05"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllocationTimes(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrappedVotingNftMintStrategy",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:147"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "nftFactory",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(NFTFactory)11972",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationStartTime",
              "offset": 20,
              "slot": "4",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "currentWinner",
              "offset": 8,
              "slot": "5",
              "type": "t_address",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:137"
            },
            {
              "label": "allocations",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:138"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(NFTFactory)11972": {
              "label": "contract NFTFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:99",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(struct DonationVotingMerkleDistributionBaseStrategy.ApplicationStatus[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "updateDistribution(bytes32,(uint256,string))",
          "isDistributionSet()",
          "hasBeenDistributed(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionBaseStrategy",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:286"
          },
          {
            "kind": "state-variable-immutable",
            "name": "PERMIT2",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:230"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)2918_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)12548_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12548_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12548_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:DonationVotingMerkleDistributionDirectTransferStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76",
        "version": {
          "withMetadata": "0f4c3d19159e70339933d708fda474d34a94f1a8c1aec8dfcb1eade9dac0f251",
          "withoutMetadata": "f40aec7ea9081a4c8880c4262acba6c73d5a17ebf29c88f2c31b27910d6222bf",
          "linkedWithoutMetadata": "f40aec7ea9081a4c8880c4262acba6c73d5a17ebf29c88f2c31b27910d6222bf"
        },
        "inherit": [
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "solady/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [
          "(address,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionDirectTransferStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)2918_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)12548_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12548_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12548_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:DonationVotingMerkleDistributionVaultStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:92",
        "version": {
          "withMetadata": "7beac5b920da80ec664f93d6178bf134a36394c003a2dd61cecbdfec026ea510",
          "withoutMetadata": "507fe047ea5c70dd4a601752c61cda7cd579ceef22db953578b10c28cb0faf42",
          "linkedWithoutMetadata": "507fe047ea5c70dd4a601752c61cda7cd579ceef22db953578b10c28cb0faf42"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "solady/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [
          "(address,string,address)",
          "claim(struct DonationVotingMerkleDistributionVaultStrategy.Claim[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionVaultStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)2918_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)12548_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "16",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "16",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "18",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "67",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12548_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12548_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy": {
        "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:89",
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVBaseStrategy",
            "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:258"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14605_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14616_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14616_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14605_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14616_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14605_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-simple/QVSimpleStrategy.sol:QVSimpleStrategy": {
        "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:90",
        "version": {
          "withMetadata": "ecd806defde494b9656abda0a466e1d373a72df553492e5c07d8635570a80a6d",
          "withoutMetadata": "344e9982071e99896829ad8873c32fe3437606fcfc3852ea28fcf7a2fbb9b250",
          "linkedWithoutMetadata": "344e9982071e99896829ad8873c32fe3437606fcfc3852ea28fcf7a2fbb9b250"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "addAllocator(address)",
          "removeAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVSimpleStrategy",
            "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14605_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14616_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:108"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:111"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14616_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14605_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14616_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14605_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:RFPCommitteeStrategy": {
        "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:84",
        "version": {
          "withMetadata": "0a97dad473bd7eedf707a12e58f81e5491d2dd66a03c406e5aabe8f187ae9358",
          "withoutMetadata": "3e2dd86dc25976e83931bbfa4335808b326f65a966d87ac44d9085a8c888c6a6",
          "linkedWithoutMetadata": "3e2dd86dc25976e83931bbfa4335808b326f65a966d87ac44d9085a8c888c6a6"
        },
        "inherit": [
          "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPCommitteeStrategy",
            "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:124"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:173"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:174"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)2625",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:184"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:189"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)16125_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)16116_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:192"
            },
            {
              "label": "voteThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:104"
            },
            {
              "label": "votedFor",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:109"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:112"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)16125_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16116_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)16125_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)16116_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy": {
        "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:105",
        "version": {
          "withMetadata": "bd8e251b21a5085b48bd19cbd66140622b92fd01d30cc057662969f028c3e842",
          "withoutMetadata": "798fff6a523ebbed5be0c2dbb4e6a71514598914431eaf06713c13bbf630c23a",
          "linkedWithoutMetadata": "798fff6a523ebbed5be0c2dbb4e6a71514598914431eaf06713c13bbf630c23a"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getPayouts(address[],bytes[])",
          "getMilestone(uint256)",
          "getMilestoneStatus(uint256)",
          "setPoolActive(bool)",
          "setMilestones(struct RFPSimpleStrategy.Milestone[])",
          "submitUpcomingMilestone((uint256,string))",
          "increaseMaxBid(uint256)",
          "rejectMilestone(uint256)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPSimpleStrategy",
            "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:200"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:173"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:174"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)2625",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:184"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:189"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)16125_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)16116_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:192"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)16125_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Recipient)16116_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)16125_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)16116_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/IEAS.sol:IEAS": {
        "src": "lib/eas-contracts/contracts/IEAS.sol:82",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSchemaRegistry()",
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))",
          "multiAttest(struct MultiAttestationRequest[])",
          "multiAttestByDelegation(struct MultiDelegatedAttestationRequest[])",
          "revoke((bytes32,(bytes32,uint256)))",
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))",
          "multiRevoke(struct MultiRevocationRequest[])",
          "multiRevokeByDelegation(struct MultiDelegatedRevocationRequest[])",
          "timestamp(bytes32)",
          "multiTimestamp(bytes32[])",
          "revokeOffchain(bytes32)",
          "multiRevokeOffchain(bytes32[])",
          "getAttestation(bytes32)",
          "isAttestationValid(bytes32)",
          "getTimestamp(bytes32)",
          "getRevokeOffchain(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol:ISchemaRegistry": {
        "src": "lib/eas-contracts/contracts/ISchemaRegistry.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "register(string,address,bool)",
          "getSchema(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver": {
        "src": "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:19",
        "version": {
          "withMetadata": "8a0a3a1803d6e6ce20a795d8139bf51b91dcc65bb67fdd12627fbfb2b16ac8e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "8d2bc482a4e82adb77ba8d9ac5a3b3ae9183a150d1236292ea460389567d34e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:50",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)18365_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)18365_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)18365_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "d85d30f6dec1eeda9f42b0b14f3f9d1c325920d9fb35422bc702f92abeaf1b0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "d410265da7e21a227503209d0636d00f805c8c84f7c1978b82396126119aec3e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:13",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "14912bf34a84335bb57d9031e329b690cdea976970cf605f6025eee36cde3546",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "06211fe142fae81a25fd350a80404afaa5996a4132e8464d8160455521455af5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "8d8a0b72fdd8307b9dc4319d304dc5d7cfb6050b0ad406e80c7fb6a983c82e2b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "10ee9d9070162d747f0ad07060cc64ba83c78ffb52a94204605790354437bd54",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/IEIP712.sol:IEIP712": {
        "src": "lib/permit2/src/interfaces/IEIP712.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/ISignatureTransfer.sol:ISignatureTransfer": {
        "src": "lib/permit2/src/interfaces/ISignatureTransfer.sol:9",
        "inherit": [
          "lib/permit2/src/interfaces/IEIP712.sol:IEIP712"
        ],
        "libraries": [],
        "methods": [
          "nonceBitmap(address,uint256)",
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)",
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)",
          "permitTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes)",
          "permitWitnessTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes32,string,bytes)",
          "invalidateUnorderedNonces(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable": {
        "src": "lib/v2-core/src/interfaces/IAdminable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "transferAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Base.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "comptroller()",
          "protocolRevenues(address)",
          "claimProtocolRevenues(address)",
          "setComptroller(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:ISablierV2Comptroller": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "flashFee()",
          "isFlashAsset(address)",
          "protocolFees(address)",
          "setFlashFee(uint256)",
          "setProtocolFee(address,uint256)",
          "toggleFlashAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:13",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getAsset(uint256)",
          "getDepositedAmount(uint256)",
          "getEndTime(uint256)",
          "getRecipient(uint256)",
          "getRefundedAmount(uint256)",
          "getSender(uint256)",
          "getStartTime(uint256)",
          "getWithdrawnAmount(uint256)",
          "isCancelable(uint256)",
          "isCold(uint256)",
          "isDepleted(uint256)",
          "isStream(uint256)",
          "isWarm(uint256)",
          "nextStreamId()",
          "refundableAmountOf(uint256)",
          "statusOf(uint256)",
          "streamedAmountOf(uint256)",
          "wasCanceled(uint256)",
          "withdrawableAmountOf(uint256)",
          "burn(uint256)",
          "cancel(uint256)",
          "cancelMultiple(uint256[])",
          "renounce(uint256)",
          "setNFTDescriptor(address)",
          "withdraw(uint256,address,uint128)",
          "withdrawMax(uint256,address)",
          "withdrawMaxAndTransfer(uint256,address)",
          "withdrawMultiple(uint256[],address,uint128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:ISablierV2LockupDynamic": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_SEGMENT_COUNT()",
          "getRange(uint256)",
          "getSegments(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDeltas((address,bool,address,uint128,address,(address,uint256),struct LockupDynamic.SegmentWithDelta[]))",
          "createWithMilestones((address,uint40,bool,address,uint128,address,(address,uint256),struct LockupDynamic.Segment[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:ISablierV2LockupLinear": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getCliffTime(uint256)",
          "getRange(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))",
          "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:ISablierV2NFTDescriptor": {
        "src": "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:Lockup": {
        "src": "lib/v2-core/src/types/DataTypes.sol:29",
        "version": {
          "withMetadata": "48397084daa0457e1a75532c676babf02e2a826ecff4d4aeb8fc9a1b74d15fa0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupDynamic": {
        "src": "lib/v2-core/src/types/DataTypes.sol:72",
        "version": {
          "withMetadata": "b7bf0d5cbf00ea3d643d5320417fd18733d102561356920b23dc963bf63f54e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupLinear": {
        "src": "lib/v2-core/src/types/DataTypes.sol:180",
        "version": {
          "withMetadata": "ef3216d272a3dae42208d79e1fdce553b22502418a0a42fd0c1e9afe27d62da5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/auth/Ownable.sol:Ownable": {
        "src": "solady/src/auth/Ownable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "renounceOwnership()",
          "requestOwnershipHandover()",
          "cancelOwnershipHandover()",
          "completeOwnershipHandover(address)",
          "owner()",
          "ownershipHandoverExpiresAt(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC20.sol:ERC20": {
        "src": "solady/src/tokens/ERC20.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC721.sol:ERC721": {
        "src": "solady/src/tokens/ERC721.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "balanceOf(address)",
          "getApproved(uint256)",
          "approve(address,uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/CREATE3.sol:CREATE3": {
        "src": "solady/src/utils/CREATE3.sol:8",
        "version": {
          "withMetadata": "60516354de7efbd2effbfb870501d7efc8dfb0b45537f5e4b3148c0679c98a03",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/SafeTransferLib.sol:SafeTransferLib": {
        "src": "solady/src/utils/SafeTransferLib.sol:12",
        "version": {
          "withMetadata": "0a8856d58acc1739674fdb96efb7934c99cbb61bd93c0b0d3458b7973a5b6a2b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "contracts/core/Allo.sol:Allo": {
        "src": "contracts/core/Allo.sol:89",
        "version": {
          "withMetadata": "208eda63b87342f11098537562585b99e06a2521026d029318ea3b7ab41aa032",
          "withoutMetadata": "2f0bb5c05d4ff444357fef42d369f70e73f71d58052d6c259b2c1010039dd8a3",
          "linkedWithoutMetadata": "2f0bb5c05d4ff444357fef42d369f70e73f71d58052d6c259b2c1010039dd8a3"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "solady/src/auth/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IAllo.sol:IAllo"
        ],
        "libraries": [
          "contracts/core/libraries/Clone.sol:Clone"
        ],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "getFeeDenominator()",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "isCloneableStrategy(address)",
          "getPool(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)18365_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "percentFee",
              "offset": 0,
              "slot": "52",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:114"
            },
            {
              "label": "baseFee",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:129"
            },
            {
              "label": "_poolIndex",
              "offset": 0,
              "slot": "54",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "55",
              "type": "t_address_payable",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "56",
              "type": "t_contract(IRegistry)2625",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:133"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "57",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:134"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "58",
              "type": "t_mapping(t_uint256,t_struct(Pool)2144_storage)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:135"
            },
            {
              "label": "cloneableStrategies",
              "offset": 0,
              "slot": "59",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)2792": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)18365_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)2144_storage)": {
              "label": "mapping(uint256 => struct IAllo.Pool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Pool)2144_storage": {
              "label": "struct IAllo.Pool",
              "members": [
                {
                  "label": "profileId",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "strategy",
                  "type": "t_contract(IStrategy)2792",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "managerRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)18365_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Anchor.sol:Anchor": {
        "src": "contracts/core/Anchor.sol:89",
        "version": {
          "withMetadata": "504bf0c0a1e2a4b2fc13eb24a2292e9cf1e80b126f50ef1f169ec58d82fbbe52",
          "withoutMetadata": "7c387b18ca48b348b1f66a70ba201e3a467bf09f94fc5b8e83ff8746c22ec24a",
          "linkedWithoutMetadata": "7c387b18ca48b348b1f66a70ba201e3a467bf09f94fc5b8e83ff8746c22ec24a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "execute(address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Anchor",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "profileId",
            "src": "contracts/core/Anchor.sol:89"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Registry.sol:Registry": {
        "src": "contracts/core/Registry.sol:103",
        "version": {
          "withMetadata": "6c105a59d482a454a0e7fd2e97d5dd7ce69aee80129e60b6950beaaca7d1f0cf",
          "withoutMetadata": "97ba1ae306009ffde17e664299891f80aa0277cb365d8ba0a1c53e0589d768f8",
          "linkedWithoutMetadata": "97ba1ae306009ffde17e664299891f80aa0277cb365d8ba0a1c53e0589d768f8"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "contracts/core/libraries/Native.sol:Native",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "contracts/core/interfaces/IRegistry.sol:IRegistry"
        ],
        "libraries": [
          "solady/src/utils/CREATE3.sol:CREATE3"
        ],
        "methods": [
          "initialize(address)",
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)18365_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "anchorToProfileId",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:109"
            },
            {
              "label": "profilesById",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_struct(Profile)2452_storage)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:111"
            },
            {
              "label": "profileIdToPendingOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:113"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Profile)2452_storage)": {
              "label": "mapping(bytes32 => struct IRegistry.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)18365_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Profile)2452_storage": {
              "label": "struct IRegistry.Profile",
              "members": [
                {
                  "label": "id",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "anchor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)18365_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IAllo.sol:IAllo": {
        "src": "contracts/core/interfaces/IAllo.sol:97",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "isCloneableStrategy(address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "getPool(uint256)",
          "getFeeDenominator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IRegistry.sol:IRegistry": {
        "src": "contracts/core/interfaces/IRegistry.sol:92",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/core/interfaces/IStrategy.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "isValidAllocator(address)",
          "isPoolActive()",
          "getPoolAmount()",
          "increasePoolAmount(uint256)",
          "getRecipientStatus(address)",
          "getPayouts(address[],bytes[])",
          "initialize(uint256,bytes)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Clone.sol:Clone": {
        "src": "contracts/core/libraries/Clone.sol:37",
        "version": {
          "withMetadata": "d835e2bf5bc5cd76b4698e2155553a196eee93e70307c16734577cea581b7d20",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Errors.sol:Errors": {
        "src": "contracts/core/libraries/Errors.sol:109",
        "version": {
          "withMetadata": "44e6dc2af07d042e83a0174648bf17c8adaef9eff453cb7cd80ff725217ca08e",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Native.sol:Native": {
        "src": "contracts/core/libraries/Native.sol:26",
        "version": {
          "withMetadata": "3a60511d2731e0f87cc20b565b07db515fba4329af8eeebf86514660afea2ae4",
          "withoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466",
          "linkedWithoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Transfer.sol:Transfer": {
        "src": "contracts/core/libraries/Transfer.sol:95",
        "version": {
          "withMetadata": "5f9fad29bab2a7f928d5389c3e7d9dbd2237ec3ad0f3b7cc75e508b68af57337",
          "withoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466",
          "linkedWithoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466"
        },
        "inherit": [
          "contracts/core/libraries/Native.sol:Native"
        ],
        "libraries": [
          "solady/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/factory/ContractFactory.sol:ContractFactory": {
        "src": "contracts/factory/ContractFactory.sol:107",
        "version": {
          "withMetadata": "83d7577a51f3f6fe4e5ce084ed406e552d426c56b7712169c09f1e519e65514c",
          "withoutMetadata": "0cd9f0333d78bdd2af9498d5d4adeec01b0e328ca33e6873216a037ccc439f13",
          "linkedWithoutMetadata": "0cd9f0333d78bdd2af9498d5d4adeec01b0e328ca33e6873216a037ccc439f13"
        },
        "inherit": [],
        "libraries": [
          "solady/src/utils/CREATE3.sol:CREATE3"
        ],
        "methods": [
          "()",
          "deploy(string,string,bytes)",
          "setDeployer(address,bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ContractFactory",
            "src": "contracts/factory/ContractFactory.sol:119"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "usedSalts",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            },
            {
              "label": "isDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/BaseStrategy.sol:BaseStrategy": {
        "src": "contracts/strategies/BaseStrategy.sol:111",
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "getPoolAmount()",
          "isPoolActive()",
          "getRecipientStatus(address)",
          "increasePoolAmount(uint256)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)",
          "getPayouts(address[],bytes[])",
          "isValidAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseStrategy",
            "src": "contracts/strategies/BaseStrategy.sol:129"
          },
          {
            "kind": "state-variable-immutable",
            "name": "allo",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          },
          {
            "kind": "state-variable-immutable",
            "name": "strategyId",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:DirectGrantsSimpleStrategy": {
        "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:110",
        "version": {
          "withMetadata": "9829bdf1a955e525b35c8a1489adf17ebd323a9afd201f9a4e1ec531aa8bddbd",
          "withoutMetadata": "33b0acc296454328d6f6001591129ade3cff6749c5cc63ef54de3ec43f329108",
          "linkedWithoutMetadata": "33b0acc296454328d6f6001591129ade3cff6749c5cc63ef54de3ec43f329108"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getMilestoneStatus(address,uint256)",
          "getMilestones(address)",
          "setMilestones(address,struct DirectGrantsSimpleStrategy.Milestone[])",
          "reviewSetMilestones(address,uint8)",
          "submitMilestone(address,uint256,(uint256,string))",
          "rejectMilestone(address,uint256)",
          "setRecipientStatusToInReview(address[])",
          "setPoolActive(bool)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DirectGrantsSimpleStrategy",
            "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:192"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:161"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:163"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:164"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(IRegistry)2625",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:167"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:168"
            },
            {
              "label": "_acceptedRecipientIds",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:172"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)3880_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:177"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Milestone)3889_storage)dyn_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:179"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:184"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)3889_storage)dyn_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(Milestone)3889_storage)dyn_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Milestone[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)3880_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)3889_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)3880_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "milestonesReviewStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:DonationVotingCustomRegistryStrategy": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52",
        "version": {
          "withMetadata": "4d98adaef83f5ee9be52d15931946d7a85a1c3b59e2bc3b958e8166a83eb8218",
          "withoutMetadata": "e9aa1a7f70aa9e3a912fdd5a07f6baa303be8a81ecf91dd4d928edbb4feb7a73",
          "linkedWithoutMetadata": "e9aa1a7f70aa9e3a912fdd5a07f6baa303be8a81ecf91dd4d928edbb4feb7a73"
        },
        "inherit": [
          "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingCustomRegistryStrategy",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:162"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)5494_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:165"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:167"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:172"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(SimpleProjectRegistry)5465",
              "contract": "DonationVotingCustomRegistryStrategy",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(SimpleProjectRegistry)5465": {
              "label": "contract SimpleProjectRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5494_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)2643_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)5494_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:SimpleProjectRegistry": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:26",
        "version": {
          "withMetadata": "7d25eea8ddad76705443603a59193e317055f2bbf830776adc3a1704ea1d2520",
          "withoutMetadata": "c42152b6d8418493091034c29cc09b77be668156c32f57fa1f159cd5714b6a87",
          "linkedWithoutMetadata": "c42152b6d8418493091034c29cc09b77be668156c32f57fa1f159cd5714b6a87"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addProject(address)",
          "addProjects(address[])",
          "removeProject(address)",
          "removeProjects(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleProjectRegistry",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "projects",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleProjectRegistry",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy": {
        "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:100",
        "version": {
          "withMetadata": "df3dec92dedbab04e34a3c1168a07804f99fcbd788a595b3c2b27f5dfe6714ec",
          "withoutMetadata": "d6629663f0d8d6eef26b82a4fae61c35e68ce661e4ff9454bfe05bf53536f648",
          "linkedWithoutMetadata": "d6629663f0d8d6eef26b82a4fae61c35e68ce661e4ff9454bfe05bf53536f648"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "setPayout(address[],uint256[])",
          "claim(struct DonationVotingStrategy.Claim[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingStrategy",
            "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:198"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:162"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)5494_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:165"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:167"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:172"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5494_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)2643_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)5494_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:ProportionalPayoutStrategy": {
        "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:113",
        "version": {
          "withMetadata": "bf5e654e6295ade39ee64262d1ef47c78cf469fa62ff13357d14b624e8a6ad9d",
          "withoutMetadata": "e13e75ca0a1cd1e21ea27c1fc34b7a64be3990d1b76eead1227e8c4527fca878",
          "linkedWithoutMetadata": "e13e75ca0a1cd1e21ea27c1fc34b7a64be3990d1b76eead1227e8c4527fca878"
        },
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "setAllocationTime(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProportionalPayoutStrategy",
            "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:163"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Recipient)6906_storage)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:151"
            },
            {
              "label": "hasAllocated",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:153"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ERC721)30852",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "maxRecipientsAllowed",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:155"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:157"
            },
            {
              "label": "totalAllocations",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:159"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:161"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)30852": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)6906_storage)": {
              "label": "mapping(address => struct ProportionalPayoutStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)6906_storage": {
              "label": "struct ProportionalPayoutStrategy.Recipient",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:QVGovernanceERC20Votes": {
        "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:89",
        "version": {
          "withMetadata": "86e735d65479b3f4a8cf6bb9820f6048f14be268f2de79df62621b90b7b5100d",
          "withoutMetadata": "7e5fbcc2e95ff03b14af414cbad63924b6da212607218fac8c958ae1e504c966",
          "linkedWithoutMetadata": "7e5fbcc2e95ff03b14af414cbad63924b6da212607218fac8c958ae1e504c966"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVGovernanceERC20Votes",
            "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:102"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14605_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14616_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "govToken",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IVotes)18812",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:96"
            },
            {
              "label": "timestamp",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:98"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IVotes)18812": {
              "label": "contract IVotes",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14616_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14605_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14616_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14605_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:HackathonQVStrategy": {
        "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:110",
        "version": {
          "withMetadata": "ba0dffa5517f1aef397f06a93dd8a07f7761715abdcf80a6f15b530fb98c22ee",
          "withoutMetadata": "aaa222244f9e7afe5c52f9c671f0886dd44c9cf9bc8d02a1a4d6480cc82aeadb",
          "linkedWithoutMetadata": "aaa222244f9e7afe5c52f9c671f0886dd44c9cf9bc8d02a1a4d6480cc82aeadb"
        },
        "inherit": [
          "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver",
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllowedRecipientIds(address[],uint64,bytes)",
          "setPayoutPercentages(uint256[])",
          "getPayouts(address[],bytes[])",
          "getAttestation(bytes32)",
          "getSchema(bytes32)",
          "isPayable()",
          "isAttestationExpired(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HackathonQVStrategy",
            "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:148"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14605_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14616_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "_eas",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IEAS)17503",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            },
            {
              "label": "payoutPercentages",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:130"
            },
            {
              "label": "votesByRank",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:131"
            },
            {
              "label": "easInfo",
              "offset": 0,
              "slot": "14",
              "type": "t_struct(EASInfo)7805_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "19",
              "type": "t_contract(ERC721)30852",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:133"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:133"
            },
            {
              "label": "recipientIdToUID",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:135"
            },
            {
              "label": "recipientIdToIndex",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:136"
            },
            {
              "label": "indexToRecipientId",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:143"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ERC721)30852": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IEAS)17503": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(ISchemaRegistry)17548": {
              "label": "contract ISchemaRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14616_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14605_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14616_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(EASInfo)7805_storage": {
              "label": "struct HackathonQVStrategy.EASInfo",
              "members": [
                {
                  "label": "eas",
                  "type": "t_contract(IEAS)17503",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "schemaRegistry",
                  "type": "t_contract(ISchemaRegistry)17548",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "schemaUID",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "schema",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "revocable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14605_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver": {
        "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:19",
        "inherit": [
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver"
        ],
        "libraries": [],
        "methods": [
          "isPayable()",
          "()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_eas",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IEAS)17503",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            }
          ],
          "types": {
            "t_contract(IEAS)17503": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:QVNftTieredStrategy": {
        "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:94",
        "version": {
          "withMetadata": "673b2775e29a77cca3a68fd25c7e802bd12a90121a7524071ee4a8992c945a4b",
          "withoutMetadata": "4683fae814d6fb023b0047ddb6d2222ddfad30789503cf8e32901179f6da7c69",
          "linkedWithoutMetadata": "4683fae814d6fb023b0047ddb6d2222ddfad30789503cf8e32901179f6da7c69"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVNftTieredStrategy",
            "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14605_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14616_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "nfts",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_contract(ERC721)30852)dyn_storage",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:111"
            },
            {
              "label": "maxVoiceCreditsPerNft",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_contract(ERC721)30852,t_uint256)",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:113"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_contract(ERC721)30852,t_mapping(t_uint256,t_uint256))",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:115"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(ERC721)30852)dyn_storage": {
              "label": "contract ERC721[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)30852": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14616_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14605_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)30852,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(contract ERC721 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)30852,t_uint256)": {
              "label": "mapping(contract ERC721 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14616_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14605_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:LockupDynamicStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:16",
        "version": {
          "withMetadata": "4f3d11b68717049b5aece3171b0b0f5446377bc6a0d97fc111166ee07f942a78",
          "withoutMetadata": "760360c5ebebbe534e3ac2802d6b0ed1697372fd278e30a83bd5c0b0c6db06a2",
          "linkedWithoutMetadata": "760360c5ebebbe534e3ac2802d6b0ed1697372fd278e30a83bd5c0b0c6db06a2"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/v2-core/src/types/DataTypes.sol:LockupDynamic"
        ],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientSegments(address,struct LockupDynamic.SegmentWithDelta[])",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupDynamicStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:42"
            },
            {
              "label": "lockupDynamic",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupDynamic)29263",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)29383_storage",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)9571_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(SegmentWithDelta)29467_storage)dyn_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupDynamic)29263": {
              "label": "contract ISablierV2LockupDynamic",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)9571_storage)": {
              "label": "mapping(address => struct LockupDynamicStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)29383_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)28624",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)9571_storage": {
              "label": "struct LockupDynamicStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "segments",
                  "type": "t_array(t_struct(SegmentWithDelta)29467_storage)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(SegmentWithDelta)29467_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exponent",
                  "type": "t_userDefinedValueType(UD2x18)26820",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "delta",
                  "type": "t_uint40",
                  "offset": 24,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD2x18)26820": {
              "label": "UD2x18",
              "numberOfBytes": "8",
              "underlying": "t_uint64"
            },
            "t_userDefinedValueType(UD60x18)28624": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:LockupLinearStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:16",
        "version": {
          "withMetadata": "fb83816233de63b241e43b4f15b720764bcf0aac3658321301ae7fae682b3d9a",
          "withoutMetadata": "1b657f61f96addb8f1821d7677d27f3ae568d46d62cddd9deb6085a94e46afc5",
          "linkedWithoutMetadata": "1b657f61f96addb8f1821d7677d27f3ae568d46d62cddd9deb6085a94e46afc5"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/v2-core/src/types/DataTypes.sol:LockupLinear"
        ],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientDurations(address,(uint40,uint40))",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupLinearStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:42"
            },
            {
              "label": "lockupLinear",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupLinear)29352",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)29383_storage",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)10753_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupLinear)29352": {
              "label": "contract ISablierV2LockupLinear",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)10753_storage)": {
              "label": "mapping(address => struct LockupLinearStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)29383_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)28624",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Durations)29535_storage": {
              "label": "struct LockupLinear.Durations",
              "members": [
                {
                  "label": "cliff",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "total",
                  "type": "t_uint40",
                  "offset": 5,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)10753_storage": {
              "label": "struct LockupLinearStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durations",
                  "type": "t_struct(Durations)29535_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD60x18)28624": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:NFT": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:8",
        "version": {
          "withMetadata": "0ef6af16db96d71d8d282e91cc724060597fddecd5738929e54dcadea21c0f6d",
          "withoutMetadata": "8cb56b13b3a28a0670458267486272612909f877d123a98977ab9be7c8239ceb",
          "linkedWithoutMetadata": "8cb56b13b3a28a0670458267486272612909f877d123a98977ab9be7c8239ceb"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable",
          "solady/src/tokens/ERC721.sol:ERC721"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string,uint256,address)",
          "name()",
          "symbol()",
          "mintTo(address)",
          "tokenURI(uint256)",
          "withdrawPayments(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFT",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTokenId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:16"
            },
            {
              "label": "MINT_PRICE",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:17"
            },
            {
              "label": "__name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:20"
            },
            {
              "label": "__symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:NFTFactory": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:6",
        "version": {
          "withMetadata": "37bc7a41a680e6f88db957963a21ebb54a240c4e1a605e917edef79ab87925e0",
          "withoutMetadata": "54a5c6957ab70bffc8aa714d79595e4440b2088a7562cf66cc828cf354bfdb05",
          "linkedWithoutMetadata": "54a5c6957ab70bffc8aa714d79595e4440b2088a7562cf66cc828cf354bfdb05"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createNFTContract(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isNFTContract",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NFTFactory",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:WrappedVotingNftMintStrategy": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:101",
        "version": {
          "withMetadata": "136c6c9dede0e58cd6a80e1faad564dc0d2e5b5f607a1f4e17c8440803a551cc",
          "withoutMetadata": "7eb76765de287de6aa27ad742625a13ffb4a5184e79f1a46ae4b3e4bdceddf05",
          "linkedWithoutMetadata": "7eb76765de287de6aa27ad742625a13ffb4a5184e79f1a46ae4b3e4bdceddf05"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllocationTimes(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrappedVotingNftMintStrategy",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:147"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "nftFactory",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(NFTFactory)11972",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationStartTime",
              "offset": 20,
              "slot": "4",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "currentWinner",
              "offset": 8,
              "slot": "5",
              "type": "t_address",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:137"
            },
            {
              "label": "allocations",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:138"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(NFTFactory)11972": {
              "label": "contract NFTFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:99",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(struct DonationVotingMerkleDistributionBaseStrategy.ApplicationStatus[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "updateDistribution(bytes32,(uint256,string))",
          "isDistributionSet()",
          "hasBeenDistributed(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionBaseStrategy",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:286"
          },
          {
            "kind": "state-variable-immutable",
            "name": "PERMIT2",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:230"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)2918_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)12548_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12548_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12548_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:DonationVotingMerkleDistributionDirectTransferStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76",
        "version": {
          "withMetadata": "3bfd8ea2ecfbe2a0bb9c570a207f10502bb88871407fc9145ac0374dfa09fe98",
          "withoutMetadata": "f40aec7ea9081a4c8880c4262acba6c73d5a17ebf29c88f2c31b27910d6222bf",
          "linkedWithoutMetadata": "f40aec7ea9081a4c8880c4262acba6c73d5a17ebf29c88f2c31b27910d6222bf"
        },
        "inherit": [
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "solady/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [
          "(address,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionDirectTransferStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)2918_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)12548_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12548_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12548_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:DonationVotingMerkleDistributionVaultStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:92",
        "version": {
          "withMetadata": "2da2c42c2850c5cb03e4416b96aec432243de18bbc750df3509731c4283db93e",
          "withoutMetadata": "507fe047ea5c70dd4a601752c61cda7cd579ceef22db953578b10c28cb0faf42",
          "linkedWithoutMetadata": "507fe047ea5c70dd4a601752c61cda7cd579ceef22db953578b10c28cb0faf42"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "solady/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [
          "(address,string,address)",
          "claim(struct DonationVotingMerkleDistributionVaultStrategy.Claim[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionVaultStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)2918_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)12548_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "16",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "16",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "18",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "67",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12548_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12548_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy": {
        "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:89",
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVBaseStrategy",
            "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:258"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14605_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14616_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14616_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14605_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14616_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14605_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-simple/QVSimpleStrategy.sol:QVSimpleStrategy": {
        "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:90",
        "version": {
          "withMetadata": "61013fdf6071c177e7bfe15f79d3660a6b6031c1c14ae4b9137a38a3f1e58e32",
          "withoutMetadata": "344e9982071e99896829ad8873c32fe3437606fcfc3852ea28fcf7a2fbb9b250",
          "linkedWithoutMetadata": "344e9982071e99896829ad8873c32fe3437606fcfc3852ea28fcf7a2fbb9b250"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "addAllocator(address)",
          "removeAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVSimpleStrategy",
            "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14605_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14616_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:108"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:111"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14616_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14605_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14616_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14605_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:RFPCommitteeStrategy": {
        "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:84",
        "version": {
          "withMetadata": "35bc50ee407ed65d0fe620b2161d277e9843ea70560dd11aeab0ab3a5b82e928",
          "withoutMetadata": "3e2dd86dc25976e83931bbfa4335808b326f65a966d87ac44d9085a8c888c6a6",
          "linkedWithoutMetadata": "3e2dd86dc25976e83931bbfa4335808b326f65a966d87ac44d9085a8c888c6a6"
        },
        "inherit": [
          "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPCommitteeStrategy",
            "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:124"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:173"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:174"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)2625",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:184"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:189"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)16125_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)16116_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:192"
            },
            {
              "label": "voteThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:104"
            },
            {
              "label": "votedFor",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:109"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:112"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)16125_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16116_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)16125_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)16116_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy": {
        "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:105",
        "version": {
          "withMetadata": "3c8edacdaf39c5846c543d8e58063cb42bf233200b192dac75877f145f83587c",
          "withoutMetadata": "798fff6a523ebbed5be0c2dbb4e6a71514598914431eaf06713c13bbf630c23a",
          "linkedWithoutMetadata": "798fff6a523ebbed5be0c2dbb4e6a71514598914431eaf06713c13bbf630c23a"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getPayouts(address[],bytes[])",
          "getMilestone(uint256)",
          "getMilestoneStatus(uint256)",
          "setPoolActive(bool)",
          "setMilestones(struct RFPSimpleStrategy.Milestone[])",
          "submitUpcomingMilestone((uint256,string))",
          "increaseMaxBid(uint256)",
          "rejectMilestone(uint256)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPSimpleStrategy",
            "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:200"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:173"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:174"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)2625",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:184"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:189"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)16125_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)16116_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:192"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)16125_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Recipient)16116_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)16125_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)16116_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/IEAS.sol:IEAS": {
        "src": "lib/eas-contracts/contracts/IEAS.sol:82",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSchemaRegistry()",
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))",
          "multiAttest(struct MultiAttestationRequest[])",
          "multiAttestByDelegation(struct MultiDelegatedAttestationRequest[])",
          "revoke((bytes32,(bytes32,uint256)))",
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))",
          "multiRevoke(struct MultiRevocationRequest[])",
          "multiRevokeByDelegation(struct MultiDelegatedRevocationRequest[])",
          "timestamp(bytes32)",
          "multiTimestamp(bytes32[])",
          "revokeOffchain(bytes32)",
          "multiRevokeOffchain(bytes32[])",
          "getAttestation(bytes32)",
          "isAttestationValid(bytes32)",
          "getTimestamp(bytes32)",
          "getRevokeOffchain(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol:ISchemaRegistry": {
        "src": "lib/eas-contracts/contracts/ISchemaRegistry.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "register(string,address,bool)",
          "getSchema(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver": {
        "src": "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:19",
        "version": {
          "withMetadata": "861f7b4b5cebd0cc21d52183188433599b76c84cde8b89bf5386c1fe3f6eaa80",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "98d51e29cd4471514301528f921b940f0e3f08a840864a9fecb8c9b4bcddb29c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:50",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)18365_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)18365_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)18365_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "98648bcc567201c6e2a97d6983f7d8cb67e2b26cf596a5006545e412cd3ad486",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "bc571b638cfc9f4771465711f06f01f30087983dbef82374b30772027f4047cb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:13",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "e656d1d962733768f0855fbdf9ed168764831926539821ac44e86d3bb1b36eaf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "693185568f09a8e7cf814f35b58417930557886653d8a396cb1da3efcebac991",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "20ad6d48a626bf7de81279be98056e3a7d3137b73e6eaea9a02c1ccedb981a51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "93a045a2cd108edb2cc9fc5888ca952928d28399b93d90bd4d457c23906daf61",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/IEIP712.sol:IEIP712": {
        "src": "lib/permit2/src/interfaces/IEIP712.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/ISignatureTransfer.sol:ISignatureTransfer": {
        "src": "lib/permit2/src/interfaces/ISignatureTransfer.sol:9",
        "inherit": [
          "lib/permit2/src/interfaces/IEIP712.sol:IEIP712"
        ],
        "libraries": [],
        "methods": [
          "nonceBitmap(address,uint256)",
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)",
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)",
          "permitTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes)",
          "permitWitnessTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes32,string,bytes)",
          "invalidateUnorderedNonces(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable": {
        "src": "lib/v2-core/src/interfaces/IAdminable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "transferAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Base.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "comptroller()",
          "protocolRevenues(address)",
          "claimProtocolRevenues(address)",
          "setComptroller(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:ISablierV2Comptroller": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "flashFee()",
          "isFlashAsset(address)",
          "protocolFees(address)",
          "setFlashFee(uint256)",
          "setProtocolFee(address,uint256)",
          "toggleFlashAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:13",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getAsset(uint256)",
          "getDepositedAmount(uint256)",
          "getEndTime(uint256)",
          "getRecipient(uint256)",
          "getRefundedAmount(uint256)",
          "getSender(uint256)",
          "getStartTime(uint256)",
          "getWithdrawnAmount(uint256)",
          "isCancelable(uint256)",
          "isCold(uint256)",
          "isDepleted(uint256)",
          "isStream(uint256)",
          "isWarm(uint256)",
          "nextStreamId()",
          "refundableAmountOf(uint256)",
          "statusOf(uint256)",
          "streamedAmountOf(uint256)",
          "wasCanceled(uint256)",
          "withdrawableAmountOf(uint256)",
          "burn(uint256)",
          "cancel(uint256)",
          "cancelMultiple(uint256[])",
          "renounce(uint256)",
          "setNFTDescriptor(address)",
          "withdraw(uint256,address,uint128)",
          "withdrawMax(uint256,address)",
          "withdrawMaxAndTransfer(uint256,address)",
          "withdrawMultiple(uint256[],address,uint128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:ISablierV2LockupDynamic": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_SEGMENT_COUNT()",
          "getRange(uint256)",
          "getSegments(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDeltas((address,bool,address,uint128,address,(address,uint256),struct LockupDynamic.SegmentWithDelta[]))",
          "createWithMilestones((address,uint40,bool,address,uint128,address,(address,uint256),struct LockupDynamic.Segment[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:ISablierV2LockupLinear": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getCliffTime(uint256)",
          "getRange(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))",
          "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:ISablierV2NFTDescriptor": {
        "src": "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:Lockup": {
        "src": "lib/v2-core/src/types/DataTypes.sol:29",
        "version": {
          "withMetadata": "457b1547bb13b06cb7156701bbf0186a99144e4238d5dc11bf51020873ff8fb8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupDynamic": {
        "src": "lib/v2-core/src/types/DataTypes.sol:72",
        "version": {
          "withMetadata": "fd49f318e29f023c1fcfced47790db2f41c40a9a3a786fb4bbdbbb03d7d55031",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupLinear": {
        "src": "lib/v2-core/src/types/DataTypes.sol:180",
        "version": {
          "withMetadata": "c748e8c23adeb41f68d6a1a4799b8617d7a4aa9552b6ead30ba01615cc2917bf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/auth/Ownable.sol:Ownable": {
        "src": "solady/src/auth/Ownable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "renounceOwnership()",
          "requestOwnershipHandover()",
          "cancelOwnershipHandover()",
          "completeOwnershipHandover(address)",
          "owner()",
          "ownershipHandoverExpiresAt(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC20.sol:ERC20": {
        "src": "solady/src/tokens/ERC20.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC721.sol:ERC721": {
        "src": "solady/src/tokens/ERC721.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "balanceOf(address)",
          "getApproved(uint256)",
          "approve(address,uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/CREATE3.sol:CREATE3": {
        "src": "solady/src/utils/CREATE3.sol:8",
        "version": {
          "withMetadata": "7a8b05eef7b80856897fceb31cd1e697cfa3a7063c50a2db5d62261d42911d31",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/SafeTransferLib.sol:SafeTransferLib": {
        "src": "solady/src/utils/SafeTransferLib.sol:12",
        "version": {
          "withMetadata": "a57aaf9077f6c82e8ba2358cf1a07a7a3fb1553aac57ba7964cc4314da28bd89",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "contracts/core/Allo.sol:Allo": {
        "src": "contracts/core/Allo.sol:89",
        "version": {
          "withMetadata": "d5a5450438f83a8971ec63779d140a81c51d90bb9d5ca1547216cedf8f408796",
          "withoutMetadata": "2f0bb5c05d4ff444357fef42d369f70e73f71d58052d6c259b2c1010039dd8a3",
          "linkedWithoutMetadata": "2f0bb5c05d4ff444357fef42d369f70e73f71d58052d6c259b2c1010039dd8a3"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "solady/src/auth/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IAllo.sol:IAllo"
        ],
        "libraries": [
          "contracts/core/libraries/Clone.sol:Clone"
        ],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "getFeeDenominator()",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "isCloneableStrategy(address)",
          "getPool(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)18365_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "percentFee",
              "offset": 0,
              "slot": "52",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:114"
            },
            {
              "label": "baseFee",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:129"
            },
            {
              "label": "_poolIndex",
              "offset": 0,
              "slot": "54",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "55",
              "type": "t_address_payable",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "56",
              "type": "t_contract(IRegistry)2625",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:133"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "57",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:134"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "58",
              "type": "t_mapping(t_uint256,t_struct(Pool)2144_storage)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:135"
            },
            {
              "label": "cloneableStrategies",
              "offset": 0,
              "slot": "59",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)2792": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)18365_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)2144_storage)": {
              "label": "mapping(uint256 => struct IAllo.Pool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Pool)2144_storage": {
              "label": "struct IAllo.Pool",
              "members": [
                {
                  "label": "profileId",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "strategy",
                  "type": "t_contract(IStrategy)2792",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "managerRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)18365_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Anchor.sol:Anchor": {
        "src": "contracts/core/Anchor.sol:89",
        "version": {
          "withMetadata": "0d3e231db35a43ff4b5ea2c9f7432b9055d2e59a4175cf655b5ca46e8fc1253d",
          "withoutMetadata": "7c387b18ca48b348b1f66a70ba201e3a467bf09f94fc5b8e83ff8746c22ec24a",
          "linkedWithoutMetadata": "7c387b18ca48b348b1f66a70ba201e3a467bf09f94fc5b8e83ff8746c22ec24a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "execute(address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Anchor",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "profileId",
            "src": "contracts/core/Anchor.sol:89"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Registry.sol:Registry": {
        "src": "contracts/core/Registry.sol:103",
        "version": {
          "withMetadata": "95341e716d5c0459e894e490b4bfe2fe5476ff4af03112451f77e0fda0efabf4",
          "withoutMetadata": "b9c514aa3dc8247b297a6c2d4bee550cc935d15dcc5a9da2c5b6ac13316a8bc0",
          "linkedWithoutMetadata": "b9c514aa3dc8247b297a6c2d4bee550cc935d15dcc5a9da2c5b6ac13316a8bc0"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "contracts/core/libraries/Native.sol:Native",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "contracts/core/interfaces/IRegistry.sol:IRegistry"
        ],
        "libraries": [
          "solady/src/utils/CREATE3.sol:CREATE3"
        ],
        "methods": [
          "initialize(address)",
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)18365_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "anchorToProfileId",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:109"
            },
            {
              "label": "profilesById",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_struct(Profile)2452_storage)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:111"
            },
            {
              "label": "profileIdToPendingOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:113"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Profile)2452_storage)": {
              "label": "mapping(bytes32 => struct IRegistry.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)18365_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Profile)2452_storage": {
              "label": "struct IRegistry.Profile",
              "members": [
                {
                  "label": "id",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "anchor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)18365_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IAllo.sol:IAllo": {
        "src": "contracts/core/interfaces/IAllo.sol:97",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "isCloneableStrategy(address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "getPool(uint256)",
          "getFeeDenominator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IRegistry.sol:IRegistry": {
        "src": "contracts/core/interfaces/IRegistry.sol:92",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/core/interfaces/IStrategy.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "isValidAllocator(address)",
          "isPoolActive()",
          "getPoolAmount()",
          "increasePoolAmount(uint256)",
          "getRecipientStatus(address)",
          "getPayouts(address[],bytes[])",
          "initialize(uint256,bytes)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Clone.sol:Clone": {
        "src": "contracts/core/libraries/Clone.sol:37",
        "version": {
          "withMetadata": "2e01881b5fccd43ff9ac53e3f3128c3c51f50f1e6d9b2833681723373e659ea0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Errors.sol:Errors": {
        "src": "contracts/core/libraries/Errors.sol:109",
        "version": {
          "withMetadata": "c292c17c019e53ca0d2fc3c85afa8b589943417fd2caafb9e46305d715c73821",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Native.sol:Native": {
        "src": "contracts/core/libraries/Native.sol:26",
        "version": {
          "withMetadata": "190e26346c4d6e6fb971d748cf4228d0cdf2906150004312e48436b1e38038f6",
          "withoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466",
          "linkedWithoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Transfer.sol:Transfer": {
        "src": "contracts/core/libraries/Transfer.sol:95",
        "version": {
          "withMetadata": "e80cc687816ca54035359b7921934918b0924772d68405bd8d9f34522e08320e",
          "withoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466",
          "linkedWithoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466"
        },
        "inherit": [
          "contracts/core/libraries/Native.sol:Native"
        ],
        "libraries": [
          "solady/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/factory/ContractFactory.sol:ContractFactory": {
        "src": "contracts/factory/ContractFactory.sol:107",
        "version": {
          "withMetadata": "e64d4c56b147f9855ab9d134c4897713a462eb58035721102fb0dc5ff8dc6858",
          "withoutMetadata": "0cd9f0333d78bdd2af9498d5d4adeec01b0e328ca33e6873216a037ccc439f13",
          "linkedWithoutMetadata": "0cd9f0333d78bdd2af9498d5d4adeec01b0e328ca33e6873216a037ccc439f13"
        },
        "inherit": [],
        "libraries": [
          "solady/src/utils/CREATE3.sol:CREATE3"
        ],
        "methods": [
          "()",
          "deploy(string,string,bytes)",
          "setDeployer(address,bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ContractFactory",
            "src": "contracts/factory/ContractFactory.sol:119"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "usedSalts",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            },
            {
              "label": "isDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/BaseStrategy.sol:BaseStrategy": {
        "src": "contracts/strategies/BaseStrategy.sol:111",
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "getPoolAmount()",
          "isPoolActive()",
          "getRecipientStatus(address)",
          "increasePoolAmount(uint256)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)",
          "getPayouts(address[],bytes[])",
          "isValidAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseStrategy",
            "src": "contracts/strategies/BaseStrategy.sol:129"
          },
          {
            "kind": "state-variable-immutable",
            "name": "allo",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          },
          {
            "kind": "state-variable-immutable",
            "name": "strategyId",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:DirectGrantsSimpleStrategy": {
        "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:110",
        "version": {
          "withMetadata": "0052f88e01f1d1fea186b91aa9d05d15977f0074c821b9576fd59c491f4b6f7f",
          "withoutMetadata": "33b0acc296454328d6f6001591129ade3cff6749c5cc63ef54de3ec43f329108",
          "linkedWithoutMetadata": "33b0acc296454328d6f6001591129ade3cff6749c5cc63ef54de3ec43f329108"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getMilestoneStatus(address,uint256)",
          "getMilestones(address)",
          "setMilestones(address,struct DirectGrantsSimpleStrategy.Milestone[])",
          "reviewSetMilestones(address,uint8)",
          "submitMilestone(address,uint256,(uint256,string))",
          "rejectMilestone(address,uint256)",
          "setRecipientStatusToInReview(address[])",
          "setPoolActive(bool)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DirectGrantsSimpleStrategy",
            "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:192"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:161"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:163"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:164"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(IRegistry)2625",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:167"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:168"
            },
            {
              "label": "_acceptedRecipientIds",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:172"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)3880_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:177"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Milestone)3889_storage)dyn_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:179"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:184"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)3889_storage)dyn_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(Milestone)3889_storage)dyn_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Milestone[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)3880_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)3889_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)3880_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "milestonesReviewStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:DonationVotingCustomRegistryStrategy": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52",
        "version": {
          "withMetadata": "1fe35e090aa07023e3568b52d01ced61bc9a06284440480c9c273bb11bde49b3",
          "withoutMetadata": "e9aa1a7f70aa9e3a912fdd5a07f6baa303be8a81ecf91dd4d928edbb4feb7a73",
          "linkedWithoutMetadata": "e9aa1a7f70aa9e3a912fdd5a07f6baa303be8a81ecf91dd4d928edbb4feb7a73"
        },
        "inherit": [
          "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingCustomRegistryStrategy",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:162"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)5494_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:165"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:167"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:172"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(SimpleProjectRegistry)5465",
              "contract": "DonationVotingCustomRegistryStrategy",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(SimpleProjectRegistry)5465": {
              "label": "contract SimpleProjectRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5494_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)2643_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)5494_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:SimpleProjectRegistry": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:26",
        "version": {
          "withMetadata": "d3ae5adcc52e47611747841f3c60b2dfb907b831bb612b63840fb1d9f421af11",
          "withoutMetadata": "c42152b6d8418493091034c29cc09b77be668156c32f57fa1f159cd5714b6a87",
          "linkedWithoutMetadata": "c42152b6d8418493091034c29cc09b77be668156c32f57fa1f159cd5714b6a87"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addProject(address)",
          "addProjects(address[])",
          "removeProject(address)",
          "removeProjects(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleProjectRegistry",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "projects",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleProjectRegistry",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy": {
        "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:100",
        "version": {
          "withMetadata": "c423aba24dabe4406e107e64da3b4b99315770d86c8806cea029fe20134d73be",
          "withoutMetadata": "d6629663f0d8d6eef26b82a4fae61c35e68ce661e4ff9454bfe05bf53536f648",
          "linkedWithoutMetadata": "d6629663f0d8d6eef26b82a4fae61c35e68ce661e4ff9454bfe05bf53536f648"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "setPayout(address[],uint256[])",
          "claim(struct DonationVotingStrategy.Claim[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingStrategy",
            "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:198"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:162"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)5494_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:165"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:167"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:172"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5494_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)2643_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)5494_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:ProportionalPayoutStrategy": {
        "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:113",
        "version": {
          "withMetadata": "b98419e25d95300c2ae13a7660f713498087c9d7f37a77ab1a2c342761af1bc0",
          "withoutMetadata": "e13e75ca0a1cd1e21ea27c1fc34b7a64be3990d1b76eead1227e8c4527fca878",
          "linkedWithoutMetadata": "e13e75ca0a1cd1e21ea27c1fc34b7a64be3990d1b76eead1227e8c4527fca878"
        },
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "setAllocationTime(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProportionalPayoutStrategy",
            "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:163"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Recipient)6906_storage)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:151"
            },
            {
              "label": "hasAllocated",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:153"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ERC721)30852",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "maxRecipientsAllowed",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:155"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:157"
            },
            {
              "label": "totalAllocations",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:159"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:161"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)30852": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)6906_storage)": {
              "label": "mapping(address => struct ProportionalPayoutStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)6906_storage": {
              "label": "struct ProportionalPayoutStrategy.Recipient",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:QVGovernanceERC20Votes": {
        "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:89",
        "version": {
          "withMetadata": "bafb53710d93363c8196ee3310460f5cbf35921000f66cef0602c823c84bf7ae",
          "withoutMetadata": "7e5fbcc2e95ff03b14af414cbad63924b6da212607218fac8c958ae1e504c966",
          "linkedWithoutMetadata": "7e5fbcc2e95ff03b14af414cbad63924b6da212607218fac8c958ae1e504c966"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVGovernanceERC20Votes",
            "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:102"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14605_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14616_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "govToken",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IVotes)18812",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:96"
            },
            {
              "label": "timestamp",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:98"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IVotes)18812": {
              "label": "contract IVotes",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14616_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14605_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14616_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14605_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:HackathonQVStrategy": {
        "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:110",
        "version": {
          "withMetadata": "53133f9e6accdd8432be19245abc397dec784e9c7ab76d39faadb976cb3c22b0",
          "withoutMetadata": "aaa222244f9e7afe5c52f9c671f0886dd44c9cf9bc8d02a1a4d6480cc82aeadb",
          "linkedWithoutMetadata": "aaa222244f9e7afe5c52f9c671f0886dd44c9cf9bc8d02a1a4d6480cc82aeadb"
        },
        "inherit": [
          "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver",
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllowedRecipientIds(address[],uint64,bytes)",
          "setPayoutPercentages(uint256[])",
          "getPayouts(address[],bytes[])",
          "getAttestation(bytes32)",
          "getSchema(bytes32)",
          "isPayable()",
          "isAttestationExpired(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HackathonQVStrategy",
            "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:148"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14605_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14616_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "_eas",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IEAS)17503",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            },
            {
              "label": "payoutPercentages",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:130"
            },
            {
              "label": "votesByRank",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:131"
            },
            {
              "label": "easInfo",
              "offset": 0,
              "slot": "14",
              "type": "t_struct(EASInfo)7805_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "19",
              "type": "t_contract(ERC721)30852",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:133"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:133"
            },
            {
              "label": "recipientIdToUID",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:135"
            },
            {
              "label": "recipientIdToIndex",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:136"
            },
            {
              "label": "indexToRecipientId",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:143"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ERC721)30852": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IEAS)17503": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(ISchemaRegistry)17548": {
              "label": "contract ISchemaRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14616_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14605_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14616_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(EASInfo)7805_storage": {
              "label": "struct HackathonQVStrategy.EASInfo",
              "members": [
                {
                  "label": "eas",
                  "type": "t_contract(IEAS)17503",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "schemaRegistry",
                  "type": "t_contract(ISchemaRegistry)17548",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "schemaUID",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "schema",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "revocable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14605_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver": {
        "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:19",
        "inherit": [
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver"
        ],
        "libraries": [],
        "methods": [
          "isPayable()",
          "()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_eas",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IEAS)17503",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            }
          ],
          "types": {
            "t_contract(IEAS)17503": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:QVNftTieredStrategy": {
        "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:94",
        "version": {
          "withMetadata": "d103d5c5027914aff0438271166d286bebdb47ef9b2123558b27c8a4afe4cf2c",
          "withoutMetadata": "4683fae814d6fb023b0047ddb6d2222ddfad30789503cf8e32901179f6da7c69",
          "linkedWithoutMetadata": "4683fae814d6fb023b0047ddb6d2222ddfad30789503cf8e32901179f6da7c69"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVNftTieredStrategy",
            "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14605_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14616_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "nfts",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_contract(ERC721)30852)dyn_storage",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:111"
            },
            {
              "label": "maxVoiceCreditsPerNft",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_contract(ERC721)30852,t_uint256)",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:113"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_contract(ERC721)30852,t_mapping(t_uint256,t_uint256))",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:115"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(ERC721)30852)dyn_storage": {
              "label": "contract ERC721[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)30852": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14616_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14605_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)30852,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(contract ERC721 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)30852,t_uint256)": {
              "label": "mapping(contract ERC721 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14616_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14605_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:LockupDynamicStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:16",
        "version": {
          "withMetadata": "7f9839315eca34423a9b341c62c223e01a23321565961004eb3ae394e3aeffc1",
          "withoutMetadata": "760360c5ebebbe534e3ac2802d6b0ed1697372fd278e30a83bd5c0b0c6db06a2",
          "linkedWithoutMetadata": "760360c5ebebbe534e3ac2802d6b0ed1697372fd278e30a83bd5c0b0c6db06a2"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/v2-core/src/types/DataTypes.sol:LockupDynamic"
        ],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientSegments(address,struct LockupDynamic.SegmentWithDelta[])",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupDynamicStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:42"
            },
            {
              "label": "lockupDynamic",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupDynamic)29263",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)29383_storage",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)9571_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(SegmentWithDelta)29467_storage)dyn_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupDynamic)29263": {
              "label": "contract ISablierV2LockupDynamic",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)9571_storage)": {
              "label": "mapping(address => struct LockupDynamicStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)29383_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)28624",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)9571_storage": {
              "label": "struct LockupDynamicStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "segments",
                  "type": "t_array(t_struct(SegmentWithDelta)29467_storage)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(SegmentWithDelta)29467_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exponent",
                  "type": "t_userDefinedValueType(UD2x18)26820",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "delta",
                  "type": "t_uint40",
                  "offset": 24,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD2x18)26820": {
              "label": "UD2x18",
              "numberOfBytes": "8",
              "underlying": "t_uint64"
            },
            "t_userDefinedValueType(UD60x18)28624": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:LockupLinearStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:16",
        "version": {
          "withMetadata": "0c59559b009ed2386f2f87fabf0d3ca065699af528ef1f0271bb204c878b2adb",
          "withoutMetadata": "1b657f61f96addb8f1821d7677d27f3ae568d46d62cddd9deb6085a94e46afc5",
          "linkedWithoutMetadata": "1b657f61f96addb8f1821d7677d27f3ae568d46d62cddd9deb6085a94e46afc5"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/v2-core/src/types/DataTypes.sol:LockupLinear"
        ],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientDurations(address,(uint40,uint40))",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupLinearStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:42"
            },
            {
              "label": "lockupLinear",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupLinear)29352",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)29383_storage",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)10753_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupLinear)29352": {
              "label": "contract ISablierV2LockupLinear",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)10753_storage)": {
              "label": "mapping(address => struct LockupLinearStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)29383_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)28624",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Durations)29535_storage": {
              "label": "struct LockupLinear.Durations",
              "members": [
                {
                  "label": "cliff",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "total",
                  "type": "t_uint40",
                  "offset": 5,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)10753_storage": {
              "label": "struct LockupLinearStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durations",
                  "type": "t_struct(Durations)29535_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD60x18)28624": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:NFT": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:8",
        "version": {
          "withMetadata": "5195ac3ee4a4b7d8cf435504cf43b9ef1730b9e49146fe4655c3236e716847d2",
          "withoutMetadata": "8cb56b13b3a28a0670458267486272612909f877d123a98977ab9be7c8239ceb",
          "linkedWithoutMetadata": "8cb56b13b3a28a0670458267486272612909f877d123a98977ab9be7c8239ceb"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable",
          "solady/src/tokens/ERC721.sol:ERC721"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string,uint256,address)",
          "name()",
          "symbol()",
          "mintTo(address)",
          "tokenURI(uint256)",
          "withdrawPayments(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFT",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTokenId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:16"
            },
            {
              "label": "MINT_PRICE",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:17"
            },
            {
              "label": "__name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:20"
            },
            {
              "label": "__symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:NFTFactory": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:6",
        "version": {
          "withMetadata": "c548978710e379e7b27fb94750d6f69f378712adf1189cf997ad5a885c798c89",
          "withoutMetadata": "cb86ae20b6b992e0cc63c81549e8c0f23f2b381d40d8d8876835e2bf213c81a4",
          "linkedWithoutMetadata": "cb86ae20b6b992e0cc63c81549e8c0f23f2b381d40d8d8876835e2bf213c81a4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createNFTContract(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isNFTContract",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NFTFactory",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:WrappedVotingNftMintStrategy": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:101",
        "version": {
          "withMetadata": "63136fa70d558675999ceb385d4ffa85cf8bd0da47046d59d66d2ab2e28d6c4a",
          "withoutMetadata": "7eb76765de287de6aa27ad742625a13ffb4a5184e79f1a46ae4b3e4bdceddf05",
          "linkedWithoutMetadata": "7eb76765de287de6aa27ad742625a13ffb4a5184e79f1a46ae4b3e4bdceddf05"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllocationTimes(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrappedVotingNftMintStrategy",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:147"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "nftFactory",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(NFTFactory)11972",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationStartTime",
              "offset": 20,
              "slot": "4",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "currentWinner",
              "offset": 8,
              "slot": "5",
              "type": "t_address",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:137"
            },
            {
              "label": "allocations",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:138"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(NFTFactory)11972": {
              "label": "contract NFTFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:99",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(struct DonationVotingMerkleDistributionBaseStrategy.ApplicationStatus[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "updateDistribution(bytes32,(uint256,string))",
          "isDistributionSet()",
          "hasBeenDistributed(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionBaseStrategy",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:286"
          },
          {
            "kind": "state-variable-immutable",
            "name": "PERMIT2",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:230"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)2918_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)12548_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12548_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12548_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:DonationVotingMerkleDistributionDirectTransferStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76",
        "version": {
          "withMetadata": "079b13f8d4392cc2a59d9c7a3499f4da71e7392e8dc3fc2cf04a6aa069c0d558",
          "withoutMetadata": "f40aec7ea9081a4c8880c4262acba6c73d5a17ebf29c88f2c31b27910d6222bf",
          "linkedWithoutMetadata": "f40aec7ea9081a4c8880c4262acba6c73d5a17ebf29c88f2c31b27910d6222bf"
        },
        "inherit": [
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "solady/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [
          "(address,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionDirectTransferStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)2918_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)12548_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12548_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12548_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:DonationVotingMerkleDistributionVaultStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:92",
        "version": {
          "withMetadata": "0bda87e3c603a4205aca4e4e10064ea05b47f1de781201de28d4d190106470a0",
          "withoutMetadata": "507fe047ea5c70dd4a601752c61cda7cd579ceef22db953578b10c28cb0faf42",
          "linkedWithoutMetadata": "507fe047ea5c70dd4a601752c61cda7cd579ceef22db953578b10c28cb0faf42"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "solady/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [
          "(address,string,address)",
          "claim(struct DonationVotingMerkleDistributionVaultStrategy.Claim[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionVaultStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)2918_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)12548_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "16",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "16",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "18",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "67",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12548_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12548_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy": {
        "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:89",
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVBaseStrategy",
            "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:258"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14605_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14616_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14616_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14605_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14616_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14605_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-simple/QVSimpleStrategy.sol:QVSimpleStrategy": {
        "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:90",
        "version": {
          "withMetadata": "ba8be18fe36314150097c8ec58cb07dbc53f87fb002c79281ce336e2ffe44243",
          "withoutMetadata": "344e9982071e99896829ad8873c32fe3437606fcfc3852ea28fcf7a2fbb9b250",
          "linkedWithoutMetadata": "344e9982071e99896829ad8873c32fe3437606fcfc3852ea28fcf7a2fbb9b250"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "addAllocator(address)",
          "removeAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVSimpleStrategy",
            "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14605_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14616_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:108"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:111"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14616_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14605_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14616_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14605_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:RFPCommitteeStrategy": {
        "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:84",
        "version": {
          "withMetadata": "86c34380344d98bf336b29f74b19defc387633a45c1f36611893d5de2079fda8",
          "withoutMetadata": "3e2dd86dc25976e83931bbfa4335808b326f65a966d87ac44d9085a8c888c6a6",
          "linkedWithoutMetadata": "3e2dd86dc25976e83931bbfa4335808b326f65a966d87ac44d9085a8c888c6a6"
        },
        "inherit": [
          "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPCommitteeStrategy",
            "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:124"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:173"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:174"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)2625",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:184"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:189"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)16125_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)16116_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:192"
            },
            {
              "label": "voteThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:104"
            },
            {
              "label": "votedFor",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:109"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:112"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)16125_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16116_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)16125_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)16116_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy": {
        "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:105",
        "version": {
          "withMetadata": "1c0e1893fb6f9fa1405f144c7ecf8b5e44419a9f78b838f54a9ea71053be451a",
          "withoutMetadata": "798fff6a523ebbed5be0c2dbb4e6a71514598914431eaf06713c13bbf630c23a",
          "linkedWithoutMetadata": "798fff6a523ebbed5be0c2dbb4e6a71514598914431eaf06713c13bbf630c23a"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getPayouts(address[],bytes[])",
          "getMilestone(uint256)",
          "getMilestoneStatus(uint256)",
          "setPoolActive(bool)",
          "setMilestones(struct RFPSimpleStrategy.Milestone[])",
          "submitUpcomingMilestone((uint256,string))",
          "increaseMaxBid(uint256)",
          "rejectMilestone(uint256)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPSimpleStrategy",
            "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:200"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:173"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:174"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)2625",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:184"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:189"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)16125_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)16116_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:192"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)16125_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Recipient)16116_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)16125_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)16116_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/IEAS.sol:IEAS": {
        "src": "lib/eas-contracts/contracts/IEAS.sol:82",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSchemaRegistry()",
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))",
          "multiAttest(struct MultiAttestationRequest[])",
          "multiAttestByDelegation(struct MultiDelegatedAttestationRequest[])",
          "revoke((bytes32,(bytes32,uint256)))",
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))",
          "multiRevoke(struct MultiRevocationRequest[])",
          "multiRevokeByDelegation(struct MultiDelegatedRevocationRequest[])",
          "timestamp(bytes32)",
          "multiTimestamp(bytes32[])",
          "revokeOffchain(bytes32)",
          "multiRevokeOffchain(bytes32[])",
          "getAttestation(bytes32)",
          "isAttestationValid(bytes32)",
          "getTimestamp(bytes32)",
          "getRevokeOffchain(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol:ISchemaRegistry": {
        "src": "lib/eas-contracts/contracts/ISchemaRegistry.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "register(string,address,bool)",
          "getSchema(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver": {
        "src": "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:19",
        "version": {
          "withMetadata": "0dca2619ad8c06634dc9210e7ba586fa9937d58fd3b319d3ad369601ecedf935",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "c2c38fecaff644febbfdcf464169bd11a59f1da66f7256a4bcc1358917b282ad",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:50",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)18365_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)18365_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)18365_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "738f453433f9c4a8d1c7790c7129972cbf298a47ff4be030289610e9d53639ec",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "ec23438316974db7ba419f253003dcfd3421fb184947bc3f947e519b78aa3da2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:13",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "48f4b52e716cf3533ce5363c940e4bc62e8e84b37a5d699358c5f5fbf6e15d9a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fa70d3cc46392da5acb3a7910c6618143a047cfd065c996c80ef0b9b31a50923",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "86ce27c03b444726be2a174492f29ff73d5aea9b5f8bcb190567bb02c0f3f7c7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "119554fa17537b014c628e00919f69a89da04332670c5443b8d96485c5a9f837",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/IEIP712.sol:IEIP712": {
        "src": "lib/permit2/src/interfaces/IEIP712.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/ISignatureTransfer.sol:ISignatureTransfer": {
        "src": "lib/permit2/src/interfaces/ISignatureTransfer.sol:9",
        "inherit": [
          "lib/permit2/src/interfaces/IEIP712.sol:IEIP712"
        ],
        "libraries": [],
        "methods": [
          "nonceBitmap(address,uint256)",
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)",
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)",
          "permitTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes)",
          "permitWitnessTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes32,string,bytes)",
          "invalidateUnorderedNonces(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable": {
        "src": "lib/v2-core/src/interfaces/IAdminable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "transferAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Base.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "comptroller()",
          "protocolRevenues(address)",
          "claimProtocolRevenues(address)",
          "setComptroller(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:ISablierV2Comptroller": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "flashFee()",
          "isFlashAsset(address)",
          "protocolFees(address)",
          "setFlashFee(uint256)",
          "setProtocolFee(address,uint256)",
          "toggleFlashAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:13",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getAsset(uint256)",
          "getDepositedAmount(uint256)",
          "getEndTime(uint256)",
          "getRecipient(uint256)",
          "getRefundedAmount(uint256)",
          "getSender(uint256)",
          "getStartTime(uint256)",
          "getWithdrawnAmount(uint256)",
          "isCancelable(uint256)",
          "isCold(uint256)",
          "isDepleted(uint256)",
          "isStream(uint256)",
          "isWarm(uint256)",
          "nextStreamId()",
          "refundableAmountOf(uint256)",
          "statusOf(uint256)",
          "streamedAmountOf(uint256)",
          "wasCanceled(uint256)",
          "withdrawableAmountOf(uint256)",
          "burn(uint256)",
          "cancel(uint256)",
          "cancelMultiple(uint256[])",
          "renounce(uint256)",
          "setNFTDescriptor(address)",
          "withdraw(uint256,address,uint128)",
          "withdrawMax(uint256,address)",
          "withdrawMaxAndTransfer(uint256,address)",
          "withdrawMultiple(uint256[],address,uint128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:ISablierV2LockupDynamic": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_SEGMENT_COUNT()",
          "getRange(uint256)",
          "getSegments(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDeltas((address,bool,address,uint128,address,(address,uint256),struct LockupDynamic.SegmentWithDelta[]))",
          "createWithMilestones((address,uint40,bool,address,uint128,address,(address,uint256),struct LockupDynamic.Segment[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:ISablierV2LockupLinear": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getCliffTime(uint256)",
          "getRange(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))",
          "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:ISablierV2NFTDescriptor": {
        "src": "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:Lockup": {
        "src": "lib/v2-core/src/types/DataTypes.sol:29",
        "version": {
          "withMetadata": "9460b0d3552468eedcc71b31cf6a7e8754baa0d454c75e56ae2764e8b8ef6154",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupDynamic": {
        "src": "lib/v2-core/src/types/DataTypes.sol:72",
        "version": {
          "withMetadata": "5baf2b266a9a5b6d0f354b5595c20258af1284d1ee9255208ac7cd8a317ff1cd",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupLinear": {
        "src": "lib/v2-core/src/types/DataTypes.sol:180",
        "version": {
          "withMetadata": "ae21452df6ef1c1022efe022bd63c622396ed37d6b2c06f752e3bc9ab86ada33",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/auth/Ownable.sol:Ownable": {
        "src": "solady/src/auth/Ownable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "renounceOwnership()",
          "requestOwnershipHandover()",
          "cancelOwnershipHandover()",
          "completeOwnershipHandover(address)",
          "owner()",
          "ownershipHandoverExpiresAt(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC20.sol:ERC20": {
        "src": "solady/src/tokens/ERC20.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC721.sol:ERC721": {
        "src": "solady/src/tokens/ERC721.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "balanceOf(address)",
          "getApproved(uint256)",
          "approve(address,uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/CREATE3.sol:CREATE3": {
        "src": "solady/src/utils/CREATE3.sol:8",
        "version": {
          "withMetadata": "480004845c404feb2fbd15372fe17265c81702bc9f65a4d21f91bcb8fb3aed55",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/SafeTransferLib.sol:SafeTransferLib": {
        "src": "solady/src/utils/SafeTransferLib.sol:12",
        "version": {
          "withMetadata": "fcc6b6b9a73f23d74efbdccf5f83a9427531f05f1712d2864a12fb39bffa3c73",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "contracts/core/Allo.sol:Allo": {
        "src": "contracts/core/Allo.sol:89",
        "version": {
          "withMetadata": "449125ac6649827f25692212397e372ee7a0c737718eeef7f89f04bbfbd2149d",
          "withoutMetadata": "2f0bb5c05d4ff444357fef42d369f70e73f71d58052d6c259b2c1010039dd8a3",
          "linkedWithoutMetadata": "2f0bb5c05d4ff444357fef42d369f70e73f71d58052d6c259b2c1010039dd8a3"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "solady/src/auth/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IAllo.sol:IAllo"
        ],
        "libraries": [
          "contracts/core/libraries/Clone.sol:Clone"
        ],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "getFeeDenominator()",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "isCloneableStrategy(address)",
          "getPool(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)18365_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "percentFee",
              "offset": 0,
              "slot": "52",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:114"
            },
            {
              "label": "baseFee",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:129"
            },
            {
              "label": "_poolIndex",
              "offset": 0,
              "slot": "54",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "55",
              "type": "t_address_payable",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "56",
              "type": "t_contract(IRegistry)2625",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:133"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "57",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:134"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "58",
              "type": "t_mapping(t_uint256,t_struct(Pool)2144_storage)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:135"
            },
            {
              "label": "cloneableStrategies",
              "offset": 0,
              "slot": "59",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)2792": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)18365_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)2144_storage)": {
              "label": "mapping(uint256 => struct IAllo.Pool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Pool)2144_storage": {
              "label": "struct IAllo.Pool",
              "members": [
                {
                  "label": "profileId",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "strategy",
                  "type": "t_contract(IStrategy)2792",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "managerRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)18365_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Anchor.sol:Anchor": {
        "src": "contracts/core/Anchor.sol:89",
        "version": {
          "withMetadata": "fc3108e6f9b6186bc19ebcf7ddd713f6316fb163d0a789e8dc500f4b17659758",
          "withoutMetadata": "7c387b18ca48b348b1f66a70ba201e3a467bf09f94fc5b8e83ff8746c22ec24a",
          "linkedWithoutMetadata": "7c387b18ca48b348b1f66a70ba201e3a467bf09f94fc5b8e83ff8746c22ec24a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "execute(address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Anchor",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "profileId",
            "src": "contracts/core/Anchor.sol:89"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Registry.sol:Registry": {
        "src": "contracts/core/Registry.sol:103",
        "version": {
          "withMetadata": "55325d63295a0b161b2af5760365c41cab0b5a7657adba4815d9c9a91a268e3f",
          "withoutMetadata": "3743d44a66407f695706e5f7b98458f4ee9fa6098836717aff00d1586778462b",
          "linkedWithoutMetadata": "3743d44a66407f695706e5f7b98458f4ee9fa6098836717aff00d1586778462b"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "contracts/core/libraries/Native.sol:Native",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "contracts/core/interfaces/IRegistry.sol:IRegistry"
        ],
        "libraries": [
          "solady/src/utils/CREATE3.sol:CREATE3"
        ],
        "methods": [
          "initialize(address)",
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)18365_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "anchorToProfileId",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:109"
            },
            {
              "label": "profilesById",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_struct(Profile)2452_storage)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:111"
            },
            {
              "label": "profileIdToPendingOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:113"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Profile)2452_storage)": {
              "label": "mapping(bytes32 => struct IRegistry.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)18365_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Profile)2452_storage": {
              "label": "struct IRegistry.Profile",
              "members": [
                {
                  "label": "id",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "anchor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)18365_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IAllo.sol:IAllo": {
        "src": "contracts/core/interfaces/IAllo.sol:97",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "isCloneableStrategy(address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "getPool(uint256)",
          "getFeeDenominator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IRegistry.sol:IRegistry": {
        "src": "contracts/core/interfaces/IRegistry.sol:92",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/core/interfaces/IStrategy.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "isValidAllocator(address)",
          "isPoolActive()",
          "getPoolAmount()",
          "increasePoolAmount(uint256)",
          "getRecipientStatus(address)",
          "getPayouts(address[],bytes[])",
          "initialize(uint256,bytes)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Clone.sol:Clone": {
        "src": "contracts/core/libraries/Clone.sol:37",
        "version": {
          "withMetadata": "7831caf63eff8b0f3027092cf4d010b9264b9d2d95e69cba88b8e863611ab3bd",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Errors.sol:Errors": {
        "src": "contracts/core/libraries/Errors.sol:109",
        "version": {
          "withMetadata": "9de7a35b5cf865e74c57132116a55ec225db8f9e7b89dca75f769a4b94de2a67",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Native.sol:Native": {
        "src": "contracts/core/libraries/Native.sol:26",
        "version": {
          "withMetadata": "687ed9a5008115b623ce36cec4e9ebf6851d1bcfb510642329105f5482133230",
          "withoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466",
          "linkedWithoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Transfer.sol:Transfer": {
        "src": "contracts/core/libraries/Transfer.sol:95",
        "version": {
          "withMetadata": "1bbc83e509da0dc84a9d3e344b8d885494d26e226892336b8eb8e2d582830be6",
          "withoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466",
          "linkedWithoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466"
        },
        "inherit": [
          "contracts/core/libraries/Native.sol:Native"
        ],
        "libraries": [
          "solady/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/factory/ContractFactory.sol:ContractFactory": {
        "src": "contracts/factory/ContractFactory.sol:107",
        "version": {
          "withMetadata": "dbfa7f91e63ef97d140681f704fc48ae58c963ffdbb4c13f922bae9dd8854b28",
          "withoutMetadata": "0cd9f0333d78bdd2af9498d5d4adeec01b0e328ca33e6873216a037ccc439f13",
          "linkedWithoutMetadata": "0cd9f0333d78bdd2af9498d5d4adeec01b0e328ca33e6873216a037ccc439f13"
        },
        "inherit": [],
        "libraries": [
          "solady/src/utils/CREATE3.sol:CREATE3"
        ],
        "methods": [
          "()",
          "deploy(string,string,bytes)",
          "setDeployer(address,bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ContractFactory",
            "src": "contracts/factory/ContractFactory.sol:119"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "usedSalts",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            },
            {
              "label": "isDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/BaseStrategy.sol:BaseStrategy": {
        "src": "contracts/strategies/BaseStrategy.sol:111",
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "getPoolAmount()",
          "isPoolActive()",
          "getRecipientStatus(address)",
          "increasePoolAmount(uint256)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)",
          "getPayouts(address[],bytes[])",
          "isValidAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseStrategy",
            "src": "contracts/strategies/BaseStrategy.sol:129"
          },
          {
            "kind": "state-variable-immutable",
            "name": "allo",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          },
          {
            "kind": "state-variable-immutable",
            "name": "strategyId",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:DirectGrantsSimpleStrategy": {
        "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:110",
        "version": {
          "withMetadata": "230b08ae49fda31b25d1ee9b7a7596eeb8dcfb9bc877e6f2fefb2aedf1da1c24",
          "withoutMetadata": "33b0acc296454328d6f6001591129ade3cff6749c5cc63ef54de3ec43f329108",
          "linkedWithoutMetadata": "33b0acc296454328d6f6001591129ade3cff6749c5cc63ef54de3ec43f329108"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getMilestoneStatus(address,uint256)",
          "getMilestones(address)",
          "setMilestones(address,struct DirectGrantsSimpleStrategy.Milestone[])",
          "reviewSetMilestones(address,uint8)",
          "submitMilestone(address,uint256,(uint256,string))",
          "rejectMilestone(address,uint256)",
          "setRecipientStatusToInReview(address[])",
          "setPoolActive(bool)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DirectGrantsSimpleStrategy",
            "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:192"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:161"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:163"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:164"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(IRegistry)2625",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:167"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:168"
            },
            {
              "label": "_acceptedRecipientIds",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:172"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)3880_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:177"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Milestone)3889_storage)dyn_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:179"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:184"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)3889_storage)dyn_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(Milestone)3889_storage)dyn_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Milestone[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)3880_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)3889_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)3880_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "milestonesReviewStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:DonationVotingCustomRegistryStrategy": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52",
        "version": {
          "withMetadata": "6083ce2934ed7ae73b6cec1c22fe4ddfbc7d39682f289c8841f60d9deac0d8fc",
          "withoutMetadata": "e9aa1a7f70aa9e3a912fdd5a07f6baa303be8a81ecf91dd4d928edbb4feb7a73",
          "linkedWithoutMetadata": "e9aa1a7f70aa9e3a912fdd5a07f6baa303be8a81ecf91dd4d928edbb4feb7a73"
        },
        "inherit": [
          "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingCustomRegistryStrategy",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:162"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)5494_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:165"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:167"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:172"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(SimpleProjectRegistry)5465",
              "contract": "DonationVotingCustomRegistryStrategy",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:52"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(SimpleProjectRegistry)5465": {
              "label": "contract SimpleProjectRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5494_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)2643_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)5494_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:SimpleProjectRegistry": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:26",
        "version": {
          "withMetadata": "de2352c3221ccddab722c15a14190e735b4016a2832216fcf60da3e1875de6a0",
          "withoutMetadata": "c42152b6d8418493091034c29cc09b77be668156c32f57fa1f159cd5714b6a87",
          "linkedWithoutMetadata": "c42152b6d8418493091034c29cc09b77be668156c32f57fa1f159cd5714b6a87"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addProject(address)",
          "addProjects(address[])",
          "removeProject(address)",
          "removeProjects(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleProjectRegistry",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "projects",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleProjectRegistry",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy": {
        "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:100",
        "version": {
          "withMetadata": "1b5b6c1f6c3919b0c78d78a0d582f4fdcaed517e4859e900c4034ee39389fdc5",
          "withoutMetadata": "d6629663f0d8d6eef26b82a4fae61c35e68ce661e4ff9454bfe05bf53536f648",
          "linkedWithoutMetadata": "d6629663f0d8d6eef26b82a4fae61c35e68ce661e4ff9454bfe05bf53536f648"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "setPayout(address[],uint256[])",
          "claim(struct DonationVotingStrategy.Claim[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingStrategy",
            "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:198"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:159"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:162"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)5494_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:165"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:167"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:172"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5494_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)2643_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)5494_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:ProportionalPayoutStrategy": {
        "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:113",
        "version": {
          "withMetadata": "8f3324a506bdbad4e0565a8489e7204680153505ef1deab9e753702638b68bea",
          "withoutMetadata": "e13e75ca0a1cd1e21ea27c1fc34b7a64be3990d1b76eead1227e8c4527fca878",
          "linkedWithoutMetadata": "e13e75ca0a1cd1e21ea27c1fc34b7a64be3990d1b76eead1227e8c4527fca878"
        },
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "setAllocationTime(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProportionalPayoutStrategy",
            "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:163"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Recipient)6906_storage)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:151"
            },
            {
              "label": "hasAllocated",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:153"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ERC721)30852",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "maxRecipientsAllowed",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:155"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:157"
            },
            {
              "label": "totalAllocations",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:159"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:161"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)30852": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)6906_storage)": {
              "label": "mapping(address => struct ProportionalPayoutStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)6906_storage": {
              "label": "struct ProportionalPayoutStrategy.Recipient",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:QVGovernanceERC20Votes": {
        "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:89",
        "version": {
          "withMetadata": "1b06bc29cef2c06d1d0f250a08ffdb0dd760982f238ba380210652de896cb071",
          "withoutMetadata": "7e5fbcc2e95ff03b14af414cbad63924b6da212607218fac8c958ae1e504c966",
          "linkedWithoutMetadata": "7e5fbcc2e95ff03b14af414cbad63924b6da212607218fac8c958ae1e504c966"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVGovernanceERC20Votes",
            "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:102"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14605_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14616_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "govToken",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IVotes)18812",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:96"
            },
            {
              "label": "timestamp",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:98"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IVotes)18812": {
              "label": "contract IVotes",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14616_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14605_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14616_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14605_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:HackathonQVStrategy": {
        "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:110",
        "version": {
          "withMetadata": "06af5dc83d197f9ad1a40d743a75aef9bf658375caa31044a13dcfaa6557fe54",
          "withoutMetadata": "aaa222244f9e7afe5c52f9c671f0886dd44c9cf9bc8d02a1a4d6480cc82aeadb",
          "linkedWithoutMetadata": "aaa222244f9e7afe5c52f9c671f0886dd44c9cf9bc8d02a1a4d6480cc82aeadb"
        },
        "inherit": [
          "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver",
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllowedRecipientIds(address[],uint64,bytes)",
          "setPayoutPercentages(uint256[])",
          "getPayouts(address[],bytes[])",
          "getAttestation(bytes32)",
          "getSchema(bytes32)",
          "isPayable()",
          "isAttestationExpired(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HackathonQVStrategy",
            "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:148"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14605_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14616_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "_eas",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IEAS)17503",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            },
            {
              "label": "payoutPercentages",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:130"
            },
            {
              "label": "votesByRank",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:131"
            },
            {
              "label": "easInfo",
              "offset": 0,
              "slot": "14",
              "type": "t_struct(EASInfo)7805_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "19",
              "type": "t_contract(ERC721)30852",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:133"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:133"
            },
            {
              "label": "recipientIdToUID",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:135"
            },
            {
              "label": "recipientIdToIndex",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:136"
            },
            {
              "label": "indexToRecipientId",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:143"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ERC721)30852": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IEAS)17503": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(ISchemaRegistry)17548": {
              "label": "contract ISchemaRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14616_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14605_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14616_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(EASInfo)7805_storage": {
              "label": "struct HackathonQVStrategy.EASInfo",
              "members": [
                {
                  "label": "eas",
                  "type": "t_contract(IEAS)17503",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "schemaRegistry",
                  "type": "t_contract(ISchemaRegistry)17548",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "schemaUID",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "schema",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "revocable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14605_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver": {
        "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:19",
        "inherit": [
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver"
        ],
        "libraries": [],
        "methods": [
          "isPayable()",
          "()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_eas",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IEAS)17503",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            }
          ],
          "types": {
            "t_contract(IEAS)17503": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:QVNftTieredStrategy": {
        "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:94",
        "version": {
          "withMetadata": "c54631e50191b15a53843c939ab45ef4aa08004086f35ba49626c06be3598fba",
          "withoutMetadata": "4683fae814d6fb023b0047ddb6d2222ddfad30789503cf8e32901179f6da7c69",
          "linkedWithoutMetadata": "4683fae814d6fb023b0047ddb6d2222ddfad30789503cf8e32901179f6da7c69"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVNftTieredStrategy",
            "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14605_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14616_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "nfts",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_contract(ERC721)30852)dyn_storage",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:111"
            },
            {
              "label": "maxVoiceCreditsPerNft",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_contract(ERC721)30852,t_uint256)",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:113"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_contract(ERC721)30852,t_mapping(t_uint256,t_uint256))",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:115"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(ERC721)30852)dyn_storage": {
              "label": "contract ERC721[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)30852": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14616_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14605_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)30852,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(contract ERC721 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)30852,t_uint256)": {
              "label": "mapping(contract ERC721 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14616_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14605_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:LockupDynamicStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:16",
        "version": {
          "withMetadata": "c23256d02013210a054dd0e3622c30d3b4baaaa3a7541144b96ef78bf1636d74",
          "withoutMetadata": "760360c5ebebbe534e3ac2802d6b0ed1697372fd278e30a83bd5c0b0c6db06a2",
          "linkedWithoutMetadata": "760360c5ebebbe534e3ac2802d6b0ed1697372fd278e30a83bd5c0b0c6db06a2"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/v2-core/src/types/DataTypes.sol:LockupDynamic"
        ],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientSegments(address,struct LockupDynamic.SegmentWithDelta[])",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupDynamicStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:42"
            },
            {
              "label": "lockupDynamic",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupDynamic)29263",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)29383_storage",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)9571_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(SegmentWithDelta)29467_storage)dyn_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupDynamic)29263": {
              "label": "contract ISablierV2LockupDynamic",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)9571_storage)": {
              "label": "mapping(address => struct LockupDynamicStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)29383_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)28624",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)9571_storage": {
              "label": "struct LockupDynamicStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "segments",
                  "type": "t_array(t_struct(SegmentWithDelta)29467_storage)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(SegmentWithDelta)29467_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exponent",
                  "type": "t_userDefinedValueType(UD2x18)26820",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "delta",
                  "type": "t_uint40",
                  "offset": 24,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD2x18)26820": {
              "label": "UD2x18",
              "numberOfBytes": "8",
              "underlying": "t_uint64"
            },
            "t_userDefinedValueType(UD60x18)28624": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:LockupLinearStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:16",
        "version": {
          "withMetadata": "6e80dd309f945729cfe88bd3b3c2d641464aeb29b43e42899fa3db8882d7fdf8",
          "withoutMetadata": "1b657f61f96addb8f1821d7677d27f3ae568d46d62cddd9deb6085a94e46afc5",
          "linkedWithoutMetadata": "1b657f61f96addb8f1821d7677d27f3ae568d46d62cddd9deb6085a94e46afc5"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/v2-core/src/types/DataTypes.sol:LockupLinear"
        ],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientDurations(address,(uint40,uint40))",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupLinearStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:42"
            },
            {
              "label": "lockupLinear",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupLinear)29352",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)29383_storage",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)10753_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupLinear)29352": {
              "label": "contract ISablierV2LockupLinear",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)10753_storage)": {
              "label": "mapping(address => struct LockupLinearStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)29383_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)28624",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Durations)29535_storage": {
              "label": "struct LockupLinear.Durations",
              "members": [
                {
                  "label": "cliff",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "total",
                  "type": "t_uint40",
                  "offset": 5,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)10753_storage": {
              "label": "struct LockupLinearStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durations",
                  "type": "t_struct(Durations)29535_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD60x18)28624": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:NFT": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:8",
        "version": {
          "withMetadata": "4b46befd4e289b472157d252ce86df92916ee3562c21113a5844958c550aff79",
          "withoutMetadata": "8cb56b13b3a28a0670458267486272612909f877d123a98977ab9be7c8239ceb",
          "linkedWithoutMetadata": "8cb56b13b3a28a0670458267486272612909f877d123a98977ab9be7c8239ceb"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable",
          "solady/src/tokens/ERC721.sol:ERC721"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string,uint256,address)",
          "name()",
          "symbol()",
          "mintTo(address)",
          "tokenURI(uint256)",
          "withdrawPayments(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFT",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTokenId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:16"
            },
            {
              "label": "MINT_PRICE",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:17"
            },
            {
              "label": "__name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:20"
            },
            {
              "label": "__symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:NFTFactory": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:6",
        "version": {
          "withMetadata": "56c20e6db5b63a48bc62b09e4b6ef1c31598b2cbd60a7926ea0741ab177224a2",
          "withoutMetadata": "a6f03f705275e40065295b144421725a20e3501669bada75a114fff63b434659",
          "linkedWithoutMetadata": "a6f03f705275e40065295b144421725a20e3501669bada75a114fff63b434659"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createNFTContract(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isNFTContract",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NFTFactory",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:WrappedVotingNftMintStrategy": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:101",
        "version": {
          "withMetadata": "075f751127755e6ad03c24b6cc469140ac4fd262fbf6bcfbcad918521fb38d47",
          "withoutMetadata": "7eb76765de287de6aa27ad742625a13ffb4a5184e79f1a46ae4b3e4bdceddf05",
          "linkedWithoutMetadata": "7eb76765de287de6aa27ad742625a13ffb4a5184e79f1a46ae4b3e4bdceddf05"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllocationTimes(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrappedVotingNftMintStrategy",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:147"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "nftFactory",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(NFTFactory)11972",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationStartTime",
              "offset": 20,
              "slot": "4",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "currentWinner",
              "offset": 8,
              "slot": "5",
              "type": "t_address",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:137"
            },
            {
              "label": "allocations",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:138"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(NFTFactory)11972": {
              "label": "contract NFTFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:99",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(struct DonationVotingMerkleDistributionBaseStrategy.ApplicationStatus[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "updateDistribution(bytes32,(uint256,string))",
          "isDistributionSet()",
          "hasBeenDistributed(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionBaseStrategy",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:286"
          },
          {
            "kind": "state-variable-immutable",
            "name": "PERMIT2",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:230"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)2918_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)12548_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12548_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12548_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:DonationVotingMerkleDistributionDirectTransferStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76",
        "version": {
          "withMetadata": "f2b9f9827fb8164532a9910772dc0527f5c940036f84a87a78ae9f38d70aeca1",
          "withoutMetadata": "f40aec7ea9081a4c8880c4262acba6c73d5a17ebf29c88f2c31b27910d6222bf",
          "linkedWithoutMetadata": "f40aec7ea9081a4c8880c4262acba6c73d5a17ebf29c88f2c31b27910d6222bf"
        },
        "inherit": [
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "solady/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [
          "(address,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionDirectTransferStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)2918_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)12548_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12548_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12548_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:DonationVotingMerkleDistributionVaultStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:92",
        "version": {
          "withMetadata": "170ad2a458267ae2ec5724b7e48bdb731f0df2572826d0128ae9481af041ad95",
          "withoutMetadata": "507fe047ea5c70dd4a601752c61cda7cd579ceef22db953578b10c28cb0faf42",
          "linkedWithoutMetadata": "507fe047ea5c70dd4a601752c61cda7cd579ceef22db953578b10c28cb0faf42"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "solady/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [
          "(address,string,address)",
          "claim(struct DonationVotingMerkleDistributionVaultStrategy.Claim[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionVaultStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)2918_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:263"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)12548_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "16",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "16",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "18",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "67",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12548_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12548_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy": {
        "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:89",
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVBaseStrategy",
            "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:258"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14605_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14616_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14616_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14605_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14616_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14605_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-simple/QVSimpleStrategy.sol:QVSimpleStrategy": {
        "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:90",
        "version": {
          "withMetadata": "cf752837ff9aabba4bc106be705e4737f4a502a641bd5e8715db543d9f848723",
          "withoutMetadata": "344e9982071e99896829ad8873c32fe3437606fcfc3852ea28fcf7a2fbb9b250",
          "linkedWithoutMetadata": "344e9982071e99896829ad8873c32fe3437606fcfc3852ea28fcf7a2fbb9b250"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "addAllocator(address)",
          "removeAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVSimpleStrategy",
            "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14605_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14616_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:108"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:111"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14616_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14605_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14616_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14605_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:RFPCommitteeStrategy": {
        "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:84",
        "version": {
          "withMetadata": "9ace8fb7eb514da5ff1eee5d356a15aa9fe4685c84979f4590ad7c44f6c8b816",
          "withoutMetadata": "3e2dd86dc25976e83931bbfa4335808b326f65a966d87ac44d9085a8c888c6a6",
          "linkedWithoutMetadata": "3e2dd86dc25976e83931bbfa4335808b326f65a966d87ac44d9085a8c888c6a6"
        },
        "inherit": [
          "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPCommitteeStrategy",
            "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:124"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:173"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:174"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)2625",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:184"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:189"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)16125_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)16116_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:192"
            },
            {
              "label": "voteThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:104"
            },
            {
              "label": "votedFor",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:109"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:112"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)16125_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16116_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)16125_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)16116_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy": {
        "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:105",
        "version": {
          "withMetadata": "3e99e9d6db915870dd7c63595342937b1b97873d33b53c63c92fc5527a4d3a3c",
          "withoutMetadata": "798fff6a523ebbed5be0c2dbb4e6a71514598914431eaf06713c13bbf630c23a",
          "linkedWithoutMetadata": "798fff6a523ebbed5be0c2dbb4e6a71514598914431eaf06713c13bbf630c23a"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getPayouts(address[],bytes[])",
          "getMilestone(uint256)",
          "getMilestoneStatus(uint256)",
          "setPoolActive(bool)",
          "setMilestones(struct RFPSimpleStrategy.Milestone[])",
          "submitUpcomingMilestone((uint256,string))",
          "increaseMaxBid(uint256)",
          "rejectMilestone(uint256)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPSimpleStrategy",
            "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:200"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:173"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:174"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)2625",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:184"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:189"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)16125_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)16116_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:192"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)16125_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Recipient)16116_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2918_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)16125_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2918_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)16116_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/IEAS.sol:IEAS": {
        "src": "lib/eas-contracts/contracts/IEAS.sol:82",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSchemaRegistry()",
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))",
          "multiAttest(struct MultiAttestationRequest[])",
          "multiAttestByDelegation(struct MultiDelegatedAttestationRequest[])",
          "revoke((bytes32,(bytes32,uint256)))",
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))",
          "multiRevoke(struct MultiRevocationRequest[])",
          "multiRevokeByDelegation(struct MultiDelegatedRevocationRequest[])",
          "timestamp(bytes32)",
          "multiTimestamp(bytes32[])",
          "revokeOffchain(bytes32)",
          "multiRevokeOffchain(bytes32[])",
          "getAttestation(bytes32)",
          "isAttestationValid(bytes32)",
          "getTimestamp(bytes32)",
          "getRevokeOffchain(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol:ISchemaRegistry": {
        "src": "lib/eas-contracts/contracts/ISchemaRegistry.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "register(string,address,bool)",
          "getSchema(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver": {
        "src": "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:19",
        "version": {
          "withMetadata": "e900a3e33b0efa97917e29b660279ac58f4406699801fb23295a35ab46f7def8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "39aee5a279dd8a790ade869a7453b1555d416d6fff465958099fe324589cdf80",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:50",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)18365_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)18365_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)18365_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "4a24163d165dfdf7ce9fcf97e77d1f64e0d33a0ea455d93bdbb3c549a4315c79",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "f91f77f07f5fa8cfc77724c8f7890ebf5c546746c8ebfc85528d35093821952a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:13",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "60c071c67ea91e588cf4e69ab6a165469d918c278f6b3b139ca16e1be01a6549",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "aca19cc40c3b7ce67ef238445f38b96101e107eff514092f20925b73e6e80d23",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9d8470a0c03dad4ba722bca3a44257ef733093aef63ed753ff58727ad1408237",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "818ddce411582e77a0400fa592f7d34bf096dbd792e959016bb14c741585e54e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/IEIP712.sol:IEIP712": {
        "src": "lib/permit2/src/interfaces/IEIP712.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/ISignatureTransfer.sol:ISignatureTransfer": {
        "src": "lib/permit2/src/interfaces/ISignatureTransfer.sol:9",
        "inherit": [
          "lib/permit2/src/interfaces/IEIP712.sol:IEIP712"
        ],
        "libraries": [],
        "methods": [
          "nonceBitmap(address,uint256)",
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)",
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)",
          "permitTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes)",
          "permitWitnessTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes32,string,bytes)",
          "invalidateUnorderedNonces(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable": {
        "src": "lib/v2-core/src/interfaces/IAdminable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "transferAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Base.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "comptroller()",
          "protocolRevenues(address)",
          "claimProtocolRevenues(address)",
          "setComptroller(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:ISablierV2Comptroller": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "flashFee()",
          "isFlashAsset(address)",
          "protocolFees(address)",
          "setFlashFee(uint256)",
          "setProtocolFee(address,uint256)",
          "toggleFlashAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:13",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getAsset(uint256)",
          "getDepositedAmount(uint256)",
          "getEndTime(uint256)",
          "getRecipient(uint256)",
          "getRefundedAmount(uint256)",
          "getSender(uint256)",
          "getStartTime(uint256)",
          "getWithdrawnAmount(uint256)",
          "isCancelable(uint256)",
          "isCold(uint256)",
          "isDepleted(uint256)",
          "isStream(uint256)",
          "isWarm(uint256)",
          "nextStreamId()",
          "refundableAmountOf(uint256)",
          "statusOf(uint256)",
          "streamedAmountOf(uint256)",
          "wasCanceled(uint256)",
          "withdrawableAmountOf(uint256)",
          "burn(uint256)",
          "cancel(uint256)",
          "cancelMultiple(uint256[])",
          "renounce(uint256)",
          "setNFTDescriptor(address)",
          "withdraw(uint256,address,uint128)",
          "withdrawMax(uint256,address)",
          "withdrawMaxAndTransfer(uint256,address)",
          "withdrawMultiple(uint256[],address,uint128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:ISablierV2LockupDynamic": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_SEGMENT_COUNT()",
          "getRange(uint256)",
          "getSegments(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDeltas((address,bool,address,uint128,address,(address,uint256),struct LockupDynamic.SegmentWithDelta[]))",
          "createWithMilestones((address,uint40,bool,address,uint128,address,(address,uint256),struct LockupDynamic.Segment[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:ISablierV2LockupLinear": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getCliffTime(uint256)",
          "getRange(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))",
          "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:ISablierV2NFTDescriptor": {
        "src": "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:Lockup": {
        "src": "lib/v2-core/src/types/DataTypes.sol:29",
        "version": {
          "withMetadata": "91f1a51e963c72b646502910e925186ac105e516222f2f4b7d8bb4834026bf93",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupDynamic": {
        "src": "lib/v2-core/src/types/DataTypes.sol:72",
        "version": {
          "withMetadata": "b8ad36b280f31fd6f963303354246b639a9634966d4b5c26e63928e397311b6a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupLinear": {
        "src": "lib/v2-core/src/types/DataTypes.sol:180",
        "version": {
          "withMetadata": "1c23000c62daf5257c959e12633db7457da2b8cdb4352ac88d89d53949654dd8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/auth/Ownable.sol:Ownable": {
        "src": "solady/src/auth/Ownable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "renounceOwnership()",
          "requestOwnershipHandover()",
          "cancelOwnershipHandover()",
          "completeOwnershipHandover(address)",
          "owner()",
          "ownershipHandoverExpiresAt(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC20.sol:ERC20": {
        "src": "solady/src/tokens/ERC20.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC721.sol:ERC721": {
        "src": "solady/src/tokens/ERC721.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "balanceOf(address)",
          "getApproved(uint256)",
          "approve(address,uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/CREATE3.sol:CREATE3": {
        "src": "solady/src/utils/CREATE3.sol:8",
        "version": {
          "withMetadata": "57097bdc81bc0f8721c267f334227c81386ba8ded503c94946e8ab672bdb4ae5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/SafeTransferLib.sol:SafeTransferLib": {
        "src": "solady/src/utils/SafeTransferLib.sol:12",
        "version": {
          "withMetadata": "fd06aa5ac072ece4afaa09f08527336424b3511ba87c39341250d8027e6312f8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "contracts/core/Allo.sol:Allo": {
        "src": "contracts/core/Allo.sol:89",
        "version": {
          "withMetadata": "3f8313742d3251ea639921ca94389b3234cb11b8967cd6fd5b2781da5ae10c65",
          "withoutMetadata": "2f0bb5c05d4ff444357fef42d369f70e73f71d58052d6c259b2c1010039dd8a3",
          "linkedWithoutMetadata": "2f0bb5c05d4ff444357fef42d369f70e73f71d58052d6c259b2c1010039dd8a3"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "solady/src/auth/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IAllo.sol:IAllo"
        ],
        "libraries": [
          "contracts/core/libraries/Clone.sol:Clone"
        ],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "getFeeDenominator()",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "isCloneableStrategy(address)",
          "getPool(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)18293_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "percentFee",
              "offset": 0,
              "slot": "52",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:114"
            },
            {
              "label": "baseFee",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:129"
            },
            {
              "label": "_poolIndex",
              "offset": 0,
              "slot": "54",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "55",
              "type": "t_address_payable",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "56",
              "type": "t_contract(IRegistry)2625",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:133"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "57",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:134"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "58",
              "type": "t_mapping(t_uint256,t_struct(Pool)2144_storage)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:135"
            },
            {
              "label": "cloneableStrategies",
              "offset": 0,
              "slot": "59",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)2796": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)18293_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)2144_storage)": {
              "label": "mapping(uint256 => struct IAllo.Pool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Pool)2144_storage": {
              "label": "struct IAllo.Pool",
              "members": [
                {
                  "label": "profileId",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "strategy",
                  "type": "t_contract(IStrategy)2796",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "managerRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)18293_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Anchor.sol:Anchor": {
        "src": "contracts/core/Anchor.sol:89",
        "version": {
          "withMetadata": "cd7dea3037c2865f71d945dc3e92d4691086f21f7ad020bce8a3d541f3f73b70",
          "withoutMetadata": "7c387b18ca48b348b1f66a70ba201e3a467bf09f94fc5b8e83ff8746c22ec24a",
          "linkedWithoutMetadata": "7c387b18ca48b348b1f66a70ba201e3a467bf09f94fc5b8e83ff8746c22ec24a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "execute(address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Anchor",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "profileId",
            "src": "contracts/core/Anchor.sol:89"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Registry.sol:Registry": {
        "src": "contracts/core/Registry.sol:103",
        "version": {
          "withMetadata": "11295211810fb7360387637651496e95875cd13fb456a0493a5167d8d36cf7e0",
          "withoutMetadata": "efecdd1d69f5292164a77d13e2baa9b3cd31ff91d7aac3f47c52c72a50e040b9",
          "linkedWithoutMetadata": "efecdd1d69f5292164a77d13e2baa9b3cd31ff91d7aac3f47c52c72a50e040b9"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "contracts/core/libraries/Native.sol:Native",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "contracts/core/interfaces/IRegistry.sol:IRegistry"
        ],
        "libraries": [
          "solady/src/utils/CREATE3.sol:CREATE3"
        ],
        "methods": [
          "initialize(address)",
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)18293_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "anchorToProfileId",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:109"
            },
            {
              "label": "profilesById",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_struct(Profile)2452_storage)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:111"
            },
            {
              "label": "profileIdToPendingOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:113"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Profile)2452_storage)": {
              "label": "mapping(bytes32 => struct IRegistry.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)18293_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Profile)2452_storage": {
              "label": "struct IRegistry.Profile",
              "members": [
                {
                  "label": "id",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "anchor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)18293_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IAllo.sol:IAllo": {
        "src": "contracts/core/interfaces/IAllo.sol:97",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "isCloneableStrategy(address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "getPool(uint256)",
          "getFeeDenominator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IRegistry.sol:IRegistry": {
        "src": "contracts/core/interfaces/IRegistry.sol:92",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/core/interfaces/IStrategy.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "isValidAllocator(address)",
          "isPoolActive()",
          "getPoolAmount()",
          "increasePoolAmount(uint256)",
          "getRecipientStatus(address)",
          "getPayouts(address[],bytes[])",
          "initialize(uint256,bytes)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Clone.sol:Clone": {
        "src": "contracts/core/libraries/Clone.sol:37",
        "version": {
          "withMetadata": "ee3f13d473d1e23f7fe931c5236bb24a82845a5d06f899fe7f7e796b1c47c09f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Errors.sol:Errors": {
        "src": "contracts/core/libraries/Errors.sol:109",
        "version": {
          "withMetadata": "be95ce2ce024cac31f16bf0656c749462ff47df75a96617bc07f8ec358fbaf88",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Native.sol:Native": {
        "src": "contracts/core/libraries/Native.sol:26",
        "version": {
          "withMetadata": "f02011051972a7d76d704cee8c1577fb8bd88b15197106f621cf7e0a21a2bc04",
          "withoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466",
          "linkedWithoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Transfer.sol:Transfer": {
        "src": "contracts/core/libraries/Transfer.sol:95",
        "version": {
          "withMetadata": "5d6a506805fc1a90ae01d0c92de208961118735ee2fe7fd75690efab297ca791",
          "withoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466",
          "linkedWithoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466"
        },
        "inherit": [
          "contracts/core/libraries/Native.sol:Native"
        ],
        "libraries": [
          "solady/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/factory/ContractFactory.sol:ContractFactory": {
        "src": "contracts/factory/ContractFactory.sol:107",
        "version": {
          "withMetadata": "877ade6ed55f8a587bbb9db7a50fcec9279cc98b39b7f646f7fc5f27e6ee155c",
          "withoutMetadata": "0cd9f0333d78bdd2af9498d5d4adeec01b0e328ca33e6873216a037ccc439f13",
          "linkedWithoutMetadata": "0cd9f0333d78bdd2af9498d5d4adeec01b0e328ca33e6873216a037ccc439f13"
        },
        "inherit": [],
        "libraries": [
          "solady/src/utils/CREATE3.sol:CREATE3"
        ],
        "methods": [
          "()",
          "deploy(string,string,bytes)",
          "setDeployer(address,bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ContractFactory",
            "src": "contracts/factory/ContractFactory.sol:119"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "usedSalts",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            },
            {
              "label": "isDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/BaseStrategy.sol:BaseStrategy": {
        "src": "contracts/strategies/BaseStrategy.sol:111",
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "getPoolAmount()",
          "isPoolActive()",
          "getRecipientStatus(address)",
          "increasePoolAmount(uint256)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)",
          "getPayouts(address[],bytes[])",
          "isValidAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseStrategy",
            "src": "contracts/strategies/BaseStrategy.sol:129"
          },
          {
            "kind": "state-variable-immutable",
            "name": "allo",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          },
          {
            "kind": "state-variable-immutable",
            "name": "strategyId",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:DirectGrantsSimpleStrategy": {
        "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:112",
        "version": {
          "withMetadata": "f383cf14ed950b3c50f1896a3ee2d4b94689bb98283b23278f2b27873cf4be34",
          "withoutMetadata": "ab5389251e0ffdcfb84d04d58efda1952af7bb08678d257f83fc95b2c255337d",
          "linkedWithoutMetadata": "ab5389251e0ffdcfb84d04d58efda1952af7bb08678d257f83fc95b2c255337d"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getMilestoneStatus(address,uint256)",
          "getMilestones(address)",
          "setMilestones(address,struct DirectGrantsSimpleStrategy.Milestone[])",
          "reviewSetMilestones(address,uint8)",
          "submitMilestone(address,uint256,(uint256,string))",
          "rejectMilestone(address,uint256)",
          "setRecipientStatusToInReview(address[])",
          "setPoolActive(bool)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DirectGrantsSimpleStrategy",
            "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:191"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:161"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:162"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:164"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(IRegistry)2625",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:166"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:167"
            },
            {
              "label": "_acceptedRecipientIds",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:172"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)3884_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:177"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Milestone)3893_storage)dyn_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:179"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:184"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)3893_storage)dyn_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(Milestone)3893_storage)dyn_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Milestone[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)3884_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)3893_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)3884_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "milestonesReviewStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:DonationVotingCustomRegistryStrategy": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51",
        "version": {
          "withMetadata": "040764b578ae5283e5f9d2ff27b943db26bcbf2d02dfa95ebd3c288916ba8407",
          "withoutMetadata": "5ec248496bb5814db29db320567ee228cf276e7cfd7096f1fc375c38e58dfc37",
          "linkedWithoutMetadata": "5ec248496bb5814db29db320567ee228cf276e7cfd7096f1fc375c38e58dfc37"
        },
        "inherit": [
          "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingCustomRegistryStrategy",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)5485_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(SimpleProjectRegistry)5456",
              "contract": "DonationVotingCustomRegistryStrategy",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(SimpleProjectRegistry)5456": {
              "label": "contract SimpleProjectRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5485_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)2643_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)5485_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:SimpleProjectRegistry": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:26",
        "version": {
          "withMetadata": "f2de533fe3c7ba12b1a0edce2fe18ecf7ae8fda7bdefa768f549e92960189291",
          "withoutMetadata": "c42152b6d8418493091034c29cc09b77be668156c32f57fa1f159cd5714b6a87",
          "linkedWithoutMetadata": "c42152b6d8418493091034c29cc09b77be668156c32f57fa1f159cd5714b6a87"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addProject(address)",
          "addProjects(address[])",
          "removeProject(address)",
          "removeProjects(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleProjectRegistry",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "projects",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleProjectRegistry",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy": {
        "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:100",
        "version": {
          "withMetadata": "6d439ce41d24ca5e0b33edbcd72a6b0adb615f103775c1ee087d948505d27a0c",
          "withoutMetadata": "3ec7486dc8e287f7e75c5151a3f2fe08b9f0a051775db358d3d8f08da384837c",
          "linkedWithoutMetadata": "3ec7486dc8e287f7e75c5151a3f2fe08b9f0a051775db358d3d8f08da384837c"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "setPayout(address[],uint256[])",
          "claim(struct DonationVotingStrategy.Claim[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingStrategy",
            "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:198"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)5485_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5485_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)2643_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)5485_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:ProportionalPayoutStrategy": {
        "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:112",
        "version": {
          "withMetadata": "a892980b6dad7d7fa5d6fb85bc6689074f279b888e4282655d484d6f7dfa660c",
          "withoutMetadata": "08ce3ade956cda6594eb2b2b26b6394314715341bbd16f0b7b5d7b5abc73a288",
          "linkedWithoutMetadata": "08ce3ade956cda6594eb2b2b26b6394314715341bbd16f0b7b5d7b5abc73a288"
        },
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "setAllocationTime(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProportionalPayoutStrategy",
            "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:166"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Recipient)6892_storage)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:151"
            },
            {
              "label": "hasAllocated",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:152"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:153"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ERC721)30780",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "maxRecipientsAllowed",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:157"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:158"
            },
            {
              "label": "totalAllocations",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:159"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)30780": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)6892_storage)": {
              "label": "mapping(address => struct ProportionalPayoutStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)6892_storage": {
              "label": "struct ProportionalPayoutStrategy.Recipient",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:QVGovernanceERC20Votes": {
        "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:89",
        "version": {
          "withMetadata": "9bc87566e2020bada656dea4ad850725b4da6fc586bb06c45fd815e09cae9da9",
          "withoutMetadata": "73bd804905b977d1c9d5aac698b0555f496b116b71a2e58743c769494d5f055f",
          "linkedWithoutMetadata": "73bd804905b977d1c9d5aac698b0555f496b116b71a2e58743c769494d5f055f"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVGovernanceERC20Votes",
            "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:104"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14551_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14562_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "govToken",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IVotes)18740",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:97"
            },
            {
              "label": "timestamp",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:98"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IVotes)18740": {
              "label": "contract IVotes",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14562_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14551_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14562_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14551_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:HackathonQVStrategy": {
        "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:111",
        "version": {
          "withMetadata": "c5235cba510be1faa78b6726fe2d03b896dd2847a34dd6a235d9b1b2c3b19a16",
          "withoutMetadata": "94f052f1dfc0f99a9d01b9e0a892be70484d9f24eff587013e7ef7eb789b219c",
          "linkedWithoutMetadata": "94f052f1dfc0f99a9d01b9e0a892be70484d9f24eff587013e7ef7eb789b219c"
        },
        "inherit": [
          "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver",
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllowedRecipientIds(address[],uint64,bytes)",
          "setPayoutPercentages(uint256[])",
          "getPayouts(address[],bytes[])",
          "getAttestation(bytes32)",
          "getSchema(bytes32)",
          "isPayable()",
          "isAttestationExpired(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HackathonQVStrategy",
            "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:148"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14551_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14562_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "_eas",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IEAS)17431",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            },
            {
              "label": "payoutPercentages",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:130"
            },
            {
              "label": "votesByRank",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:131"
            },
            {
              "label": "easInfo",
              "offset": 0,
              "slot": "14",
              "type": "t_struct(EASInfo)7781_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "19",
              "type": "t_contract(ERC721)30780",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "recipientIdToUID",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:135"
            },
            {
              "label": "recipientIdToIndex",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:137"
            },
            {
              "label": "indexToRecipientId",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:143"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ERC721)30780": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IEAS)17431": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(ISchemaRegistry)17476": {
              "label": "contract ISchemaRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14562_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14551_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14562_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(EASInfo)7781_storage": {
              "label": "struct HackathonQVStrategy.EASInfo",
              "members": [
                {
                  "label": "eas",
                  "type": "t_contract(IEAS)17431",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "schemaRegistry",
                  "type": "t_contract(ISchemaRegistry)17476",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "schemaUID",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "schema",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "revocable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14551_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver": {
        "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:19",
        "inherit": [
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver"
        ],
        "libraries": [],
        "methods": [
          "isPayable()",
          "()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_eas",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IEAS)17431",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            }
          ],
          "types": {
            "t_contract(IEAS)17431": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:QVNftTieredStrategy": {
        "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:96",
        "version": {
          "withMetadata": "ba61e2b66ab7369346f4fee1776521b7d9c42e6bfbeeaae06df77ca7480e712f",
          "withoutMetadata": "ab12cd3005380373488b60b88d02134d6dac3b1e9daae2d28f6fce853f3de06e",
          "linkedWithoutMetadata": "ab12cd3005380373488b60b88d02134d6dac3b1e9daae2d28f6fce853f3de06e"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVNftTieredStrategy",
            "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14551_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14562_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "nfts",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_contract(ERC721)30780)dyn_storage",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:112"
            },
            {
              "label": "maxVoiceCreditsPerNft",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_contract(ERC721)30780,t_uint256)",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:113"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_contract(ERC721)30780,t_mapping(t_uint256,t_uint256))",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(ERC721)30780)dyn_storage": {
              "label": "contract ERC721[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)30780": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14562_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14551_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)30780,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(contract ERC721 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)30780,t_uint256)": {
              "label": "mapping(contract ERC721 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14562_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14551_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:LockupDynamicStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:16",
        "version": {
          "withMetadata": "0772381f18c0d233167dead4488ff011ea5221ff93cf42111216579d0b3e241f",
          "withoutMetadata": "fbc664e7aeda4b7f7f9ad47e11864e96d5927450624824946b5bcd74de46b5fb",
          "linkedWithoutMetadata": "fbc664e7aeda4b7f7f9ad47e11864e96d5927450624824946b5bcd74de46b5fb"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/v2-core/src/types/DataTypes.sol:LockupDynamic"
        ],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientSegments(address,struct LockupDynamic.SegmentWithDelta[])",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupDynamicStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:42"
            },
            {
              "label": "lockupDynamic",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupDynamic)29191",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)29311_storage",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)9537_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(SegmentWithDelta)29395_storage)dyn_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupDynamic)29191": {
              "label": "contract ISablierV2LockupDynamic",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)9537_storage)": {
              "label": "mapping(address => struct LockupDynamicStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)29311_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)28552",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)9537_storage": {
              "label": "struct LockupDynamicStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "segments",
                  "type": "t_array(t_struct(SegmentWithDelta)29395_storage)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(SegmentWithDelta)29395_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exponent",
                  "type": "t_userDefinedValueType(UD2x18)26748",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "delta",
                  "type": "t_uint40",
                  "offset": 24,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD2x18)26748": {
              "label": "UD2x18",
              "numberOfBytes": "8",
              "underlying": "t_uint64"
            },
            "t_userDefinedValueType(UD60x18)28552": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:LockupLinearStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:16",
        "version": {
          "withMetadata": "c112d5bb4fbf8d1a0b3f2ecd8b66dc0e26357da73c35eaba93fb243dcaa201f1",
          "withoutMetadata": "2766e84e67eabad97990605ace7c3e82d513ad0cd625ad3809dbe6e8c5dfb7e9",
          "linkedWithoutMetadata": "2766e84e67eabad97990605ace7c3e82d513ad0cd625ad3809dbe6e8c5dfb7e9"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/v2-core/src/types/DataTypes.sol:LockupLinear"
        ],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientDurations(address,(uint40,uint40))",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupLinearStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:42"
            },
            {
              "label": "lockupLinear",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupLinear)29280",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)29311_storage",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)10714_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupLinear)29280": {
              "label": "contract ISablierV2LockupLinear",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)10714_storage)": {
              "label": "mapping(address => struct LockupLinearStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)29311_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)28552",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Durations)29463_storage": {
              "label": "struct LockupLinear.Durations",
              "members": [
                {
                  "label": "cliff",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "total",
                  "type": "t_uint40",
                  "offset": 5,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)10714_storage": {
              "label": "struct LockupLinearStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durations",
                  "type": "t_struct(Durations)29463_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD60x18)28552": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:NFT": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:8",
        "version": {
          "withMetadata": "7a69c50eb984f771cb51f0fc9384be835af831b56dd7f0bc59daf0c059e4f72c",
          "withoutMetadata": "8cb56b13b3a28a0670458267486272612909f877d123a98977ab9be7c8239ceb",
          "linkedWithoutMetadata": "8cb56b13b3a28a0670458267486272612909f877d123a98977ab9be7c8239ceb"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable",
          "solady/src/tokens/ERC721.sol:ERC721"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string,uint256,address)",
          "name()",
          "symbol()",
          "mintTo(address)",
          "tokenURI(uint256)",
          "withdrawPayments(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFT",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTokenId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:16"
            },
            {
              "label": "MINT_PRICE",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:17"
            },
            {
              "label": "__name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:20"
            },
            {
              "label": "__symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:NFTFactory": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:6",
        "version": {
          "withMetadata": "58ef7f569fba03acc98f4881b6949eb1d61c543dd9380a06acd4a31772621fc8",
          "withoutMetadata": "1c51a6278b57c245243644ce66c7a102068c73e7fb017aedeec00740892b5b7b",
          "linkedWithoutMetadata": "1c51a6278b57c245243644ce66c7a102068c73e7fb017aedeec00740892b5b7b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createNFTContract(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isNFTContract",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NFTFactory",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:WrappedVotingNftMintStrategy": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:100",
        "version": {
          "withMetadata": "007dcb20d843f33a68e6698794edbb4c05639d74f1cdc9705ea5461736cce0e3",
          "withoutMetadata": "71092f04c37721f7488962e8bbf3fd88b88ddb2066ab43e84ac28430b425f1ef",
          "linkedWithoutMetadata": "71092f04c37721f7488962e8bbf3fd88b88ddb2066ab43e84ac28430b425f1ef"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllocationTimes(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrappedVotingNftMintStrategy",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:147"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "nftFactory",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(NFTFactory)11928",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:134"
            },
            {
              "label": "allocationStartTime",
              "offset": 20,
              "slot": "4",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "currentWinner",
              "offset": 8,
              "slot": "5",
              "type": "t_address",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "allocations",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(NFTFactory)11928": {
              "label": "contract NFTFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:99",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(struct DonationVotingMerkleDistributionBaseStrategy.ApplicationStatus[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "updateDistribution(bytes32,(uint256,string))",
          "isDistributionSet()",
          "hasBeenDistributed(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionBaseStrategy",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:286"
          },
          {
            "kind": "state-variable-immutable",
            "name": "PERMIT2",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:230"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)2922_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)12499_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12499_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12499_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:DonationVotingMerkleDistributionDirectTransferStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76",
        "version": {
          "withMetadata": "ad9d1a099e32a6d05cf5036a7e284aceb02ecd9bcdc4bbdfbef20d7775f24d26",
          "withoutMetadata": "7557c6a8ae5e73ceafdaf5dd395fbbce55639e999f7fb40636a1cc2a55c6b2e4",
          "linkedWithoutMetadata": "7557c6a8ae5e73ceafdaf5dd395fbbce55639e999f7fb40636a1cc2a55c6b2e4"
        },
        "inherit": [
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "solady/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [
          "(address,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionDirectTransferStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)2922_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)12499_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12499_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12499_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:DonationVotingMerkleDistributionVaultStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:92",
        "version": {
          "withMetadata": "4d63e5ba8a415dc2db7174d575cd9e835ad245305ad019c472005cee66e3b12a",
          "withoutMetadata": "4181bad1ba0a608f64ccdc9a7d967497505af9477b6f923d58e8f3ba2412ca0f",
          "linkedWithoutMetadata": "4181bad1ba0a608f64ccdc9a7d967497505af9477b6f923d58e8f3ba2412ca0f"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "solady/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [
          "(address,string,address)",
          "claim(struct DonationVotingMerkleDistributionVaultStrategy.Claim[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionVaultStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)2922_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)12499_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "16",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "16",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "18",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "67",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12499_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12499_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy": {
        "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:89",
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVBaseStrategy",
            "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:258"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14551_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14562_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14562_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14551_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14562_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14551_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-simple/QVSimpleStrategy.sol:QVSimpleStrategy": {
        "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:89",
        "version": {
          "withMetadata": "f67455d3a0a5c87965130a8bb3e2dd9e45ed183b1d35336643a93dca540bc5c4",
          "withoutMetadata": "02e1e6045734fbf34bb9a809ff82ece156308cbb87ef249dc38aa6946a868575",
          "linkedWithoutMetadata": "02e1e6045734fbf34bb9a809ff82ece156308cbb87ef249dc38aa6946a868575"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "addAllocator(address)",
          "removeAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVSimpleStrategy",
            "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:121"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14551_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14562_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:108"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:111"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14562_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14551_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14562_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14551_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:RFPCommitteeStrategy": {
        "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:83",
        "version": {
          "withMetadata": "8b87e416a8c6f9e4ad2cc35b1ea4b33994d2b2addd681790ab2d997f9b78990f",
          "withoutMetadata": "9b55e5816022eb416d9adfbd246ba296ff720722516d0d5e4910bbf10fe38928",
          "linkedWithoutMetadata": "9b55e5816022eb416d9adfbd246ba296ff720722516d0d5e4910bbf10fe38928"
        },
        "inherit": [
          "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPCommitteeStrategy",
            "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)2625",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)16061_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)16052_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "voteThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:104"
            },
            {
              "label": "votedFor",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:109"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:114"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)16061_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16052_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)16061_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)16052_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy": {
        "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:107",
        "version": {
          "withMetadata": "c32c11b93576b87c43972819b77594060432bc0aa245b71a602a1fffd5ae53d3",
          "withoutMetadata": "290fdcbd33eeb0af599df17731aa82fce32889517e865d944ddefffe243a01e6",
          "linkedWithoutMetadata": "290fdcbd33eeb0af599df17731aa82fce32889517e865d944ddefffe243a01e6"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getPayouts(address[],bytes[])",
          "getMilestone(uint256)",
          "getMilestoneStatus(uint256)",
          "setPoolActive(bool)",
          "setMilestones(struct RFPSimpleStrategy.Milestone[])",
          "submitUpcomingMilestone((uint256,string))",
          "increaseMaxBid(uint256)",
          "rejectMilestone(uint256)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPSimpleStrategy",
            "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:199"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)2625",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)16061_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)16052_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)16061_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Recipient)16052_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)16061_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)16052_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/IEAS.sol:IEAS": {
        "src": "lib/eas-contracts/contracts/IEAS.sol:82",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSchemaRegistry()",
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))",
          "multiAttest(struct MultiAttestationRequest[])",
          "multiAttestByDelegation(struct MultiDelegatedAttestationRequest[])",
          "revoke((bytes32,(bytes32,uint256)))",
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))",
          "multiRevoke(struct MultiRevocationRequest[])",
          "multiRevokeByDelegation(struct MultiDelegatedRevocationRequest[])",
          "timestamp(bytes32)",
          "multiTimestamp(bytes32[])",
          "revokeOffchain(bytes32)",
          "multiRevokeOffchain(bytes32[])",
          "getAttestation(bytes32)",
          "isAttestationValid(bytes32)",
          "getTimestamp(bytes32)",
          "getRevokeOffchain(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol:ISchemaRegistry": {
        "src": "lib/eas-contracts/contracts/ISchemaRegistry.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "register(string,address,bool)",
          "getSchema(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver": {
        "src": "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:19",
        "version": {
          "withMetadata": "903823269e1dda10d0f5bd12e01fad9c3b0c5c82ab583b0a066d0bfd518b3714",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "ceb22d4d6514897c04f1a594bbc418c7874576037d943c9e3e906a707d6e55a0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:50",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)18293_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)18293_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)18293_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "87a03312c78e46bbb66a8ba6fc7727b71d133400afe9ab9abf528edcc3ca3101",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "62555a50f56cf87829bff6a0235d4252f4e3ff56c4673dbb4045293f012f0674",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:13",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "d6054db889c48f95c6d5274b4a88808dad39bc021a370e5f3ce96f6d3e294228",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "b4382af4f3ed64ae33e5ad9b209505019e0c24199c8fb91b0961b121c6a9f5c7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "178be8bd6d1599ad2c254cf0b505c2bf03d1f9233d60b06cce6cf015381539d1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "ccf2e75c7b0027d393f9127169491f7e61c9937d7b38862fa9b3f1602ea94f80",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/IEIP712.sol:IEIP712": {
        "src": "lib/permit2/src/interfaces/IEIP712.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/ISignatureTransfer.sol:ISignatureTransfer": {
        "src": "lib/permit2/src/interfaces/ISignatureTransfer.sol:9",
        "inherit": [
          "lib/permit2/src/interfaces/IEIP712.sol:IEIP712"
        ],
        "libraries": [],
        "methods": [
          "nonceBitmap(address,uint256)",
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)",
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)",
          "permitTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes)",
          "permitWitnessTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes32,string,bytes)",
          "invalidateUnorderedNonces(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable": {
        "src": "lib/v2-core/src/interfaces/IAdminable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "transferAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Base.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "comptroller()",
          "protocolRevenues(address)",
          "claimProtocolRevenues(address)",
          "setComptroller(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:ISablierV2Comptroller": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "flashFee()",
          "isFlashAsset(address)",
          "protocolFees(address)",
          "setFlashFee(uint256)",
          "setProtocolFee(address,uint256)",
          "toggleFlashAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:13",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getAsset(uint256)",
          "getDepositedAmount(uint256)",
          "getEndTime(uint256)",
          "getRecipient(uint256)",
          "getRefundedAmount(uint256)",
          "getSender(uint256)",
          "getStartTime(uint256)",
          "getWithdrawnAmount(uint256)",
          "isCancelable(uint256)",
          "isCold(uint256)",
          "isDepleted(uint256)",
          "isStream(uint256)",
          "isWarm(uint256)",
          "nextStreamId()",
          "refundableAmountOf(uint256)",
          "statusOf(uint256)",
          "streamedAmountOf(uint256)",
          "wasCanceled(uint256)",
          "withdrawableAmountOf(uint256)",
          "burn(uint256)",
          "cancel(uint256)",
          "cancelMultiple(uint256[])",
          "renounce(uint256)",
          "setNFTDescriptor(address)",
          "withdraw(uint256,address,uint128)",
          "withdrawMax(uint256,address)",
          "withdrawMaxAndTransfer(uint256,address)",
          "withdrawMultiple(uint256[],address,uint128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:ISablierV2LockupDynamic": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_SEGMENT_COUNT()",
          "getRange(uint256)",
          "getSegments(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDeltas((address,bool,address,uint128,address,(address,uint256),struct LockupDynamic.SegmentWithDelta[]))",
          "createWithMilestones((address,uint40,bool,address,uint128,address,(address,uint256),struct LockupDynamic.Segment[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:ISablierV2LockupLinear": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getCliffTime(uint256)",
          "getRange(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))",
          "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:ISablierV2NFTDescriptor": {
        "src": "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:Lockup": {
        "src": "lib/v2-core/src/types/DataTypes.sol:29",
        "version": {
          "withMetadata": "11b4fc914deec4bcf19a125ba246093be2b2c2242bf24a30ae88c43915d75b93",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupDynamic": {
        "src": "lib/v2-core/src/types/DataTypes.sol:72",
        "version": {
          "withMetadata": "b9bbf69490008139c81db08dc70420781bc23baa63008eb69a83d35a14735b95",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupLinear": {
        "src": "lib/v2-core/src/types/DataTypes.sol:180",
        "version": {
          "withMetadata": "5cdae0f6b45b4e80ddb822e32a0aeb82f4f76fc44f31c90b51703d05a892e214",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/auth/Ownable.sol:Ownable": {
        "src": "solady/src/auth/Ownable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "renounceOwnership()",
          "requestOwnershipHandover()",
          "cancelOwnershipHandover()",
          "completeOwnershipHandover(address)",
          "owner()",
          "ownershipHandoverExpiresAt(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC20.sol:ERC20": {
        "src": "solady/src/tokens/ERC20.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC721.sol:ERC721": {
        "src": "solady/src/tokens/ERC721.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "balanceOf(address)",
          "getApproved(uint256)",
          "approve(address,uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/CREATE3.sol:CREATE3": {
        "src": "solady/src/utils/CREATE3.sol:8",
        "version": {
          "withMetadata": "5f90bd4a0c0df40867dd67e13ccbf47c97e9fca59f651e9bddbcee416317f3b4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/SafeTransferLib.sol:SafeTransferLib": {
        "src": "solady/src/utils/SafeTransferLib.sol:12",
        "version": {
          "withMetadata": "2ead3b741b87e30f9e82ba0967eee7c70c4e5fb753ff12d119bf25450d78cce2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "contracts/core/Allo.sol:Allo": {
        "src": "contracts/core/Allo.sol:89",
        "version": {
          "withMetadata": "501009fe71fda69403efcf0131499a5b11ee849387292193a6f638e00ed70b00",
          "withoutMetadata": "2f0bb5c05d4ff444357fef42d369f70e73f71d58052d6c259b2c1010039dd8a3",
          "linkedWithoutMetadata": "2f0bb5c05d4ff444357fef42d369f70e73f71d58052d6c259b2c1010039dd8a3"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "solady/src/auth/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IAllo.sol:IAllo"
        ],
        "libraries": [
          "contracts/core/libraries/Clone.sol:Clone"
        ],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "getFeeDenominator()",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "isCloneableStrategy(address)",
          "getPool(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)18293_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "percentFee",
              "offset": 0,
              "slot": "52",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:114"
            },
            {
              "label": "baseFee",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:129"
            },
            {
              "label": "_poolIndex",
              "offset": 0,
              "slot": "54",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "55",
              "type": "t_address_payable",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "56",
              "type": "t_contract(IRegistry)2625",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:133"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "57",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:134"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "58",
              "type": "t_mapping(t_uint256,t_struct(Pool)2144_storage)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:135"
            },
            {
              "label": "cloneableStrategies",
              "offset": 0,
              "slot": "59",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)2796": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)18293_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)2144_storage)": {
              "label": "mapping(uint256 => struct IAllo.Pool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Pool)2144_storage": {
              "label": "struct IAllo.Pool",
              "members": [
                {
                  "label": "profileId",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "strategy",
                  "type": "t_contract(IStrategy)2796",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "managerRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)18293_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Anchor.sol:Anchor": {
        "src": "contracts/core/Anchor.sol:89",
        "version": {
          "withMetadata": "3d777b67522887e7fb851498feed8c6b91d8b8cbed5d47005dbf4cde5a4a2b7e",
          "withoutMetadata": "7c387b18ca48b348b1f66a70ba201e3a467bf09f94fc5b8e83ff8746c22ec24a",
          "linkedWithoutMetadata": "7c387b18ca48b348b1f66a70ba201e3a467bf09f94fc5b8e83ff8746c22ec24a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "execute(address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Anchor",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "profileId",
            "src": "contracts/core/Anchor.sol:89"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Registry.sol:Registry": {
        "src": "contracts/core/Registry.sol:103",
        "version": {
          "withMetadata": "90bfd6236f0bb9ea63bcf89e0eeb4ba96f1acbb4e85d10971de4d40d6de62b0d",
          "withoutMetadata": "60ba510bda57599cccae909f1c94d5aba400ccc3aa33888eeac841d27f4d2715",
          "linkedWithoutMetadata": "60ba510bda57599cccae909f1c94d5aba400ccc3aa33888eeac841d27f4d2715"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "contracts/core/libraries/Native.sol:Native",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "contracts/core/interfaces/IRegistry.sol:IRegistry"
        ],
        "libraries": [
          "solady/src/utils/CREATE3.sol:CREATE3"
        ],
        "methods": [
          "initialize(address)",
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)18293_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "anchorToProfileId",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:109"
            },
            {
              "label": "profilesById",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_struct(Profile)2452_storage)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:111"
            },
            {
              "label": "profileIdToPendingOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:113"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Profile)2452_storage)": {
              "label": "mapping(bytes32 => struct IRegistry.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)18293_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Profile)2452_storage": {
              "label": "struct IRegistry.Profile",
              "members": [
                {
                  "label": "id",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "anchor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)18293_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IAllo.sol:IAllo": {
        "src": "contracts/core/interfaces/IAllo.sol:97",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "isCloneableStrategy(address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "getPool(uint256)",
          "getFeeDenominator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IRegistry.sol:IRegistry": {
        "src": "contracts/core/interfaces/IRegistry.sol:92",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/core/interfaces/IStrategy.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "isValidAllocator(address)",
          "isPoolActive()",
          "getPoolAmount()",
          "increasePoolAmount(uint256)",
          "getRecipientStatus(address)",
          "getPayouts(address[],bytes[])",
          "initialize(uint256,bytes)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Clone.sol:Clone": {
        "src": "contracts/core/libraries/Clone.sol:37",
        "version": {
          "withMetadata": "028268e8441fd85b193a4405754f6bbcadb5181d494f7f1b2ea6795ac3b06c13",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Errors.sol:Errors": {
        "src": "contracts/core/libraries/Errors.sol:109",
        "version": {
          "withMetadata": "d7afc705df8ab511f0c9c4cd7729e01f3faeb9e622fdf8543974558ae3cf3a06",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Native.sol:Native": {
        "src": "contracts/core/libraries/Native.sol:26",
        "version": {
          "withMetadata": "04c86c3c07cfa3324a58cfa463b2531246ead213a8753316dcf738776b41a6a2",
          "withoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466",
          "linkedWithoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Transfer.sol:Transfer": {
        "src": "contracts/core/libraries/Transfer.sol:95",
        "version": {
          "withMetadata": "24fb18dd575493f01d53bd7242a79893bd2beb04dbfbe741bedfec1e0a637515",
          "withoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466",
          "linkedWithoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466"
        },
        "inherit": [
          "contracts/core/libraries/Native.sol:Native"
        ],
        "libraries": [
          "solady/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/factory/ContractFactory.sol:ContractFactory": {
        "src": "contracts/factory/ContractFactory.sol:107",
        "version": {
          "withMetadata": "952a0a7f1f96a84c946b7b4b73695514821b7a39d9726056a181c07739ea7955",
          "withoutMetadata": "0cd9f0333d78bdd2af9498d5d4adeec01b0e328ca33e6873216a037ccc439f13",
          "linkedWithoutMetadata": "0cd9f0333d78bdd2af9498d5d4adeec01b0e328ca33e6873216a037ccc439f13"
        },
        "inherit": [],
        "libraries": [
          "solady/src/utils/CREATE3.sol:CREATE3"
        ],
        "methods": [
          "()",
          "deploy(string,string,bytes)",
          "setDeployer(address,bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ContractFactory",
            "src": "contracts/factory/ContractFactory.sol:119"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "usedSalts",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            },
            {
              "label": "isDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/BaseStrategy.sol:BaseStrategy": {
        "src": "contracts/strategies/BaseStrategy.sol:111",
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "getPoolAmount()",
          "isPoolActive()",
          "getRecipientStatus(address)",
          "increasePoolAmount(uint256)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)",
          "getPayouts(address[],bytes[])",
          "isValidAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseStrategy",
            "src": "contracts/strategies/BaseStrategy.sol:129"
          },
          {
            "kind": "state-variable-immutable",
            "name": "allo",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          },
          {
            "kind": "state-variable-immutable",
            "name": "strategyId",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:DirectGrantsSimpleStrategy": {
        "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:112",
        "version": {
          "withMetadata": "18cbbef7bb1ab90e22a0d8864d7a185dced340a28b864876bca4dcadbb7ae30f",
          "withoutMetadata": "ab5389251e0ffdcfb84d04d58efda1952af7bb08678d257f83fc95b2c255337d",
          "linkedWithoutMetadata": "ab5389251e0ffdcfb84d04d58efda1952af7bb08678d257f83fc95b2c255337d"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getMilestoneStatus(address,uint256)",
          "getMilestones(address)",
          "setMilestones(address,struct DirectGrantsSimpleStrategy.Milestone[])",
          "reviewSetMilestones(address,uint8)",
          "submitMilestone(address,uint256,(uint256,string))",
          "rejectMilestone(address,uint256)",
          "setRecipientStatusToInReview(address[])",
          "setPoolActive(bool)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DirectGrantsSimpleStrategy",
            "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:191"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:161"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:162"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:164"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(IRegistry)2625",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:166"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:167"
            },
            {
              "label": "_acceptedRecipientIds",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:172"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)3884_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:177"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Milestone)3893_storage)dyn_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:179"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:184"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)3893_storage)dyn_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(Milestone)3893_storage)dyn_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Milestone[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)3884_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)3893_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)3884_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "milestonesReviewStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:DonationVotingCustomRegistryStrategy": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51",
        "version": {
          "withMetadata": "67e08ec94ef4fcc9fababc039232d5eb99ca183bad20110b2d65ebcb426bfced",
          "withoutMetadata": "5ec248496bb5814db29db320567ee228cf276e7cfd7096f1fc375c38e58dfc37",
          "linkedWithoutMetadata": "5ec248496bb5814db29db320567ee228cf276e7cfd7096f1fc375c38e58dfc37"
        },
        "inherit": [
          "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingCustomRegistryStrategy",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)5485_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(SimpleProjectRegistry)5456",
              "contract": "DonationVotingCustomRegistryStrategy",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(SimpleProjectRegistry)5456": {
              "label": "contract SimpleProjectRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5485_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)2643_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)5485_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:SimpleProjectRegistry": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:26",
        "version": {
          "withMetadata": "a475664d47568f73cbe8d03f135151cd34a3979cbbd5d3f5ba9b02406631936b",
          "withoutMetadata": "c42152b6d8418493091034c29cc09b77be668156c32f57fa1f159cd5714b6a87",
          "linkedWithoutMetadata": "c42152b6d8418493091034c29cc09b77be668156c32f57fa1f159cd5714b6a87"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addProject(address)",
          "addProjects(address[])",
          "removeProject(address)",
          "removeProjects(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleProjectRegistry",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "projects",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleProjectRegistry",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy": {
        "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:100",
        "version": {
          "withMetadata": "2c21d38836011dafda3767592a6c1012a063a6318508a0ab76c7d7fedacb0c5b",
          "withoutMetadata": "3ec7486dc8e287f7e75c5151a3f2fe08b9f0a051775db358d3d8f08da384837c",
          "linkedWithoutMetadata": "3ec7486dc8e287f7e75c5151a3f2fe08b9f0a051775db358d3d8f08da384837c"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "setPayout(address[],uint256[])",
          "claim(struct DonationVotingStrategy.Claim[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingStrategy",
            "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:198"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)5485_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5485_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)2643_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)5485_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:ProportionalPayoutStrategy": {
        "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:112",
        "version": {
          "withMetadata": "9984814cca1449e93f59ade630cd37c6810658f979f3920e8cdb471560cb6177",
          "withoutMetadata": "08ce3ade956cda6594eb2b2b26b6394314715341bbd16f0b7b5d7b5abc73a288",
          "linkedWithoutMetadata": "08ce3ade956cda6594eb2b2b26b6394314715341bbd16f0b7b5d7b5abc73a288"
        },
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "setAllocationTime(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProportionalPayoutStrategy",
            "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:166"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Recipient)6892_storage)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:151"
            },
            {
              "label": "hasAllocated",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:152"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:153"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ERC721)30780",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "maxRecipientsAllowed",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:157"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:158"
            },
            {
              "label": "totalAllocations",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:159"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)30780": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)6892_storage)": {
              "label": "mapping(address => struct ProportionalPayoutStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)6892_storage": {
              "label": "struct ProportionalPayoutStrategy.Recipient",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:QVGovernanceERC20Votes": {
        "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:89",
        "version": {
          "withMetadata": "4b078b6b2944f9b352194fb4ca056d544bda7738f1353b25104d8deb2b4ca01b",
          "withoutMetadata": "73bd804905b977d1c9d5aac698b0555f496b116b71a2e58743c769494d5f055f",
          "linkedWithoutMetadata": "73bd804905b977d1c9d5aac698b0555f496b116b71a2e58743c769494d5f055f"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVGovernanceERC20Votes",
            "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:104"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14551_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14562_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "govToken",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IVotes)18740",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:97"
            },
            {
              "label": "timestamp",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:98"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IVotes)18740": {
              "label": "contract IVotes",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14562_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14551_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14562_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14551_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:HackathonQVStrategy": {
        "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:111",
        "version": {
          "withMetadata": "993b80592083a4af91a7367cf597e6ec3202d2dd7bd3947a426253508ec24358",
          "withoutMetadata": "94f052f1dfc0f99a9d01b9e0a892be70484d9f24eff587013e7ef7eb789b219c",
          "linkedWithoutMetadata": "94f052f1dfc0f99a9d01b9e0a892be70484d9f24eff587013e7ef7eb789b219c"
        },
        "inherit": [
          "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver",
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllowedRecipientIds(address[],uint64,bytes)",
          "setPayoutPercentages(uint256[])",
          "getPayouts(address[],bytes[])",
          "getAttestation(bytes32)",
          "getSchema(bytes32)",
          "isPayable()",
          "isAttestationExpired(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HackathonQVStrategy",
            "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:148"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14551_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14562_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "_eas",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IEAS)17431",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            },
            {
              "label": "payoutPercentages",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:130"
            },
            {
              "label": "votesByRank",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:131"
            },
            {
              "label": "easInfo",
              "offset": 0,
              "slot": "14",
              "type": "t_struct(EASInfo)7781_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "19",
              "type": "t_contract(ERC721)30780",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "recipientIdToUID",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:135"
            },
            {
              "label": "recipientIdToIndex",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:137"
            },
            {
              "label": "indexToRecipientId",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:143"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ERC721)30780": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IEAS)17431": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(ISchemaRegistry)17476": {
              "label": "contract ISchemaRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14562_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14551_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14562_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(EASInfo)7781_storage": {
              "label": "struct HackathonQVStrategy.EASInfo",
              "members": [
                {
                  "label": "eas",
                  "type": "t_contract(IEAS)17431",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "schemaRegistry",
                  "type": "t_contract(ISchemaRegistry)17476",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "schemaUID",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "schema",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "revocable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14551_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver": {
        "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:19",
        "inherit": [
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver"
        ],
        "libraries": [],
        "methods": [
          "isPayable()",
          "()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_eas",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IEAS)17431",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            }
          ],
          "types": {
            "t_contract(IEAS)17431": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:QVNftTieredStrategy": {
        "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:96",
        "version": {
          "withMetadata": "45f0a904d39da6340aa9e9ab4b98570fdce12d54a82ec67a51d7f2a69c0c2362",
          "withoutMetadata": "ab12cd3005380373488b60b88d02134d6dac3b1e9daae2d28f6fce853f3de06e",
          "linkedWithoutMetadata": "ab12cd3005380373488b60b88d02134d6dac3b1e9daae2d28f6fce853f3de06e"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVNftTieredStrategy",
            "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14551_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14562_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "nfts",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_contract(ERC721)30780)dyn_storage",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:112"
            },
            {
              "label": "maxVoiceCreditsPerNft",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_contract(ERC721)30780,t_uint256)",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:113"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_contract(ERC721)30780,t_mapping(t_uint256,t_uint256))",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(ERC721)30780)dyn_storage": {
              "label": "contract ERC721[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)30780": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14562_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14551_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)30780,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(contract ERC721 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)30780,t_uint256)": {
              "label": "mapping(contract ERC721 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14562_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14551_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:LockupDynamicStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:16",
        "version": {
          "withMetadata": "f8d31df964183c4e1e65f3469fe08171254608ff88e453148b69cac175bc4226",
          "withoutMetadata": "fbc664e7aeda4b7f7f9ad47e11864e96d5927450624824946b5bcd74de46b5fb",
          "linkedWithoutMetadata": "fbc664e7aeda4b7f7f9ad47e11864e96d5927450624824946b5bcd74de46b5fb"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/v2-core/src/types/DataTypes.sol:LockupDynamic"
        ],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientSegments(address,struct LockupDynamic.SegmentWithDelta[])",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupDynamicStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:42"
            },
            {
              "label": "lockupDynamic",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupDynamic)29191",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)29311_storage",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)9537_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(SegmentWithDelta)29395_storage)dyn_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupDynamic)29191": {
              "label": "contract ISablierV2LockupDynamic",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)9537_storage)": {
              "label": "mapping(address => struct LockupDynamicStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)29311_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)28552",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)9537_storage": {
              "label": "struct LockupDynamicStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "segments",
                  "type": "t_array(t_struct(SegmentWithDelta)29395_storage)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(SegmentWithDelta)29395_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exponent",
                  "type": "t_userDefinedValueType(UD2x18)26748",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "delta",
                  "type": "t_uint40",
                  "offset": 24,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD2x18)26748": {
              "label": "UD2x18",
              "numberOfBytes": "8",
              "underlying": "t_uint64"
            },
            "t_userDefinedValueType(UD60x18)28552": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:LockupLinearStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:16",
        "version": {
          "withMetadata": "ecfaa43bbb7b9ec98c6dbeb46d5349510450ce904f077b81fb71e7a0a810c46e",
          "withoutMetadata": "2766e84e67eabad97990605ace7c3e82d513ad0cd625ad3809dbe6e8c5dfb7e9",
          "linkedWithoutMetadata": "2766e84e67eabad97990605ace7c3e82d513ad0cd625ad3809dbe6e8c5dfb7e9"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/v2-core/src/types/DataTypes.sol:LockupLinear"
        ],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientDurations(address,(uint40,uint40))",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupLinearStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:42"
            },
            {
              "label": "lockupLinear",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupLinear)29280",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)29311_storage",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)10714_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupLinear)29280": {
              "label": "contract ISablierV2LockupLinear",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)10714_storage)": {
              "label": "mapping(address => struct LockupLinearStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)29311_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)28552",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Durations)29463_storage": {
              "label": "struct LockupLinear.Durations",
              "members": [
                {
                  "label": "cliff",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "total",
                  "type": "t_uint40",
                  "offset": 5,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)10714_storage": {
              "label": "struct LockupLinearStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durations",
                  "type": "t_struct(Durations)29463_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD60x18)28552": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:NFT": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:8",
        "version": {
          "withMetadata": "330b0e37d9e6608bc4cdb2f65ec3427922aaebc578f7f7374e3bb934ba7a22b2",
          "withoutMetadata": "8cb56b13b3a28a0670458267486272612909f877d123a98977ab9be7c8239ceb",
          "linkedWithoutMetadata": "8cb56b13b3a28a0670458267486272612909f877d123a98977ab9be7c8239ceb"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable",
          "solady/src/tokens/ERC721.sol:ERC721"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string,uint256,address)",
          "name()",
          "symbol()",
          "mintTo(address)",
          "tokenURI(uint256)",
          "withdrawPayments(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFT",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTokenId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:16"
            },
            {
              "label": "MINT_PRICE",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:17"
            },
            {
              "label": "__name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:20"
            },
            {
              "label": "__symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:NFTFactory": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:6",
        "version": {
          "withMetadata": "6a2a0eb10a3c4aea89369b044963b04767d217386cfef14d004a471b2d2364b7",
          "withoutMetadata": "876d7834686d2fd20b50abab7775f71aaf8886b05dec95d4c32b4e5c6a2aca14",
          "linkedWithoutMetadata": "876d7834686d2fd20b50abab7775f71aaf8886b05dec95d4c32b4e5c6a2aca14"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createNFTContract(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isNFTContract",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NFTFactory",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:WrappedVotingNftMintStrategy": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:100",
        "version": {
          "withMetadata": "232cc18fae1905defebb95d5f99f7b94739746154c66a24ffcaccb226056364f",
          "withoutMetadata": "71092f04c37721f7488962e8bbf3fd88b88ddb2066ab43e84ac28430b425f1ef",
          "linkedWithoutMetadata": "71092f04c37721f7488962e8bbf3fd88b88ddb2066ab43e84ac28430b425f1ef"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllocationTimes(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrappedVotingNftMintStrategy",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:147"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "nftFactory",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(NFTFactory)11928",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:134"
            },
            {
              "label": "allocationStartTime",
              "offset": 20,
              "slot": "4",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "currentWinner",
              "offset": 8,
              "slot": "5",
              "type": "t_address",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "allocations",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(NFTFactory)11928": {
              "label": "contract NFTFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:99",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(struct DonationVotingMerkleDistributionBaseStrategy.ApplicationStatus[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "updateDistribution(bytes32,(uint256,string))",
          "isDistributionSet()",
          "hasBeenDistributed(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionBaseStrategy",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:286"
          },
          {
            "kind": "state-variable-immutable",
            "name": "PERMIT2",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:230"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)2922_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)12499_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12499_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12499_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:DonationVotingMerkleDistributionDirectTransferStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76",
        "version": {
          "withMetadata": "6aa3f2f5ab3a56c45d682a1e6bdc754a1e68cdc863671996b670eb4c0a509b8b",
          "withoutMetadata": "7557c6a8ae5e73ceafdaf5dd395fbbce55639e999f7fb40636a1cc2a55c6b2e4",
          "linkedWithoutMetadata": "7557c6a8ae5e73ceafdaf5dd395fbbce55639e999f7fb40636a1cc2a55c6b2e4"
        },
        "inherit": [
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "solady/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [
          "(address,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionDirectTransferStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)2922_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)12499_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12499_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12499_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:DonationVotingMerkleDistributionVaultStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:92",
        "version": {
          "withMetadata": "54c6be51d4350e4b070af989f85d8bbf34c93290921d81517ac4b91d99ca933e",
          "withoutMetadata": "4181bad1ba0a608f64ccdc9a7d967497505af9477b6f923d58e8f3ba2412ca0f",
          "linkedWithoutMetadata": "4181bad1ba0a608f64ccdc9a7d967497505af9477b6f923d58e8f3ba2412ca0f"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "solady/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [
          "(address,string,address)",
          "claim(struct DonationVotingMerkleDistributionVaultStrategy.Claim[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionVaultStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)2922_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)12499_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "16",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "16",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "18",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "67",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12499_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12499_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy": {
        "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:89",
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVBaseStrategy",
            "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:258"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14551_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14562_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14562_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14551_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14562_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14551_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-simple/QVSimpleStrategy.sol:QVSimpleStrategy": {
        "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:89",
        "version": {
          "withMetadata": "3ed549e520d5e1248f4eb2a3cc62a61102e6eaf8cab6a41787c7d28e5320e6d1",
          "withoutMetadata": "02e1e6045734fbf34bb9a809ff82ece156308cbb87ef249dc38aa6946a868575",
          "linkedWithoutMetadata": "02e1e6045734fbf34bb9a809ff82ece156308cbb87ef249dc38aa6946a868575"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "addAllocator(address)",
          "removeAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVSimpleStrategy",
            "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:121"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14551_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14562_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:108"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:111"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14562_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14551_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14562_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14551_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:RFPCommitteeStrategy": {
        "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:83",
        "version": {
          "withMetadata": "7cf90ec5f6eb575a8ce19c38fe9e4f0e00f9b98cd50478348a65dec1da87509d",
          "withoutMetadata": "9b55e5816022eb416d9adfbd246ba296ff720722516d0d5e4910bbf10fe38928",
          "linkedWithoutMetadata": "9b55e5816022eb416d9adfbd246ba296ff720722516d0d5e4910bbf10fe38928"
        },
        "inherit": [
          "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPCommitteeStrategy",
            "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)2625",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)16061_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)16052_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "voteThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:104"
            },
            {
              "label": "votedFor",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:109"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:114"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)16061_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16052_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)16061_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)16052_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy": {
        "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:107",
        "version": {
          "withMetadata": "2cca06c3f63f1cd45848fb6dc5fca6a1467b867ba7cc58f9028649b39235751d",
          "withoutMetadata": "290fdcbd33eeb0af599df17731aa82fce32889517e865d944ddefffe243a01e6",
          "linkedWithoutMetadata": "290fdcbd33eeb0af599df17731aa82fce32889517e865d944ddefffe243a01e6"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getPayouts(address[],bytes[])",
          "getMilestone(uint256)",
          "getMilestoneStatus(uint256)",
          "setPoolActive(bool)",
          "setMilestones(struct RFPSimpleStrategy.Milestone[])",
          "submitUpcomingMilestone((uint256,string))",
          "increaseMaxBid(uint256)",
          "rejectMilestone(uint256)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPSimpleStrategy",
            "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:199"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)2625",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)16061_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)16052_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)16061_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Recipient)16052_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)16061_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)16052_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/IEAS.sol:IEAS": {
        "src": "lib/eas-contracts/contracts/IEAS.sol:82",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSchemaRegistry()",
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))",
          "multiAttest(struct MultiAttestationRequest[])",
          "multiAttestByDelegation(struct MultiDelegatedAttestationRequest[])",
          "revoke((bytes32,(bytes32,uint256)))",
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))",
          "multiRevoke(struct MultiRevocationRequest[])",
          "multiRevokeByDelegation(struct MultiDelegatedRevocationRequest[])",
          "timestamp(bytes32)",
          "multiTimestamp(bytes32[])",
          "revokeOffchain(bytes32)",
          "multiRevokeOffchain(bytes32[])",
          "getAttestation(bytes32)",
          "isAttestationValid(bytes32)",
          "getTimestamp(bytes32)",
          "getRevokeOffchain(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol:ISchemaRegistry": {
        "src": "lib/eas-contracts/contracts/ISchemaRegistry.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "register(string,address,bool)",
          "getSchema(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver": {
        "src": "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:19",
        "version": {
          "withMetadata": "719b3eb23a538a12ea09ac3df2af91f9fc6db46f8a59ed3668e4ed4ea8c025d1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6b0255d7d8876999b18a53ccff2eaa4f44d333aa1822da968eeebce038e74de4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:50",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)18293_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)18293_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)18293_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "81ff73e7d4658985729f35cd6b4117d075655c29ef98f0484eb0c52a6e590a05",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "d62fdc927ea60689e41212652148289bea80695ffbfe6b64feb653a5630ce78e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:13",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "4b2a9ccee2a857b4f43b7a4d0c25debc975a1cea33be5805e5ffc86f469b02c4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "44357c9b3de0066521bc35938c6e5ad2530af1ac10a1b471c4ef330c1fbf720c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "6f9284a531296e9f994b010f227b30d092306941038aac0eeb4346cff6edda5b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "d2df3a46f232df98c4adedcba164655962b44512bd484ecc83a4ae7f3da2030e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/IEIP712.sol:IEIP712": {
        "src": "lib/permit2/src/interfaces/IEIP712.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/ISignatureTransfer.sol:ISignatureTransfer": {
        "src": "lib/permit2/src/interfaces/ISignatureTransfer.sol:9",
        "inherit": [
          "lib/permit2/src/interfaces/IEIP712.sol:IEIP712"
        ],
        "libraries": [],
        "methods": [
          "nonceBitmap(address,uint256)",
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)",
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)",
          "permitTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes)",
          "permitWitnessTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes32,string,bytes)",
          "invalidateUnorderedNonces(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable": {
        "src": "lib/v2-core/src/interfaces/IAdminable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "transferAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Base.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "comptroller()",
          "protocolRevenues(address)",
          "claimProtocolRevenues(address)",
          "setComptroller(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:ISablierV2Comptroller": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "flashFee()",
          "isFlashAsset(address)",
          "protocolFees(address)",
          "setFlashFee(uint256)",
          "setProtocolFee(address,uint256)",
          "toggleFlashAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:13",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getAsset(uint256)",
          "getDepositedAmount(uint256)",
          "getEndTime(uint256)",
          "getRecipient(uint256)",
          "getRefundedAmount(uint256)",
          "getSender(uint256)",
          "getStartTime(uint256)",
          "getWithdrawnAmount(uint256)",
          "isCancelable(uint256)",
          "isCold(uint256)",
          "isDepleted(uint256)",
          "isStream(uint256)",
          "isWarm(uint256)",
          "nextStreamId()",
          "refundableAmountOf(uint256)",
          "statusOf(uint256)",
          "streamedAmountOf(uint256)",
          "wasCanceled(uint256)",
          "withdrawableAmountOf(uint256)",
          "burn(uint256)",
          "cancel(uint256)",
          "cancelMultiple(uint256[])",
          "renounce(uint256)",
          "setNFTDescriptor(address)",
          "withdraw(uint256,address,uint128)",
          "withdrawMax(uint256,address)",
          "withdrawMaxAndTransfer(uint256,address)",
          "withdrawMultiple(uint256[],address,uint128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:ISablierV2LockupDynamic": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_SEGMENT_COUNT()",
          "getRange(uint256)",
          "getSegments(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDeltas((address,bool,address,uint128,address,(address,uint256),struct LockupDynamic.SegmentWithDelta[]))",
          "createWithMilestones((address,uint40,bool,address,uint128,address,(address,uint256),struct LockupDynamic.Segment[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:ISablierV2LockupLinear": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getCliffTime(uint256)",
          "getRange(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))",
          "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:ISablierV2NFTDescriptor": {
        "src": "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:Lockup": {
        "src": "lib/v2-core/src/types/DataTypes.sol:29",
        "version": {
          "withMetadata": "7bd417e53cb7fee4c93c7f90c3905719f86cb56361aa065ea706f9bdfa4fa90d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupDynamic": {
        "src": "lib/v2-core/src/types/DataTypes.sol:72",
        "version": {
          "withMetadata": "c5e69af67736ae27210040da1286dc12ef2e52350eb6c783a4ad2869688da727",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupLinear": {
        "src": "lib/v2-core/src/types/DataTypes.sol:180",
        "version": {
          "withMetadata": "2cb6157f9c394d1b6a7df8664031fc917047b0dfb131b3a9200b2c186b6427e2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/auth/Ownable.sol:Ownable": {
        "src": "solady/src/auth/Ownable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "renounceOwnership()",
          "requestOwnershipHandover()",
          "cancelOwnershipHandover()",
          "completeOwnershipHandover(address)",
          "owner()",
          "ownershipHandoverExpiresAt(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC20.sol:ERC20": {
        "src": "solady/src/tokens/ERC20.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC721.sol:ERC721": {
        "src": "solady/src/tokens/ERC721.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "balanceOf(address)",
          "getApproved(uint256)",
          "approve(address,uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/CREATE3.sol:CREATE3": {
        "src": "solady/src/utils/CREATE3.sol:8",
        "version": {
          "withMetadata": "a8a82fef428f0528ee579452a641f075de51f6f47173e925fb4a1dc93caba62d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/SafeTransferLib.sol:SafeTransferLib": {
        "src": "solady/src/utils/SafeTransferLib.sol:12",
        "version": {
          "withMetadata": "75c32ac9855333dba6977af09a2d0cd572623cf0e4b52eaaab48bcfe7bda420a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "contracts/core/Allo.sol:Allo": {
        "src": "contracts/core/Allo.sol:89",
        "version": {
          "withMetadata": "1ec1294c0be5ccc45cf1ef9fa4f13f04ed40eae00f6c3b4a3b3c3839854236b8",
          "withoutMetadata": "2f0bb5c05d4ff444357fef42d369f70e73f71d58052d6c259b2c1010039dd8a3",
          "linkedWithoutMetadata": "2f0bb5c05d4ff444357fef42d369f70e73f71d58052d6c259b2c1010039dd8a3"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "solady/src/auth/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IAllo.sol:IAllo"
        ],
        "libraries": [
          "contracts/core/libraries/Clone.sol:Clone"
        ],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "getFeeDenominator()",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "isCloneableStrategy(address)",
          "getPool(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)18294_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "percentFee",
              "offset": 0,
              "slot": "52",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:114"
            },
            {
              "label": "baseFee",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:129"
            },
            {
              "label": "_poolIndex",
              "offset": 0,
              "slot": "54",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "55",
              "type": "t_address_payable",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "56",
              "type": "t_contract(IRegistry)2625",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:133"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "57",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:134"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "58",
              "type": "t_mapping(t_uint256,t_struct(Pool)2144_storage)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:135"
            },
            {
              "label": "cloneableStrategies",
              "offset": 0,
              "slot": "59",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)2796": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)18294_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)2144_storage)": {
              "label": "mapping(uint256 => struct IAllo.Pool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Pool)2144_storage": {
              "label": "struct IAllo.Pool",
              "members": [
                {
                  "label": "profileId",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "strategy",
                  "type": "t_contract(IStrategy)2796",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "managerRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)18294_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Anchor.sol:Anchor": {
        "src": "contracts/core/Anchor.sol:89",
        "version": {
          "withMetadata": "54028094a47a44814597a25d604ce311884abb2c146866f354672c262cc11524",
          "withoutMetadata": "7c387b18ca48b348b1f66a70ba201e3a467bf09f94fc5b8e83ff8746c22ec24a",
          "linkedWithoutMetadata": "7c387b18ca48b348b1f66a70ba201e3a467bf09f94fc5b8e83ff8746c22ec24a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "execute(address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Anchor",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "profileId",
            "src": "contracts/core/Anchor.sol:89"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Registry.sol:Registry": {
        "src": "contracts/core/Registry.sol:103",
        "version": {
          "withMetadata": "b72b638ada62289713e363cdc224ce977d9b049332d67fcb94b8d326362f4fc2",
          "withoutMetadata": "a2d2ece4327f369998efa8ef7722a6bbd4387009981d044e421647ae63c90e0b",
          "linkedWithoutMetadata": "a2d2ece4327f369998efa8ef7722a6bbd4387009981d044e421647ae63c90e0b"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "contracts/core/libraries/Native.sol:Native",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "contracts/core/interfaces/IRegistry.sol:IRegistry"
        ],
        "libraries": [
          "solady/src/utils/CREATE3.sol:CREATE3"
        ],
        "methods": [
          "initialize(address)",
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)18294_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "anchorToProfileId",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:109"
            },
            {
              "label": "profilesById",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_struct(Profile)2452_storage)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:111"
            },
            {
              "label": "profileIdToPendingOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:113"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Profile)2452_storage)": {
              "label": "mapping(bytes32 => struct IRegistry.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)18294_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Profile)2452_storage": {
              "label": "struct IRegistry.Profile",
              "members": [
                {
                  "label": "id",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "anchor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)18294_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IAllo.sol:IAllo": {
        "src": "contracts/core/interfaces/IAllo.sol:97",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "isCloneableStrategy(address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "getPool(uint256)",
          "getFeeDenominator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IRegistry.sol:IRegistry": {
        "src": "contracts/core/interfaces/IRegistry.sol:92",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/core/interfaces/IStrategy.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "isValidAllocator(address)",
          "isPoolActive()",
          "getPoolAmount()",
          "increasePoolAmount(uint256)",
          "getRecipientStatus(address)",
          "getPayouts(address[],bytes[])",
          "initialize(uint256,bytes)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Clone.sol:Clone": {
        "src": "contracts/core/libraries/Clone.sol:37",
        "version": {
          "withMetadata": "bf32b720868d89f0267eb8c9c837215a04c108ed3682f8f4feca4395a102cc45",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Errors.sol:Errors": {
        "src": "contracts/core/libraries/Errors.sol:109",
        "version": {
          "withMetadata": "5b8b30f1d52c322ce5722e0c7a03ad3acf45dac50053d7d46ab425479db766a9",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Native.sol:Native": {
        "src": "contracts/core/libraries/Native.sol:26",
        "version": {
          "withMetadata": "27628e4246186e96afc24ade671ef8e2496d01b867a2f078e57ec5cf9109c6c6",
          "withoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466",
          "linkedWithoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Transfer.sol:Transfer": {
        "src": "contracts/core/libraries/Transfer.sol:95",
        "version": {
          "withMetadata": "ac5cdd58997d1435e6d5c76e51f133c8d2baa38ae55264819ba5a95c8c3213e9",
          "withoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466",
          "linkedWithoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466"
        },
        "inherit": [
          "contracts/core/libraries/Native.sol:Native"
        ],
        "libraries": [
          "solady/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/factory/ContractFactory.sol:ContractFactory": {
        "src": "contracts/factory/ContractFactory.sol:107",
        "version": {
          "withMetadata": "7e684ad7f1061c9053dbce5c161b46112468fa6f9fde3aa496732acf6aaad776",
          "withoutMetadata": "0cd9f0333d78bdd2af9498d5d4adeec01b0e328ca33e6873216a037ccc439f13",
          "linkedWithoutMetadata": "0cd9f0333d78bdd2af9498d5d4adeec01b0e328ca33e6873216a037ccc439f13"
        },
        "inherit": [],
        "libraries": [
          "solady/src/utils/CREATE3.sol:CREATE3"
        ],
        "methods": [
          "()",
          "deploy(string,string,bytes)",
          "setDeployer(address,bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ContractFactory",
            "src": "contracts/factory/ContractFactory.sol:119"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "usedSalts",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            },
            {
              "label": "isDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/BaseStrategy.sol:BaseStrategy": {
        "src": "contracts/strategies/BaseStrategy.sol:111",
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "getPoolAmount()",
          "isPoolActive()",
          "getRecipientStatus(address)",
          "increasePoolAmount(uint256)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)",
          "getPayouts(address[],bytes[])",
          "isValidAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseStrategy",
            "src": "contracts/strategies/BaseStrategy.sol:129"
          },
          {
            "kind": "state-variable-immutable",
            "name": "allo",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          },
          {
            "kind": "state-variable-immutable",
            "name": "strategyId",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:DirectGrantsSimpleStrategy": {
        "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:112",
        "version": {
          "withMetadata": "a2e7b8462655b40223b7ef0ee4f94a2fa6b25224f310db63c0e63234eb232716",
          "withoutMetadata": "ab5389251e0ffdcfb84d04d58efda1952af7bb08678d257f83fc95b2c255337d",
          "linkedWithoutMetadata": "ab5389251e0ffdcfb84d04d58efda1952af7bb08678d257f83fc95b2c255337d"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getMilestoneStatus(address,uint256)",
          "getMilestones(address)",
          "setMilestones(address,struct DirectGrantsSimpleStrategy.Milestone[])",
          "reviewSetMilestones(address,uint8)",
          "submitMilestone(address,uint256,(uint256,string))",
          "rejectMilestone(address,uint256)",
          "setRecipientStatusToInReview(address[])",
          "setPoolActive(bool)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DirectGrantsSimpleStrategy",
            "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:191"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:161"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:162"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:164"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(IRegistry)2625",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:166"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:167"
            },
            {
              "label": "_acceptedRecipientIds",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:172"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)3884_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:177"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Milestone)3893_storage)dyn_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:179"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:184"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)3893_storage)dyn_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(Milestone)3893_storage)dyn_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Milestone[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)3884_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)3893_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)3884_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "milestonesReviewStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:DonationVotingCustomRegistryStrategy": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51",
        "version": {
          "withMetadata": "f2abfb2dbbda7b0c9b03f71e47df63770b9244ee68470c5953b23facacc4f468",
          "withoutMetadata": "5ec248496bb5814db29db320567ee228cf276e7cfd7096f1fc375c38e58dfc37",
          "linkedWithoutMetadata": "5ec248496bb5814db29db320567ee228cf276e7cfd7096f1fc375c38e58dfc37"
        },
        "inherit": [
          "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingCustomRegistryStrategy",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)5485_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(SimpleProjectRegistry)5456",
              "contract": "DonationVotingCustomRegistryStrategy",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(SimpleProjectRegistry)5456": {
              "label": "contract SimpleProjectRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5485_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)2643_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)5485_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:SimpleProjectRegistry": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:26",
        "version": {
          "withMetadata": "345bae3565d6c0d6b0d34b9faeddd9394bd0121bdcfc52e426b5648301626a14",
          "withoutMetadata": "c42152b6d8418493091034c29cc09b77be668156c32f57fa1f159cd5714b6a87",
          "linkedWithoutMetadata": "c42152b6d8418493091034c29cc09b77be668156c32f57fa1f159cd5714b6a87"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addProject(address)",
          "addProjects(address[])",
          "removeProject(address)",
          "removeProjects(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleProjectRegistry",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "projects",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleProjectRegistry",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy": {
        "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:100",
        "version": {
          "withMetadata": "00feade47321e29890cc62c609755c5c0208237ce212bcc1e8cc2fb6ce5bbe8c",
          "withoutMetadata": "3ec7486dc8e287f7e75c5151a3f2fe08b9f0a051775db358d3d8f08da384837c",
          "linkedWithoutMetadata": "3ec7486dc8e287f7e75c5151a3f2fe08b9f0a051775db358d3d8f08da384837c"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "setPayout(address[],uint256[])",
          "claim(struct DonationVotingStrategy.Claim[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingStrategy",
            "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:198"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)5485_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5485_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)2643_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)5485_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:ProportionalPayoutStrategy": {
        "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:112",
        "version": {
          "withMetadata": "6ae7360a17b9c59e1796828b5ec316b7a9f2af304a3811079a7fe768c32dc0f7",
          "withoutMetadata": "08ce3ade956cda6594eb2b2b26b6394314715341bbd16f0b7b5d7b5abc73a288",
          "linkedWithoutMetadata": "08ce3ade956cda6594eb2b2b26b6394314715341bbd16f0b7b5d7b5abc73a288"
        },
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "setAllocationTime(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProportionalPayoutStrategy",
            "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:166"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Recipient)6892_storage)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:151"
            },
            {
              "label": "hasAllocated",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:152"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:153"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ERC721)30781",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "maxRecipientsAllowed",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:157"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:158"
            },
            {
              "label": "totalAllocations",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:159"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)30781": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)6892_storage)": {
              "label": "mapping(address => struct ProportionalPayoutStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)6892_storage": {
              "label": "struct ProportionalPayoutStrategy.Recipient",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:QVGovernanceERC20Votes": {
        "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:89",
        "version": {
          "withMetadata": "d0921faa0dbf500ef85134d2d3787ac32bdf8a5d99e23d7d8e048c2bcaf0c618",
          "withoutMetadata": "73bd804905b977d1c9d5aac698b0555f496b116b71a2e58743c769494d5f055f",
          "linkedWithoutMetadata": "73bd804905b977d1c9d5aac698b0555f496b116b71a2e58743c769494d5f055f"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVGovernanceERC20Votes",
            "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:104"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14552_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14563_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "govToken",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IVotes)18741",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:97"
            },
            {
              "label": "timestamp",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:98"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IVotes)18741": {
              "label": "contract IVotes",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14563_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14552_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14563_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14552_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:HackathonQVStrategy": {
        "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:113",
        "version": {
          "withMetadata": "0fe6c66eed54eeb08243b95ec94c4b03c963846541be7b49efba971ea2a2d18b",
          "withoutMetadata": "94f052f1dfc0f99a9d01b9e0a892be70484d9f24eff587013e7ef7eb789b219c",
          "linkedWithoutMetadata": "94f052f1dfc0f99a9d01b9e0a892be70484d9f24eff587013e7ef7eb789b219c"
        },
        "inherit": [
          "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver",
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllowedRecipientIds(address[],uint64,bytes)",
          "setPayoutPercentages(uint256[])",
          "getPayouts(address[],bytes[])",
          "getAttestation(bytes32)",
          "getSchema(bytes32)",
          "isPayable()",
          "isAttestationExpired(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HackathonQVStrategy",
            "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:150"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14552_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14563_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "_eas",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IEAS)17432",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            },
            {
              "label": "payoutPercentages",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "votesByRank",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:133"
            },
            {
              "label": "easInfo",
              "offset": 0,
              "slot": "14",
              "type": "t_struct(EASInfo)7782_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "19",
              "type": "t_contract(ERC721)30781",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "recipientIdToUID",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:136"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:137"
            },
            {
              "label": "recipientIdToIndex",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:139"
            },
            {
              "label": "indexToRecipientId",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:145"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ERC721)30781": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IEAS)17432": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(ISchemaRegistry)17477": {
              "label": "contract ISchemaRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14563_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14552_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14563_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(EASInfo)7782_storage": {
              "label": "struct HackathonQVStrategy.EASInfo",
              "members": [
                {
                  "label": "eas",
                  "type": "t_contract(IEAS)17432",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "schemaRegistry",
                  "type": "t_contract(ISchemaRegistry)17477",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "schemaUID",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "schema",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "revocable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14552_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver": {
        "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:19",
        "inherit": [
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver"
        ],
        "libraries": [],
        "methods": [
          "isPayable()",
          "()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_eas",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IEAS)17432",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            }
          ],
          "types": {
            "t_contract(IEAS)17432": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:QVNftTieredStrategy": {
        "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:96",
        "version": {
          "withMetadata": "7e71140e57e02ec6911e21487d969b350c0ca0c347cea8539992d150c63f0373",
          "withoutMetadata": "ab12cd3005380373488b60b88d02134d6dac3b1e9daae2d28f6fce853f3de06e",
          "linkedWithoutMetadata": "ab12cd3005380373488b60b88d02134d6dac3b1e9daae2d28f6fce853f3de06e"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVNftTieredStrategy",
            "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14552_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14563_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "nfts",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_contract(ERC721)30781)dyn_storage",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:112"
            },
            {
              "label": "maxVoiceCreditsPerNft",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_contract(ERC721)30781,t_uint256)",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:113"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_contract(ERC721)30781,t_mapping(t_uint256,t_uint256))",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(ERC721)30781)dyn_storage": {
              "label": "contract ERC721[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)30781": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14563_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14552_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)30781,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(contract ERC721 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)30781,t_uint256)": {
              "label": "mapping(contract ERC721 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14563_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14552_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:LockupDynamicStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:16",
        "version": {
          "withMetadata": "d0ffda05fbe71c7f709468f4d3538343c3ec6833ad25031e7aaf11b38d0cd58b",
          "withoutMetadata": "fbc664e7aeda4b7f7f9ad47e11864e96d5927450624824946b5bcd74de46b5fb",
          "linkedWithoutMetadata": "fbc664e7aeda4b7f7f9ad47e11864e96d5927450624824946b5bcd74de46b5fb"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/v2-core/src/types/DataTypes.sol:LockupDynamic"
        ],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientSegments(address,struct LockupDynamic.SegmentWithDelta[])",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupDynamicStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:42"
            },
            {
              "label": "lockupDynamic",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupDynamic)29192",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)29312_storage",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)9538_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(SegmentWithDelta)29396_storage)dyn_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupDynamic)29192": {
              "label": "contract ISablierV2LockupDynamic",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)9538_storage)": {
              "label": "mapping(address => struct LockupDynamicStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)29312_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)28553",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)9538_storage": {
              "label": "struct LockupDynamicStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "segments",
                  "type": "t_array(t_struct(SegmentWithDelta)29396_storage)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(SegmentWithDelta)29396_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exponent",
                  "type": "t_userDefinedValueType(UD2x18)26749",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "delta",
                  "type": "t_uint40",
                  "offset": 24,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD2x18)26749": {
              "label": "UD2x18",
              "numberOfBytes": "8",
              "underlying": "t_uint64"
            },
            "t_userDefinedValueType(UD60x18)28553": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:LockupLinearStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:16",
        "version": {
          "withMetadata": "aba8efbb4278e3446aeaceaa8b5ef8ffe7c44458400a688cecdd93b1c6aadbee",
          "withoutMetadata": "2766e84e67eabad97990605ace7c3e82d513ad0cd625ad3809dbe6e8c5dfb7e9",
          "linkedWithoutMetadata": "2766e84e67eabad97990605ace7c3e82d513ad0cd625ad3809dbe6e8c5dfb7e9"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/v2-core/src/types/DataTypes.sol:LockupLinear"
        ],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientDurations(address,(uint40,uint40))",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupLinearStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:42"
            },
            {
              "label": "lockupLinear",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupLinear)29281",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)29312_storage",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)10715_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupLinear)29281": {
              "label": "contract ISablierV2LockupLinear",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)10715_storage)": {
              "label": "mapping(address => struct LockupLinearStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)29312_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)28553",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Durations)29464_storage": {
              "label": "struct LockupLinear.Durations",
              "members": [
                {
                  "label": "cliff",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "total",
                  "type": "t_uint40",
                  "offset": 5,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)10715_storage": {
              "label": "struct LockupLinearStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durations",
                  "type": "t_struct(Durations)29464_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD60x18)28553": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:NFT": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:8",
        "version": {
          "withMetadata": "8e4479fd5eef23d264d1c867fa32f823018acd46bfab49acc9909bf80d434d6f",
          "withoutMetadata": "8cb56b13b3a28a0670458267486272612909f877d123a98977ab9be7c8239ceb",
          "linkedWithoutMetadata": "8cb56b13b3a28a0670458267486272612909f877d123a98977ab9be7c8239ceb"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable",
          "solady/src/tokens/ERC721.sol:ERC721"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string,uint256,address)",
          "name()",
          "symbol()",
          "mintTo(address)",
          "tokenURI(uint256)",
          "withdrawPayments(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFT",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTokenId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:16"
            },
            {
              "label": "MINT_PRICE",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:17"
            },
            {
              "label": "__name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:20"
            },
            {
              "label": "__symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:NFTFactory": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:6",
        "version": {
          "withMetadata": "ef258882de782a4e9d0b3127518402d442d808340f56fcaae572c845cf7b0881",
          "withoutMetadata": "b6ce41bea82c8383d5f35cd969e852814b83c617c36e69d8064062004dda0cf1",
          "linkedWithoutMetadata": "b6ce41bea82c8383d5f35cd969e852814b83c617c36e69d8064062004dda0cf1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createNFTContract(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isNFTContract",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NFTFactory",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:WrappedVotingNftMintStrategy": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:100",
        "version": {
          "withMetadata": "05794f4b41b4988bbfe3cebd8de15b84c7e77617dd50ccdeb9acd59f2d75bc85",
          "withoutMetadata": "71092f04c37721f7488962e8bbf3fd88b88ddb2066ab43e84ac28430b425f1ef",
          "linkedWithoutMetadata": "71092f04c37721f7488962e8bbf3fd88b88ddb2066ab43e84ac28430b425f1ef"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllocationTimes(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrappedVotingNftMintStrategy",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:147"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "nftFactory",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(NFTFactory)11929",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:134"
            },
            {
              "label": "allocationStartTime",
              "offset": 20,
              "slot": "4",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "currentWinner",
              "offset": 8,
              "slot": "5",
              "type": "t_address",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "allocations",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(NFTFactory)11929": {
              "label": "contract NFTFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:99",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(struct DonationVotingMerkleDistributionBaseStrategy.ApplicationStatus[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "updateDistribution(bytes32,(uint256,string))",
          "isDistributionSet()",
          "hasBeenDistributed(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionBaseStrategy",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:286"
          },
          {
            "kind": "state-variable-immutable",
            "name": "PERMIT2",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:230"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)2922_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)12500_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12500_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12500_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:DonationVotingMerkleDistributionDirectTransferStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76",
        "version": {
          "withMetadata": "2cbf5b46b71db8b60dfc2b56d5a4792f989fba568cca20b7316641aa4002eb4c",
          "withoutMetadata": "7557c6a8ae5e73ceafdaf5dd395fbbce55639e999f7fb40636a1cc2a55c6b2e4",
          "linkedWithoutMetadata": "7557c6a8ae5e73ceafdaf5dd395fbbce55639e999f7fb40636a1cc2a55c6b2e4"
        },
        "inherit": [
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "solady/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [
          "(address,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionDirectTransferStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)2922_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)12500_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12500_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12500_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:DonationVotingMerkleDistributionVaultStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:92",
        "version": {
          "withMetadata": "790755b958619a6c7d10087090add8558b750ecd27fe21456d42059cc7776f28",
          "withoutMetadata": "4181bad1ba0a608f64ccdc9a7d967497505af9477b6f923d58e8f3ba2412ca0f",
          "linkedWithoutMetadata": "4181bad1ba0a608f64ccdc9a7d967497505af9477b6f923d58e8f3ba2412ca0f"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "solady/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [
          "(address,string,address)",
          "claim(struct DonationVotingMerkleDistributionVaultStrategy.Claim[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionVaultStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)2922_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)12500_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "16",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "16",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "18",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "67",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12500_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12500_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy": {
        "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:89",
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVBaseStrategy",
            "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:258"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14552_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14563_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14563_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14552_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14563_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14552_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-simple/QVSimpleStrategy.sol:QVSimpleStrategy": {
        "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:89",
        "version": {
          "withMetadata": "2dbee1aefe77ea71880bbfa65fdf59dda02f2930a9f62735755eb74268468073",
          "withoutMetadata": "02e1e6045734fbf34bb9a809ff82ece156308cbb87ef249dc38aa6946a868575",
          "linkedWithoutMetadata": "02e1e6045734fbf34bb9a809ff82ece156308cbb87ef249dc38aa6946a868575"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "addAllocator(address)",
          "removeAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVSimpleStrategy",
            "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:121"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14552_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14563_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:108"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:111"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14563_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14552_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14563_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14552_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:RFPCommitteeStrategy": {
        "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:83",
        "version": {
          "withMetadata": "e71d6810f2b0413f1871d25b4c67752bfd01951b4fd664a3ec18d91211499f5e",
          "withoutMetadata": "9b55e5816022eb416d9adfbd246ba296ff720722516d0d5e4910bbf10fe38928",
          "linkedWithoutMetadata": "9b55e5816022eb416d9adfbd246ba296ff720722516d0d5e4910bbf10fe38928"
        },
        "inherit": [
          "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPCommitteeStrategy",
            "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)2625",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)16062_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)16053_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "voteThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:104"
            },
            {
              "label": "votedFor",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:109"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:114"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)16062_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16053_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)16062_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)16053_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy": {
        "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:107",
        "version": {
          "withMetadata": "87143cc9fe1c032a5be0db8e474ce1d161e66d32d696f4782e2ab4419fcef503",
          "withoutMetadata": "290fdcbd33eeb0af599df17731aa82fce32889517e865d944ddefffe243a01e6",
          "linkedWithoutMetadata": "290fdcbd33eeb0af599df17731aa82fce32889517e865d944ddefffe243a01e6"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getPayouts(address[],bytes[])",
          "getMilestone(uint256)",
          "getMilestoneStatus(uint256)",
          "setPoolActive(bool)",
          "setMilestones(struct RFPSimpleStrategy.Milestone[])",
          "submitUpcomingMilestone((uint256,string))",
          "increaseMaxBid(uint256)",
          "rejectMilestone(uint256)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPSimpleStrategy",
            "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:199"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)2625",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)16062_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)16053_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)16062_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Recipient)16053_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)16062_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)16053_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/IEAS.sol:IEAS": {
        "src": "lib/eas-contracts/contracts/IEAS.sol:82",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSchemaRegistry()",
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))",
          "multiAttest(struct MultiAttestationRequest[])",
          "multiAttestByDelegation(struct MultiDelegatedAttestationRequest[])",
          "revoke((bytes32,(bytes32,uint256)))",
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))",
          "multiRevoke(struct MultiRevocationRequest[])",
          "multiRevokeByDelegation(struct MultiDelegatedRevocationRequest[])",
          "timestamp(bytes32)",
          "multiTimestamp(bytes32[])",
          "revokeOffchain(bytes32)",
          "multiRevokeOffchain(bytes32[])",
          "getAttestation(bytes32)",
          "isAttestationValid(bytes32)",
          "getTimestamp(bytes32)",
          "getRevokeOffchain(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol:ISchemaRegistry": {
        "src": "lib/eas-contracts/contracts/ISchemaRegistry.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "register(string,address,bool)",
          "getSchema(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver": {
        "src": "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:19",
        "version": {
          "withMetadata": "7f84e4b8c881ab06e7d6ac3b04df91056ec57702d66e49289a98e3246d7c35a0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "e8fae7e6852c87942616af0fd703f902abf1365fae6db442286527224c371fa2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:50",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)18294_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)18294_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)18294_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "44a91c6573cd70fe120d44ebc7ad445da2d9bc46ac6fb36bf049edbb02797c5c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "19c3635d876194dddf030987b4cee7cffde4a97881523f3f013eb76d202c73b7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:13",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "be543f3ed200e602c7134b9f8a59583c1607ed0a65aac29cbaf753db6971f237",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "63e7aa146b5f80f8f4a720a906f1995acef5aafdc3d639b4931041917fd4f684",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "366f8032392a03a19cf00289ee108315e177c93e6d8cf06fba0cbd487bec18b8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "68e6ac400d2792954fbf922c777b7d0443f797c8aac6a9d3355481619f530044",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/IEIP712.sol:IEIP712": {
        "src": "lib/permit2/src/interfaces/IEIP712.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/ISignatureTransfer.sol:ISignatureTransfer": {
        "src": "lib/permit2/src/interfaces/ISignatureTransfer.sol:9",
        "inherit": [
          "lib/permit2/src/interfaces/IEIP712.sol:IEIP712"
        ],
        "libraries": [],
        "methods": [
          "nonceBitmap(address,uint256)",
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)",
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)",
          "permitTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes)",
          "permitWitnessTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes32,string,bytes)",
          "invalidateUnorderedNonces(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable": {
        "src": "lib/v2-core/src/interfaces/IAdminable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "transferAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Base.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "comptroller()",
          "protocolRevenues(address)",
          "claimProtocolRevenues(address)",
          "setComptroller(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:ISablierV2Comptroller": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "flashFee()",
          "isFlashAsset(address)",
          "protocolFees(address)",
          "setFlashFee(uint256)",
          "setProtocolFee(address,uint256)",
          "toggleFlashAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:13",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getAsset(uint256)",
          "getDepositedAmount(uint256)",
          "getEndTime(uint256)",
          "getRecipient(uint256)",
          "getRefundedAmount(uint256)",
          "getSender(uint256)",
          "getStartTime(uint256)",
          "getWithdrawnAmount(uint256)",
          "isCancelable(uint256)",
          "isCold(uint256)",
          "isDepleted(uint256)",
          "isStream(uint256)",
          "isWarm(uint256)",
          "nextStreamId()",
          "refundableAmountOf(uint256)",
          "statusOf(uint256)",
          "streamedAmountOf(uint256)",
          "wasCanceled(uint256)",
          "withdrawableAmountOf(uint256)",
          "burn(uint256)",
          "cancel(uint256)",
          "cancelMultiple(uint256[])",
          "renounce(uint256)",
          "setNFTDescriptor(address)",
          "withdraw(uint256,address,uint128)",
          "withdrawMax(uint256,address)",
          "withdrawMaxAndTransfer(uint256,address)",
          "withdrawMultiple(uint256[],address,uint128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:ISablierV2LockupDynamic": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_SEGMENT_COUNT()",
          "getRange(uint256)",
          "getSegments(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDeltas((address,bool,address,uint128,address,(address,uint256),struct LockupDynamic.SegmentWithDelta[]))",
          "createWithMilestones((address,uint40,bool,address,uint128,address,(address,uint256),struct LockupDynamic.Segment[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:ISablierV2LockupLinear": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getCliffTime(uint256)",
          "getRange(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))",
          "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:ISablierV2NFTDescriptor": {
        "src": "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:Lockup": {
        "src": "lib/v2-core/src/types/DataTypes.sol:29",
        "version": {
          "withMetadata": "a70b17d007af5614ad481027a8c6708bc80c1a97b390c6d15c5d82123e551f4d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupDynamic": {
        "src": "lib/v2-core/src/types/DataTypes.sol:72",
        "version": {
          "withMetadata": "5723293ed3ae73d642f69a0eaf49d8c5e881fa282a3397803715ada9ca04d0a0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupLinear": {
        "src": "lib/v2-core/src/types/DataTypes.sol:180",
        "version": {
          "withMetadata": "4cfdc6cfaab6be1458fd9c6a4cdf8c89aaedf79be5902f9a4a558928f78286a8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/auth/Ownable.sol:Ownable": {
        "src": "solady/src/auth/Ownable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "renounceOwnership()",
          "requestOwnershipHandover()",
          "cancelOwnershipHandover()",
          "completeOwnershipHandover(address)",
          "owner()",
          "ownershipHandoverExpiresAt(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC20.sol:ERC20": {
        "src": "solady/src/tokens/ERC20.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC721.sol:ERC721": {
        "src": "solady/src/tokens/ERC721.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "balanceOf(address)",
          "getApproved(uint256)",
          "approve(address,uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/CREATE3.sol:CREATE3": {
        "src": "solady/src/utils/CREATE3.sol:8",
        "version": {
          "withMetadata": "f94e7f36ab8a338acc7d25541b721c6c7b70376fa2558b9c60e74fba95b5bc0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/SafeTransferLib.sol:SafeTransferLib": {
        "src": "solady/src/utils/SafeTransferLib.sol:12",
        "version": {
          "withMetadata": "1f0aba362cda502d1659bad5dfc58c2d5d0aa9ee18ed604a7e7b1970bb46a0e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "contracts/core/Allo.sol:Allo": {
        "src": "contracts/core/Allo.sol:89",
        "version": {
          "withMetadata": "fdfab481c06b86d50d181f5c2db0b05206e4012dfeb1096be95d19e677d9e980",
          "withoutMetadata": "2f0bb5c05d4ff444357fef42d369f70e73f71d58052d6c259b2c1010039dd8a3",
          "linkedWithoutMetadata": "2f0bb5c05d4ff444357fef42d369f70e73f71d58052d6c259b2c1010039dd8a3"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "solady/src/auth/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IAllo.sol:IAllo"
        ],
        "libraries": [
          "contracts/core/libraries/Clone.sol:Clone"
        ],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "getFeeDenominator()",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "isCloneableStrategy(address)",
          "getPool(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)18294_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "percentFee",
              "offset": 0,
              "slot": "52",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:114"
            },
            {
              "label": "baseFee",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:129"
            },
            {
              "label": "_poolIndex",
              "offset": 0,
              "slot": "54",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "55",
              "type": "t_address_payable",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "56",
              "type": "t_contract(IRegistry)2625",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:133"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "57",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:134"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "58",
              "type": "t_mapping(t_uint256,t_struct(Pool)2144_storage)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:135"
            },
            {
              "label": "cloneableStrategies",
              "offset": 0,
              "slot": "59",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)2796": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)18294_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)2144_storage)": {
              "label": "mapping(uint256 => struct IAllo.Pool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Pool)2144_storage": {
              "label": "struct IAllo.Pool",
              "members": [
                {
                  "label": "profileId",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "strategy",
                  "type": "t_contract(IStrategy)2796",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "managerRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)18294_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Anchor.sol:Anchor": {
        "src": "contracts/core/Anchor.sol:89",
        "version": {
          "withMetadata": "ad5fd04a5efb2fcd89740a48c98ef9991133e5c0e97040a9f80be655982b1993",
          "withoutMetadata": "7c387b18ca48b348b1f66a70ba201e3a467bf09f94fc5b8e83ff8746c22ec24a",
          "linkedWithoutMetadata": "7c387b18ca48b348b1f66a70ba201e3a467bf09f94fc5b8e83ff8746c22ec24a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "execute(address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Anchor",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "profileId",
            "src": "contracts/core/Anchor.sol:89"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Registry.sol:Registry": {
        "src": "contracts/core/Registry.sol:103",
        "version": {
          "withMetadata": "327f44c2bd3d82e60e0edf7b523bf25702eff51f1830c396f9a288a5e349f477",
          "withoutMetadata": "19d31f589012f51cef2f3d9f33cc074ab0467906d900b3423f2b7ad9b4993953",
          "linkedWithoutMetadata": "19d31f589012f51cef2f3d9f33cc074ab0467906d900b3423f2b7ad9b4993953"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "contracts/core/libraries/Native.sol:Native",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "contracts/core/interfaces/IRegistry.sol:IRegistry"
        ],
        "libraries": [
          "solady/src/utils/CREATE3.sol:CREATE3"
        ],
        "methods": [
          "initialize(address)",
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)18294_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "anchorToProfileId",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:109"
            },
            {
              "label": "profilesById",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_struct(Profile)2452_storage)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:111"
            },
            {
              "label": "profileIdToPendingOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:113"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Profile)2452_storage)": {
              "label": "mapping(bytes32 => struct IRegistry.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)18294_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Profile)2452_storage": {
              "label": "struct IRegistry.Profile",
              "members": [
                {
                  "label": "id",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "anchor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)18294_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IAllo.sol:IAllo": {
        "src": "contracts/core/interfaces/IAllo.sol:97",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "isCloneableStrategy(address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "getPool(uint256)",
          "getFeeDenominator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IRegistry.sol:IRegistry": {
        "src": "contracts/core/interfaces/IRegistry.sol:92",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/core/interfaces/IStrategy.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "isValidAllocator(address)",
          "isPoolActive()",
          "getPoolAmount()",
          "increasePoolAmount(uint256)",
          "getRecipientStatus(address)",
          "getPayouts(address[],bytes[])",
          "initialize(uint256,bytes)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Clone.sol:Clone": {
        "src": "contracts/core/libraries/Clone.sol:37",
        "version": {
          "withMetadata": "fde5145c87dc7af9904126c46fe082bd31ea61e156b7c22bb75a9da17c670a9b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Errors.sol:Errors": {
        "src": "contracts/core/libraries/Errors.sol:109",
        "version": {
          "withMetadata": "0b48a6cc2345722c86976b3be52cfef7ca4feaf89f27efbc2320b657f25e59d4",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Native.sol:Native": {
        "src": "contracts/core/libraries/Native.sol:26",
        "version": {
          "withMetadata": "d45e8e7e32ff08f7e9a5625ca5e2de99323893f068d5ab5e436793226c20ac1a",
          "withoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466",
          "linkedWithoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Transfer.sol:Transfer": {
        "src": "contracts/core/libraries/Transfer.sol:95",
        "version": {
          "withMetadata": "cc47564eb232c88da9f4975745510705d5fee2d2bc0af353c6eb82e4d49aad5c",
          "withoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466",
          "linkedWithoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466"
        },
        "inherit": [
          "contracts/core/libraries/Native.sol:Native"
        ],
        "libraries": [
          "solady/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/factory/ContractFactory.sol:ContractFactory": {
        "src": "contracts/factory/ContractFactory.sol:107",
        "version": {
          "withMetadata": "afb1926dc4c7bdeda9c6a3e720b16b3c05756744a1ef5e3b89d9adf6872ae858",
          "withoutMetadata": "0cd9f0333d78bdd2af9498d5d4adeec01b0e328ca33e6873216a037ccc439f13",
          "linkedWithoutMetadata": "0cd9f0333d78bdd2af9498d5d4adeec01b0e328ca33e6873216a037ccc439f13"
        },
        "inherit": [],
        "libraries": [
          "solady/src/utils/CREATE3.sol:CREATE3"
        ],
        "methods": [
          "()",
          "deploy(string,string,bytes)",
          "setDeployer(address,bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ContractFactory",
            "src": "contracts/factory/ContractFactory.sol:119"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "usedSalts",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            },
            {
              "label": "isDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/BaseStrategy.sol:BaseStrategy": {
        "src": "contracts/strategies/BaseStrategy.sol:111",
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "getPoolAmount()",
          "isPoolActive()",
          "getRecipientStatus(address)",
          "increasePoolAmount(uint256)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)",
          "getPayouts(address[],bytes[])",
          "isValidAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseStrategy",
            "src": "contracts/strategies/BaseStrategy.sol:129"
          },
          {
            "kind": "state-variable-immutable",
            "name": "allo",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          },
          {
            "kind": "state-variable-immutable",
            "name": "strategyId",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:DirectGrantsSimpleStrategy": {
        "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:112",
        "version": {
          "withMetadata": "4878eca6facb4ae3fb280cad52326e78fc91481de53e944ad551931a775cab87",
          "withoutMetadata": "ab5389251e0ffdcfb84d04d58efda1952af7bb08678d257f83fc95b2c255337d",
          "linkedWithoutMetadata": "ab5389251e0ffdcfb84d04d58efda1952af7bb08678d257f83fc95b2c255337d"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getMilestoneStatus(address,uint256)",
          "getMilestones(address)",
          "setMilestones(address,struct DirectGrantsSimpleStrategy.Milestone[])",
          "reviewSetMilestones(address,uint8)",
          "submitMilestone(address,uint256,(uint256,string))",
          "rejectMilestone(address,uint256)",
          "setRecipientStatusToInReview(address[])",
          "setPoolActive(bool)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DirectGrantsSimpleStrategy",
            "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:191"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:161"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:162"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:164"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(IRegistry)2625",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:166"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:167"
            },
            {
              "label": "_acceptedRecipientIds",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:172"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)3884_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:177"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Milestone)3893_storage)dyn_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:179"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:184"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)3893_storage)dyn_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(Milestone)3893_storage)dyn_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Milestone[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)3884_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)3893_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)3884_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "milestonesReviewStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:DonationVotingCustomRegistryStrategy": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51",
        "version": {
          "withMetadata": "781f41d2df1bc4443da15deb09143692041c332e14a15258534be9f473897ab2",
          "withoutMetadata": "5ec248496bb5814db29db320567ee228cf276e7cfd7096f1fc375c38e58dfc37",
          "linkedWithoutMetadata": "5ec248496bb5814db29db320567ee228cf276e7cfd7096f1fc375c38e58dfc37"
        },
        "inherit": [
          "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingCustomRegistryStrategy",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)5485_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(SimpleProjectRegistry)5456",
              "contract": "DonationVotingCustomRegistryStrategy",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(SimpleProjectRegistry)5456": {
              "label": "contract SimpleProjectRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5485_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)2643_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)5485_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:SimpleProjectRegistry": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:26",
        "version": {
          "withMetadata": "b3fd6196a86f7efffa928fa83f55f655c7b39b0ff313d2fb6102759c5bef3786",
          "withoutMetadata": "c42152b6d8418493091034c29cc09b77be668156c32f57fa1f159cd5714b6a87",
          "linkedWithoutMetadata": "c42152b6d8418493091034c29cc09b77be668156c32f57fa1f159cd5714b6a87"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addProject(address)",
          "addProjects(address[])",
          "removeProject(address)",
          "removeProjects(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleProjectRegistry",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "projects",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleProjectRegistry",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy": {
        "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:100",
        "version": {
          "withMetadata": "80a3715df56a5dd5b5d43593f0ab3552657dca908fe0688996a1cc8b58245225",
          "withoutMetadata": "3ec7486dc8e287f7e75c5151a3f2fe08b9f0a051775db358d3d8f08da384837c",
          "linkedWithoutMetadata": "3ec7486dc8e287f7e75c5151a3f2fe08b9f0a051775db358d3d8f08da384837c"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "setPayout(address[],uint256[])",
          "claim(struct DonationVotingStrategy.Claim[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingStrategy",
            "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:198"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)5485_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5485_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)2643_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)5485_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:ProportionalPayoutStrategy": {
        "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:112",
        "version": {
          "withMetadata": "002037cf30c961de7133f1586bbb962f57284d924b3dc22dcf1eebb37bf116c5",
          "withoutMetadata": "08ce3ade956cda6594eb2b2b26b6394314715341bbd16f0b7b5d7b5abc73a288",
          "linkedWithoutMetadata": "08ce3ade956cda6594eb2b2b26b6394314715341bbd16f0b7b5d7b5abc73a288"
        },
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "setAllocationTime(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProportionalPayoutStrategy",
            "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:166"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Recipient)6892_storage)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:151"
            },
            {
              "label": "hasAllocated",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:152"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:153"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ERC721)30781",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "maxRecipientsAllowed",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:157"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:158"
            },
            {
              "label": "totalAllocations",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:159"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)30781": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)6892_storage)": {
              "label": "mapping(address => struct ProportionalPayoutStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)6892_storage": {
              "label": "struct ProportionalPayoutStrategy.Recipient",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:QVGovernanceERC20Votes": {
        "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:89",
        "version": {
          "withMetadata": "dfe378c2d07fae6fd82fdca13117937a8639607410bc8738e2cfa4347fff1be7",
          "withoutMetadata": "73bd804905b977d1c9d5aac698b0555f496b116b71a2e58743c769494d5f055f",
          "linkedWithoutMetadata": "73bd804905b977d1c9d5aac698b0555f496b116b71a2e58743c769494d5f055f"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVGovernanceERC20Votes",
            "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:104"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14552_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14563_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "govToken",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IVotes)18741",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:97"
            },
            {
              "label": "timestamp",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:98"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IVotes)18741": {
              "label": "contract IVotes",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14563_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14552_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14563_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14552_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:HackathonQVStrategy": {
        "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:113",
        "version": {
          "withMetadata": "bf6bafda7af8bcb922bbadde4fd147ee48d0fc410e2e252108e873c46c791c68",
          "withoutMetadata": "94f052f1dfc0f99a9d01b9e0a892be70484d9f24eff587013e7ef7eb789b219c",
          "linkedWithoutMetadata": "94f052f1dfc0f99a9d01b9e0a892be70484d9f24eff587013e7ef7eb789b219c"
        },
        "inherit": [
          "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver",
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllowedRecipientIds(address[],uint64,bytes)",
          "setPayoutPercentages(uint256[])",
          "getPayouts(address[],bytes[])",
          "getAttestation(bytes32)",
          "getSchema(bytes32)",
          "isPayable()",
          "isAttestationExpired(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HackathonQVStrategy",
            "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:150"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14552_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14563_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "_eas",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IEAS)17432",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            },
            {
              "label": "payoutPercentages",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "votesByRank",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:133"
            },
            {
              "label": "easInfo",
              "offset": 0,
              "slot": "14",
              "type": "t_struct(EASInfo)7782_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "19",
              "type": "t_contract(ERC721)30781",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "recipientIdToUID",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:136"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:137"
            },
            {
              "label": "recipientIdToIndex",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:139"
            },
            {
              "label": "indexToRecipientId",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:145"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ERC721)30781": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IEAS)17432": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(ISchemaRegistry)17477": {
              "label": "contract ISchemaRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14563_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14552_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14563_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(EASInfo)7782_storage": {
              "label": "struct HackathonQVStrategy.EASInfo",
              "members": [
                {
                  "label": "eas",
                  "type": "t_contract(IEAS)17432",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "schemaRegistry",
                  "type": "t_contract(ISchemaRegistry)17477",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "schemaUID",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "schema",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "revocable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14552_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver": {
        "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:19",
        "inherit": [
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver"
        ],
        "libraries": [],
        "methods": [
          "isPayable()",
          "()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_eas",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IEAS)17432",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            }
          ],
          "types": {
            "t_contract(IEAS)17432": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:QVNftTieredStrategy": {
        "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:96",
        "version": {
          "withMetadata": "dd71db329f1447e8993123bdc070240b5be492652f6c3dc8da0466282a406481",
          "withoutMetadata": "ab12cd3005380373488b60b88d02134d6dac3b1e9daae2d28f6fce853f3de06e",
          "linkedWithoutMetadata": "ab12cd3005380373488b60b88d02134d6dac3b1e9daae2d28f6fce853f3de06e"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVNftTieredStrategy",
            "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14552_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14563_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "nfts",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_contract(ERC721)30781)dyn_storage",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:112"
            },
            {
              "label": "maxVoiceCreditsPerNft",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_contract(ERC721)30781,t_uint256)",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:113"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_contract(ERC721)30781,t_mapping(t_uint256,t_uint256))",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(ERC721)30781)dyn_storage": {
              "label": "contract ERC721[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)30781": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14563_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14552_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)30781,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(contract ERC721 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)30781,t_uint256)": {
              "label": "mapping(contract ERC721 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14563_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14552_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:LockupDynamicStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:16",
        "version": {
          "withMetadata": "2da6d7203825c5820e5ae7cf84e06048ddb92998773df75032f5a4a53e838644",
          "withoutMetadata": "fbc664e7aeda4b7f7f9ad47e11864e96d5927450624824946b5bcd74de46b5fb",
          "linkedWithoutMetadata": "fbc664e7aeda4b7f7f9ad47e11864e96d5927450624824946b5bcd74de46b5fb"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/v2-core/src/types/DataTypes.sol:LockupDynamic"
        ],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientSegments(address,struct LockupDynamic.SegmentWithDelta[])",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupDynamicStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:42"
            },
            {
              "label": "lockupDynamic",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupDynamic)29192",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)29312_storage",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)9538_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(SegmentWithDelta)29396_storage)dyn_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupDynamic)29192": {
              "label": "contract ISablierV2LockupDynamic",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)9538_storage)": {
              "label": "mapping(address => struct LockupDynamicStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)29312_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)28553",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)9538_storage": {
              "label": "struct LockupDynamicStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "segments",
                  "type": "t_array(t_struct(SegmentWithDelta)29396_storage)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(SegmentWithDelta)29396_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exponent",
                  "type": "t_userDefinedValueType(UD2x18)26749",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "delta",
                  "type": "t_uint40",
                  "offset": 24,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD2x18)26749": {
              "label": "UD2x18",
              "numberOfBytes": "8",
              "underlying": "t_uint64"
            },
            "t_userDefinedValueType(UD60x18)28553": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:LockupLinearStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:16",
        "version": {
          "withMetadata": "1b0866a68aa70c3798855a5509aa897b1a1c04f9e297e14abc2adaae323a9f30",
          "withoutMetadata": "2766e84e67eabad97990605ace7c3e82d513ad0cd625ad3809dbe6e8c5dfb7e9",
          "linkedWithoutMetadata": "2766e84e67eabad97990605ace7c3e82d513ad0cd625ad3809dbe6e8c5dfb7e9"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/v2-core/src/types/DataTypes.sol:LockupLinear"
        ],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientDurations(address,(uint40,uint40))",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupLinearStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:42"
            },
            {
              "label": "lockupLinear",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupLinear)29281",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)29312_storage",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)10715_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupLinear)29281": {
              "label": "contract ISablierV2LockupLinear",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)10715_storage)": {
              "label": "mapping(address => struct LockupLinearStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)29312_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)28553",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Durations)29464_storage": {
              "label": "struct LockupLinear.Durations",
              "members": [
                {
                  "label": "cliff",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "total",
                  "type": "t_uint40",
                  "offset": 5,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)10715_storage": {
              "label": "struct LockupLinearStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durations",
                  "type": "t_struct(Durations)29464_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD60x18)28553": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:NFT": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:8",
        "version": {
          "withMetadata": "34e04642d04d17a199348b693f9ec0ba55fc066c117385fe955bb232e7ec2935",
          "withoutMetadata": "8cb56b13b3a28a0670458267486272612909f877d123a98977ab9be7c8239ceb",
          "linkedWithoutMetadata": "8cb56b13b3a28a0670458267486272612909f877d123a98977ab9be7c8239ceb"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable",
          "solady/src/tokens/ERC721.sol:ERC721"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string,uint256,address)",
          "name()",
          "symbol()",
          "mintTo(address)",
          "tokenURI(uint256)",
          "withdrawPayments(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFT",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTokenId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:16"
            },
            {
              "label": "MINT_PRICE",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:17"
            },
            {
              "label": "__name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:20"
            },
            {
              "label": "__symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:NFTFactory": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:6",
        "version": {
          "withMetadata": "c25b010c3397b396d2364e7039b14b87b367e9da1d626a7a51cc66e5a5a1c0da",
          "withoutMetadata": "5014bf32943d39f2c92c5865f1f426ce26f554044198a0e0bd10141d0f6fb7b7",
          "linkedWithoutMetadata": "5014bf32943d39f2c92c5865f1f426ce26f554044198a0e0bd10141d0f6fb7b7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createNFTContract(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isNFTContract",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NFTFactory",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:WrappedVotingNftMintStrategy": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:100",
        "version": {
          "withMetadata": "abaae693cab2b7f77ceee52b11ce70e3a0d114c8ae158763dd77af9290568221",
          "withoutMetadata": "71092f04c37721f7488962e8bbf3fd88b88ddb2066ab43e84ac28430b425f1ef",
          "linkedWithoutMetadata": "71092f04c37721f7488962e8bbf3fd88b88ddb2066ab43e84ac28430b425f1ef"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllocationTimes(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrappedVotingNftMintStrategy",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:147"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "nftFactory",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(NFTFactory)11929",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:134"
            },
            {
              "label": "allocationStartTime",
              "offset": 20,
              "slot": "4",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "currentWinner",
              "offset": 8,
              "slot": "5",
              "type": "t_address",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "allocations",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(NFTFactory)11929": {
              "label": "contract NFTFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:99",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(struct DonationVotingMerkleDistributionBaseStrategy.ApplicationStatus[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "updateDistribution(bytes32,(uint256,string))",
          "isDistributionSet()",
          "hasBeenDistributed(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionBaseStrategy",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:286"
          },
          {
            "kind": "state-variable-immutable",
            "name": "PERMIT2",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:230"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)2922_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)12500_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12500_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12500_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:DonationVotingMerkleDistributionDirectTransferStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76",
        "version": {
          "withMetadata": "6d4f668cd572f757be851ddd6cd43d59add715aa045580c934d1b13c50198b78",
          "withoutMetadata": "7557c6a8ae5e73ceafdaf5dd395fbbce55639e999f7fb40636a1cc2a55c6b2e4",
          "linkedWithoutMetadata": "7557c6a8ae5e73ceafdaf5dd395fbbce55639e999f7fb40636a1cc2a55c6b2e4"
        },
        "inherit": [
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "solady/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [
          "(address,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionDirectTransferStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)2922_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)12500_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12500_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12500_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:DonationVotingMerkleDistributionVaultStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:92",
        "version": {
          "withMetadata": "d10b1abfd48f921a1435de7317ce91c3144916ac46e89c7b592cdec36d08f025",
          "withoutMetadata": "4181bad1ba0a608f64ccdc9a7d967497505af9477b6f923d58e8f3ba2412ca0f",
          "linkedWithoutMetadata": "4181bad1ba0a608f64ccdc9a7d967497505af9477b6f923d58e8f3ba2412ca0f"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "solady/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [
          "(address,string,address)",
          "claim(struct DonationVotingMerkleDistributionVaultStrategy.Claim[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionVaultStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)2922_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)12500_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "16",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "16",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "18",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "67",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12500_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12500_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy": {
        "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:89",
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVBaseStrategy",
            "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:258"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14552_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14563_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14563_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14552_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14563_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14552_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-simple/QVSimpleStrategy.sol:QVSimpleStrategy": {
        "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:89",
        "version": {
          "withMetadata": "dd0412352a768271ca642575ba417f31160cf01dcfedcc410ac16ef3a97f6880",
          "withoutMetadata": "02e1e6045734fbf34bb9a809ff82ece156308cbb87ef249dc38aa6946a868575",
          "linkedWithoutMetadata": "02e1e6045734fbf34bb9a809ff82ece156308cbb87ef249dc38aa6946a868575"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "addAllocator(address)",
          "removeAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVSimpleStrategy",
            "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:121"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14552_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14563_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:108"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:111"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14563_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14552_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14563_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14552_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:RFPCommitteeStrategy": {
        "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:83",
        "version": {
          "withMetadata": "55f193c6471c95ae06fc9b2f94b317f023d560b224627274319892aa7cefe2ac",
          "withoutMetadata": "9b55e5816022eb416d9adfbd246ba296ff720722516d0d5e4910bbf10fe38928",
          "linkedWithoutMetadata": "9b55e5816022eb416d9adfbd246ba296ff720722516d0d5e4910bbf10fe38928"
        },
        "inherit": [
          "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPCommitteeStrategy",
            "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)2625",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)16062_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)16053_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "voteThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:104"
            },
            {
              "label": "votedFor",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:109"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:114"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)16062_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16053_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)16062_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)16053_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy": {
        "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:107",
        "version": {
          "withMetadata": "1e3fed60d72b416d36bdee1826341cbe950583a8e0667835821ca74ec9e3d699",
          "withoutMetadata": "290fdcbd33eeb0af599df17731aa82fce32889517e865d944ddefffe243a01e6",
          "linkedWithoutMetadata": "290fdcbd33eeb0af599df17731aa82fce32889517e865d944ddefffe243a01e6"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getPayouts(address[],bytes[])",
          "getMilestone(uint256)",
          "getMilestoneStatus(uint256)",
          "setPoolActive(bool)",
          "setMilestones(struct RFPSimpleStrategy.Milestone[])",
          "submitUpcomingMilestone((uint256,string))",
          "increaseMaxBid(uint256)",
          "rejectMilestone(uint256)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPSimpleStrategy",
            "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:199"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)2625",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)16062_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)16053_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)16062_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Recipient)16053_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)16062_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)16053_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/IEAS.sol:IEAS": {
        "src": "lib/eas-contracts/contracts/IEAS.sol:82",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSchemaRegistry()",
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))",
          "multiAttest(struct MultiAttestationRequest[])",
          "multiAttestByDelegation(struct MultiDelegatedAttestationRequest[])",
          "revoke((bytes32,(bytes32,uint256)))",
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))",
          "multiRevoke(struct MultiRevocationRequest[])",
          "multiRevokeByDelegation(struct MultiDelegatedRevocationRequest[])",
          "timestamp(bytes32)",
          "multiTimestamp(bytes32[])",
          "revokeOffchain(bytes32)",
          "multiRevokeOffchain(bytes32[])",
          "getAttestation(bytes32)",
          "isAttestationValid(bytes32)",
          "getTimestamp(bytes32)",
          "getRevokeOffchain(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol:ISchemaRegistry": {
        "src": "lib/eas-contracts/contracts/ISchemaRegistry.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "register(string,address,bool)",
          "getSchema(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver": {
        "src": "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:19",
        "version": {
          "withMetadata": "b9e02fe77dfa21a16b48674e87d42dc1644f5b574ce4c5db422f7da69a8aa0f7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "b026d1ec53ab810b88fcf9cd9df913ac2cf4f0963848f6d4f4e9d468f0df7a7b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:50",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)18294_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)18294_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)18294_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "99fb9069d8ce36cb30de715a0f5059a3d16aad6ac9a0e5e05419a8106d7bb367",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "ca9cac755e49d5982c20cdf3498f358063948615e1c99726b0a11c2517d3becd",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:13",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "5b319ac789e3b371b23ba90ac37e114243f1313fb089d0d51079ae70f2bdf899",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "cdf0f5ebf4393dd442d4ac0fd9c28d137c7121866bdefd7e42a26197cf3f200e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "56538d04b7b77dad6bc676bb46c697855a14a28ca2daeda0e2d0e5e6c38571ae",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "fae17ac223a1791901a9108ba0172c9e5c027009057a5c6d057becf5afcff695",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/IEIP712.sol:IEIP712": {
        "src": "lib/permit2/src/interfaces/IEIP712.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/ISignatureTransfer.sol:ISignatureTransfer": {
        "src": "lib/permit2/src/interfaces/ISignatureTransfer.sol:9",
        "inherit": [
          "lib/permit2/src/interfaces/IEIP712.sol:IEIP712"
        ],
        "libraries": [],
        "methods": [
          "nonceBitmap(address,uint256)",
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)",
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)",
          "permitTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes)",
          "permitWitnessTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes32,string,bytes)",
          "invalidateUnorderedNonces(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable": {
        "src": "lib/v2-core/src/interfaces/IAdminable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "transferAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Base.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "comptroller()",
          "protocolRevenues(address)",
          "claimProtocolRevenues(address)",
          "setComptroller(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:ISablierV2Comptroller": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "flashFee()",
          "isFlashAsset(address)",
          "protocolFees(address)",
          "setFlashFee(uint256)",
          "setProtocolFee(address,uint256)",
          "toggleFlashAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:13",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getAsset(uint256)",
          "getDepositedAmount(uint256)",
          "getEndTime(uint256)",
          "getRecipient(uint256)",
          "getRefundedAmount(uint256)",
          "getSender(uint256)",
          "getStartTime(uint256)",
          "getWithdrawnAmount(uint256)",
          "isCancelable(uint256)",
          "isCold(uint256)",
          "isDepleted(uint256)",
          "isStream(uint256)",
          "isWarm(uint256)",
          "nextStreamId()",
          "refundableAmountOf(uint256)",
          "statusOf(uint256)",
          "streamedAmountOf(uint256)",
          "wasCanceled(uint256)",
          "withdrawableAmountOf(uint256)",
          "burn(uint256)",
          "cancel(uint256)",
          "cancelMultiple(uint256[])",
          "renounce(uint256)",
          "setNFTDescriptor(address)",
          "withdraw(uint256,address,uint128)",
          "withdrawMax(uint256,address)",
          "withdrawMaxAndTransfer(uint256,address)",
          "withdrawMultiple(uint256[],address,uint128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:ISablierV2LockupDynamic": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_SEGMENT_COUNT()",
          "getRange(uint256)",
          "getSegments(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDeltas((address,bool,address,uint128,address,(address,uint256),struct LockupDynamic.SegmentWithDelta[]))",
          "createWithMilestones((address,uint40,bool,address,uint128,address,(address,uint256),struct LockupDynamic.Segment[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:ISablierV2LockupLinear": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getCliffTime(uint256)",
          "getRange(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))",
          "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:ISablierV2NFTDescriptor": {
        "src": "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:Lockup": {
        "src": "lib/v2-core/src/types/DataTypes.sol:29",
        "version": {
          "withMetadata": "b9cbf4c08f8e68e17c155fbda64c98bfd33924d006b6b636b17322950b610974",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupDynamic": {
        "src": "lib/v2-core/src/types/DataTypes.sol:72",
        "version": {
          "withMetadata": "f5624512b5ff0dce01bf8e012c450849818c598b29c18a97c1114074340003c4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupLinear": {
        "src": "lib/v2-core/src/types/DataTypes.sol:180",
        "version": {
          "withMetadata": "b625c42d78a453b81804600dfbfa446849c745d8006e7d9fac513abc84d35b10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/auth/Ownable.sol:Ownable": {
        "src": "solady/src/auth/Ownable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "renounceOwnership()",
          "requestOwnershipHandover()",
          "cancelOwnershipHandover()",
          "completeOwnershipHandover(address)",
          "owner()",
          "ownershipHandoverExpiresAt(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC20.sol:ERC20": {
        "src": "solady/src/tokens/ERC20.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC721.sol:ERC721": {
        "src": "solady/src/tokens/ERC721.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "balanceOf(address)",
          "getApproved(uint256)",
          "approve(address,uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/CREATE3.sol:CREATE3": {
        "src": "solady/src/utils/CREATE3.sol:8",
        "version": {
          "withMetadata": "6cd5a72c3511245b842bcc2aeed47b15d3b95dad50177645a782419c43a184cf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/SafeTransferLib.sol:SafeTransferLib": {
        "src": "solady/src/utils/SafeTransferLib.sol:12",
        "version": {
          "withMetadata": "b64c05e7cb32794bfe081576d52f774a4d904ffa53441faeefaa8da1be3cc422",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      }
    }
  ]
}